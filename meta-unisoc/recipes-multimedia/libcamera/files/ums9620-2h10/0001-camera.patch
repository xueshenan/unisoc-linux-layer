From ff9ca216e02443b3120ec48264fa438af995579b Mon Sep 17 00:00:00 2001
From: fujia <fujia@bingtangtech.com>
Date: Tue, 8 Aug 2023 16:52:10 +0800
Subject: [PATCH] camera

---
 devices/ums9620-2h10/BoardConfig.mk           |    6 +-
 sensor/af_drv/dw9763/Makefile                 |   72 ++
 sensor/af_drv/dw9763/af_dw9763.c              |    5 +
 sensor/af_drv/dw9763/af_dw9763.h              |    2 +-
 sensor/af_drv/vcm_lib_cfg.mk                  |    1 +
 .../ov13855/sensor_ov13855_mipi_raw.h         |    2 +-
 .../classic/OmniVision/ov13855_dual/Makefile  |   72 ++
 .../sensor_ov13855_dual_mipi_raw.c            | 1057 +++++++++++++++++
 .../sensor_ov13855_dual_mipi_raw.h            |  938 +++++++++++++++
 .../classic/OmniVision/ov8856_front/Makefile  |   72 ++
 .../sensor_ov8856_front_mipi_raw_2lane.h      |    2 +-
 .../sensor_ov8856_front_mipi_raw_4lane.h      |    2 +-
 .../ov8856_front/sensor_ov8856_front_otp.h    |    2 +-
 .../OmniVision/ov8856_xl_front/Makefile       |  143 +--
 .../sensor_ov8856_xl_f_mipi_raw.c             |    6 +-
 .../ov8856_xl_front/sensor_ov8856_xl_f_otp.h  |    2 +-
 sensor/sensor_drv/sensor_lib_cfg.mk           |    1 +
 17 files changed, 2302 insertions(+), 83 deletions(-)
 create mode 100755 sensor/af_drv/dw9763/Makefile
 create mode 100755 sensor/sensor_drv/classic/OmniVision/ov13855_dual/Makefile
 create mode 100755 sensor/sensor_drv/classic/OmniVision/ov13855_dual/sensor_ov13855_dual_mipi_raw.c
 create mode 100755 sensor/sensor_drv/classic/OmniVision/ov13855_dual/sensor_ov13855_dual_mipi_raw.h
 create mode 100755 sensor/sensor_drv/classic/OmniVision/ov8856_front/Makefile

diff --git a/devices/ums9620-2h10/BoardConfig.mk b/devices/ums9620-2h10/BoardConfig.mk
index 22efc3f..97586e5 100755
--- a/devices/ums9620-2h10/BoardConfig.mk
+++ b/devices/ums9620-2h10/BoardConfig.mk
@@ -50,8 +50,8 @@ BACK_EXT2_CAMERA_SUPPORT_SIZE := s8
 TARGET_BOARD_SW_GTM_SUPPORT := true
 
 #camera sensor support list
-CAMERA_SENSOR_TYPE_BACK := "imx586,s5kgw1sp03,ov8856_back,ov08a10,ov08a10_back,ov08a10_back_sunny,ov02a10"
-CAMERA_SENSOR_TYPE_FRONT := "imx616"
+CAMERA_SENSOR_TYPE_BACK := "ov13855,ov13855_dual,imx586,s5kgw1sp03,ov8856_back,ov08a10,ov08a10_back,ov08a10_back_sunny,ov02a10"
+CAMERA_SENSOR_TYPE_FRONT := "ov8856_front,ov8856_xl_front,imx616"
 #camera dual sensor
 TARGET_BOARD_CAMERA_DUAL_SENSOR_MODULE := true
 #dual camera 3A sync
@@ -65,7 +65,7 @@ TARGET_BOARD_CAMERA_4IN1 := true
 TARGET_BOARD_SENSOR_SS4C := true
 
 #tuning param support list
-TUNING_PARAM_LIST := "s5kgw1sp03_back_main,imx586_replace_back_main,ov08a10_back_tele,ov8856_back_ultrawide,ov8866_front_dual,imx616_front_main,ov02a10_back_macro"
+TUNING_PARAM_LIST := "ov13855_back_main,ov8856_back_ultrawide,ov13855_back_slave,ov8856_front_dual,s5kgw1sp03_back_main,imx586_replace_back_main,ov08a10_back_tele,ov8856_back_ultrawide,ov8866_front_dual,imx616_front_main,ov02a10_back_macro"
 
 #4in1 ov4c
 TARGET_BOARD_SENSOR_OV4C := true
diff --git a/sensor/af_drv/dw9763/Makefile b/sensor/af_drv/dw9763/Makefile
new file mode 100755
index 0000000..6f84f3b
--- /dev/null
+++ b/sensor/af_drv/dw9763/Makefile
@@ -0,0 +1,72 @@
+#
+# SPDX-FileCopyrightText: 2020-2022 Unisoc (Shanghai) Technologies Co., Ltd
+# SPDX-License-Identifier: LicenseRef-Unisoc-General-1.0
+#
+# Copyright 2022-2022 Unisoc (Shanghai) Technologies Co., Ltd.
+# Licensed under the Unisoc General Software License, version 1.0 (the License);
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+# https://www.unisoc.com/en_us/license/UNISOC_GENERAL_LICENSE_V1.0-EN_US
+# Software distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OF ANY KIND, either express or implied.
+# See the Unisoc General Software License, version 1.0 for more details.
+#
+CFLAGS = -Wall -g -O -fPIC 
+
+LOCAL_C_INCLUDES :=
+LOCAL_SRC_DIR :=
+LOCAL_SRC_FILES :=
+LOCAL_CFLAGS :=
+
+LOCAL_PATH := $(shell pwd)
+
+include $(LOCAL_PATH)/../../../devices/$(BOARD)/BoardConfig.mk
+include $(LOCAL_PATH)/../../../camera.mk
+
+
+TARGET_KERNEL_UAPI_PATH := kernel4.14_sprdroidq
+
+LOCAL_C_INCLUDES := $(LOCAL_PATH)/../../inc \
+                    $(LOCAL_PATH)/../../../$(OEM_DIR)/inc \
+                    $(LOCAL_PATH)/../../../common/inc \
+                    $(LOCAL_PATH)/../../../$(ISPDRV_DIR)/isp_tune \
+                    $(LOCAL_PATH)/../../../$(ISPALG_DIR)/common/inc \
+                    $(LOCAL_PATH)/../../../$(ISPDRV_DIR)/middleware/inc \
+                    $(LOCAL_PATH)/../../../$(ISPDRV_DIR)/driver/inc \
+                    $(LOCAL_PATH)/../../../KIface \
+                    $(LOCAL_PATH)/../../../KIface/interface \
+                    $(LOCAL_PATH)/../../../utils/camxmlparser/inc/libxml2 \
+                    $(LOCAL_PATH)/../../af_drv \
+                    $(LOCAL_PATH)/../../../libcaminiparser \
+                    af_dw9763.h
+
+
+LOCAL_SRC_FILES := af_dw9763.c
+
+ifeq (1, $(strip $(shell expr $(ANDROID_MAJOR_VER) \>= 8)))
+LOCAL_PROPRIETARY_MODULE := true
+endif
+
+INCLUDE_DIRS = $(addprefix -I , $(LOCAL_C_INCLUDES))
+
+TARGET = libvcm_dw9763.so
+
+LIBS = -lpthread -lcamcommon -lcamsensor -lcamxmlparser
+
+OBJS = $(notdir $(patsubst %.c,%.o,$(LOCAL_SRC_FILES)))
+
+SRCS =  $(LOCAL_SRC_FILES)
+
+
+all:$(OBJS)
+	$(CC) -shared -fPIC -o $(TARGET) $(OBJS)  $(LIBS)
+
+$(OBJS):$(SRCS)
+	$(CC) $(CFLAGS) $(INCLUDE_DIRS) -c $^
+
+install:
+	cp $(TARGET) $(INSTALL_MOD_PATH)/usr/lib
+
+clean:
+	rm -f *.o
+	rm -f $(TARGET)
diff --git a/sensor/af_drv/dw9763/af_dw9763.c b/sensor/af_drv/dw9763/af_dw9763.c
index 6881e51..169fa59 100755
--- a/sensor/af_drv/dw9763/af_dw9763.c
+++ b/sensor/af_drv/dw9763/af_dw9763.c
@@ -257,3 +257,8 @@ static int _dw9763_drv_set_mode(cmr_handle sns_af_drv_handle) {
 
     return ret_value;
 }
+
+void *vcm_driver_open_lib(void)
+{
+     return &dw9763_drv_entry;
+}
\ No newline at end of file
diff --git a/sensor/af_drv/dw9763/af_dw9763.h b/sensor/af_drv/dw9763/af_dw9763.h
index 2f468bb..d72465d 100755
--- a/sensor/af_drv/dw9763/af_dw9763.h
+++ b/sensor/af_drv/dw9763/af_dw9763.h
@@ -16,7 +16,7 @@
 #ifndef _DW9763_H_
 #define _DW9763_H_
 
-#include <utils/Log.h>
+//#include <utils/Log.h>
 #include "sns_af_drv.h"
 
 #define DW9763_VCM_SLAVE_ADDR (0x18 >> 1) // 0x18
diff --git a/sensor/af_drv/vcm_lib_cfg.mk b/sensor/af_drv/vcm_lib_cfg.mk
index eb24fa5..6910e19 100755
--- a/sensor/af_drv/vcm_lib_cfg.mk
+++ b/sensor/af_drv/vcm_lib_cfg.mk
@@ -5,6 +5,7 @@ PRODUCT_PACKAGES += libvcm_dw9714p \
                     libvcm_dw9800 \
                     libvcm_dw9825a \
                     libvcm_dw9714 \
+                    libvcm_dw9763 \
                     libvcm_dw9718s \
                     libvcm_dw9781b \
                     libvcm_zc524 \
diff --git a/sensor/sensor_drv/classic/OmniVision/ov13855/sensor_ov13855_mipi_raw.h b/sensor/sensor_drv/classic/OmniVision/ov13855/sensor_ov13855_mipi_raw.h
index 1695131..f283f8d 100755
--- a/sensor/sensor_drv/classic/OmniVision/ov13855/sensor_ov13855_mipi_raw.h
+++ b/sensor/sensor_drv/classic/OmniVision/ov13855/sensor_ov13855_mipi_raw.h
@@ -21,7 +21,7 @@
 #include "sensor_raw.h"
 
 #define SENSOR_NAME "ov13855_mipi_raw"
-#if defined(CONFIG_DUAL_MODULE)
+#if 0 //defined(CONFIG_DUAL_MODULE)
 #define I2C_SLAVE_ADDR 0x20 /* 16bit slave address*/
 #else
 #define I2C_SLAVE_ADDR 0x6c /* 16bit slave address*/
diff --git a/sensor/sensor_drv/classic/OmniVision/ov13855_dual/Makefile b/sensor/sensor_drv/classic/OmniVision/ov13855_dual/Makefile
new file mode 100755
index 0000000..29e518f
--- /dev/null
+++ b/sensor/sensor_drv/classic/OmniVision/ov13855_dual/Makefile
@@ -0,0 +1,72 @@
+#
+# SPDX-FileCopyrightText: 2020-2022 Unisoc (Shanghai) Technologies Co., Ltd
+# SPDX-License-Identifier: LicenseRef-Unisoc-General-1.0
+#
+# Copyright 2022-2022 Unisoc (Shanghai) Technologies Co., Ltd.
+# Licensed under the Unisoc General Software License, version 1.0 (the License);
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+# https://www.unisoc.com/en_us/license/UNISOC_GENERAL_LICENSE_V1.0-EN_US
+# Software distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OF ANY KIND, either express or implied.
+# See the Unisoc General Software License, version 1.0 for more details.
+#
+CFLAGS = -Wall -g -O -fPIC 
+
+LOCAL_C_INCLUDES :=
+LOCAL_SRC_DIR :=
+LOCAL_SRC_FILES :=
+LOCAL_CFLAGS :=
+
+LOCAL_PATH := $(shell pwd)
+
+PARAM_NAME := $(notdir $(LOCAL_PATH))
+
+include $(LOCAL_PATH)/../../../../../devices/$(BOARD)/BoardConfig.mk
+include $(LOCAL_PATH)/../../../../../camera.mk
+include $(LOCAL_PATH)/../../../../../SprdCtrl.mk
+
+LOCAL_C_INCLUDES := $(LOCAL_PATH)/../../../../inc \
+                    $(LOCAL_PATH)/../../../../../$(OEM_DIR)/inc \
+                    $(LOCAL_PATH)/../../../../../common/inc \
+                    $(LOCAL_PATH)/../../../../../$(ISPDRV_DIR)/isp_tune \
+                    $(LOCAL_PATH)/../../../../../$(ISPALG_DIR)/common/inc \
+                    $(LOCAL_PATH)/../../../../../$(ISPDRV_DIR)/middleware/inc \
+                    $(LOCAL_PATH)/../../../../../$(ISPDRV_DIR)/driver/inc \
+                    $(LOCAL_PATH)/../../../../../KIface \
+                    $(LOCAL_PATH)/../../../../../KIface/interface \
+                    $(LOCAL_PATH)/../../../../../utils/camxmlparser/inc/libxml2 \
+                    $(LOCAL_PATH)/../../../../../libcaminiparser \
+                    sensor_ov13855_dual_mipi_raw.h
+
+
+LOCAL_SRC_FILES := sensor_ov13855_dual_mipi_raw.c
+
+ifeq (1, $(strip $(shell expr $(ANDROID_MAJOR_VER) \>= 8)))
+LOCAL_PROPRIETARY_MODULE := true
+endif
+
+INCLUDE_DIRS = $(addprefix -I , $(LOCAL_C_INCLUDES))
+
+OBJS = $(notdir $(patsubst %.c,%.o,$(LOCAL_SRC_FILES)))
+
+LIBS = -lpthread -lcamcommon -lcamsensor -lcamxmlparser
+
+SRCS =  $(LOCAL_SRC_FILES)
+
+TARGET := libsensor_$(PARAM_NAME).so
+
+CFLAGS += $(LOCAL_CFLAGS)
+
+all:$(OBJS)
+	$(CC) -shared -fPIC -o $(TARGET) $(OBJS)  $(LIBS)
+
+$(OBJS):$(SRCS)
+	$(CC) $(CFLAGS) $(INCLUDE_DIRS) -c $^
+
+install:
+	cp $(TARGET) $(INSTALL_MOD_PATH)/usr/lib
+
+clean:
+	rm -f *.o
+	rm -f $(TARGET)
diff --git a/sensor/sensor_drv/classic/OmniVision/ov13855_dual/sensor_ov13855_dual_mipi_raw.c b/sensor/sensor_drv/classic/OmniVision/ov13855_dual/sensor_ov13855_dual_mipi_raw.c
new file mode 100755
index 0000000..ee62a4c
--- /dev/null
+++ b/sensor/sensor_drv/classic/OmniVision/ov13855_dual/sensor_ov13855_dual_mipi_raw.c
@@ -0,0 +1,1057 @@
+/*
+ * Copyright (C) 2012 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * V6.0
+ */
+/*History
+*Date                  Modification                                 Reason
+*
+*/
+
+#define LOG_TAG "ov13855_dual_mipi_raw"
+#include "sensor_ov13855_dual_mipi_raw.h"
+
+#define FPS_INFO s_ov13855_dual_mode_fps_info
+#define STATIC_INFO s_ov13855_dual_static_info
+#define VIDEO_INFO s_ov13855_dual_video_info
+#define MODULE_INFO s_ov13855_dual_module_info_tab
+#define RES_TAB_RAW s_ov13855_dual_resolution_tab_raw
+#define RES_TRIM_TAB s_ov13855_dual_resolution_trim_tab
+#define RES_TAB_RAW_NEW s_ov13855_dual_resolution_tab_raw_new
+#define RES_TRIM_TAB_NEW s_ov13855_dual_resolution_trim_tab_new
+
+#define MIPI_RAW_INFO g_ov13855_dual_mipi_raw_info
+
+/*==============================================================================
+ * Description:
+ * write group-hold on to sensor registers
+ * please modify this function acording your spec
+ *============================================================================*/
+static void ov13855_dual_drv_group_hold_on(cmr_handle handle) { SENSOR_LOGI("E"); }
+
+/*==============================================================================
+ * Description:
+ * write group-hold off to sensor registers
+ * please modify this function acording your spec
+ *============================================================================*/
+static void ov13855_dual_drv_group_hold_off(cmr_handle handle) { SENSOR_LOGI("E"); }
+
+/*==============================================================================
+ * Description:
+ * write gain to sensor registers
+ * please modify this function acording your spec
+ *============================================================================*/
+static void ov13855_dual_drv_write_gain(cmr_handle handle, float gain) {
+    float gain_a = gain;
+    float gain_d = 0x400; // spec p70, X1 = 15bit
+    SENSOR_IC_CHECK_HANDLE_VOID(handle);
+    struct sensor_ic_drv_cxt *sns_drv_cxt = (struct sensor_ic_drv_cxt *)handle;
+
+    if (SENSOR_MAX_GAIN < (cmr_u16)gain_a) {
+        gain_a = SENSOR_MAX_GAIN;
+        gain_d = gain * 0x400 / gain_a;
+        if ((cmr_u16)gain_d > 0x4 * 0x400 - 1)
+            gain_d = 0x4 * 0x400 - 1;
+    }
+    // hw_sensor_write_reg(sns_drv_cxt->hw_handle, 0x320a, 0x01);
+    // group 1:all other registers( gain)
+    hw_sensor_write_reg(sns_drv_cxt->hw_handle, 0x3208, 0x01);
+    hw_sensor_write_reg(sns_drv_cxt->hw_handle, 0x3508,
+                        ((cmr_u16)gain_a >> 8) & 0x1f);
+    hw_sensor_write_reg(sns_drv_cxt->hw_handle, 0x3509, (cmr_u16)gain_a & 0xff);
+
+#if defined(OV13855_DGAIN_SUPPORT)
+    hw_sensor_write_reg(sns_drv_cxt->hw_handle, 0x5100,
+                        ((cmr_u16)gain_d >> 8) & 0x7f);
+    hw_sensor_write_reg(sns_drv_cxt->hw_handle, 0x5101, (cmr_u16)gain_d & 0xff);
+    hw_sensor_write_reg(sns_drv_cxt->hw_handle, 0x5102,
+                        ((cmr_u16)gain_d >> 8) & 0x7f);
+    hw_sensor_write_reg(sns_drv_cxt->hw_handle, 0x5103, (cmr_u16)gain_d & 0xff);
+    hw_sensor_write_reg(sns_drv_cxt->hw_handle, 0x5104,
+                        ((cmr_u16)gain_d >> 8) & 0x7f);
+    hw_sensor_write_reg(sns_drv_cxt->hw_handle, 0x5105, (cmr_u16)gain_d & 0xff);
+#endif
+
+    hw_sensor_write_reg(sns_drv_cxt->hw_handle, 0x3208, 0x11);
+    hw_sensor_write_reg(sns_drv_cxt->hw_handle, 0x3208, 0xA1);
+}
+
+/*==============================================================================
+ * Description:
+ * read frame length from sensor registers
+ * please modify this function acording your spec
+ *============================================================================*/
+static cmr_u16 ov13855_dual_drv_read_frame_length(cmr_handle handle) {
+    cmr_u32 frame_len;
+    SENSOR_IC_CHECK_HANDLE(handle);
+    struct sensor_ic_drv_cxt *sns_drv_cxt = (struct sensor_ic_drv_cxt *)handle;
+
+    frame_len = hw_sensor_read_reg(sns_drv_cxt->hw_handle, 0x380e) & 0xff;
+    frame_len = frame_len << 8 |
+                (hw_sensor_read_reg(sns_drv_cxt->hw_handle, 0x380f) & 0xff);
+    sns_drv_cxt->sensor_ev_info.preview_framelength = frame_len;
+
+    return frame_len;
+}
+
+/*==============================================================================
+ * Description:
+ * write frame length to sensor registers
+ * please modify this function acording your spec
+ *============================================================================*/
+static void ov13855_dual_drv_write_frame_length(cmr_handle handle,
+                                           cmr_u32 frame_len) {
+    SENSOR_IC_CHECK_HANDLE_VOID(handle);
+    struct sensor_ic_drv_cxt *sns_drv_cxt = (struct sensor_ic_drv_cxt *)handle;
+    hw_sensor_write_reg(sns_drv_cxt->hw_handle, 0x380e,
+                        (frame_len >> 8) & 0xff);
+    hw_sensor_write_reg(sns_drv_cxt->hw_handle, 0x380f, frame_len & 0xff);
+    sns_drv_cxt->sensor_ev_info.preview_framelength = frame_len;
+}
+
+/*==============================================================================
+ * Description:
+ * read shutter from sensor registers
+ * please modify this function acording your spec
+ *============================================================================*/
+static cmr_u32 ov13855_dual_drv_read_shutter(cmr_handle handle) {
+    cmr_u32 value = 0x00;
+    cmr_u8 shutter_l = 0x00;
+    cmr_u8 shutter_m = 0x00;
+    cmr_u8 shutter_h = 0x00;
+    SENSOR_IC_CHECK_HANDLE(handle);
+    struct sensor_ic_drv_cxt *sns_drv_cxt = (struct sensor_ic_drv_cxt *)handle;
+
+    shutter_l = hw_sensor_read_reg(sns_drv_cxt->hw_handle, 0x3502);
+    // value=(shutter>>0x04)&0x0f;
+    shutter_m = hw_sensor_read_reg(sns_drv_cxt->hw_handle, 0x3501);
+    // value+=(shutter&0xff)<<0x04;
+    shutter_h = hw_sensor_read_reg(sns_drv_cxt->hw_handle, 0x3500);
+    // value+=(shutter&0x0f)<<0x0c;
+    value = ((shutter_h & 0x0f) << 12) + (shutter_m << 4) +
+            ((shutter_l >> 4) & 0x0f);
+    sns_drv_cxt->sensor_ev_info.preview_shutter = value;
+
+    return value;
+}
+
+/*==============================================================================
+ * Description:
+ * write shutter to sensor registers
+ * please pay attention to the frame length
+ * please modify this function acording your spec
+ *============================================================================*/
+static void ov13855_dual_drv_write_shutter(cmr_handle handle, cmr_u32 shutter) {
+    cmr_u16 value = 0x00;
+    SENSOR_IC_CHECK_HANDLE_VOID(handle);
+    struct sensor_ic_drv_cxt *sns_drv_cxt = (struct sensor_ic_drv_cxt *)handle;
+
+    value = (shutter << 0x04) & 0xff;
+    hw_sensor_write_reg(sns_drv_cxt->hw_handle, 0x3502, value);
+    value = (shutter >> 0x04) & 0xff;
+    hw_sensor_write_reg(sns_drv_cxt->hw_handle, 0x3501, value);
+    value = (shutter >> 0x0c) & 0x0f;
+    hw_sensor_write_reg(sns_drv_cxt->hw_handle, 0x3500, value);
+    sns_drv_cxt->sensor_ev_info.preview_shutter = shutter;
+}
+
+/*==============================================================================
+ * Description:
+ * write exposure to sensor registers and get current shutter
+ * please pay attention to the frame length
+ * please don't change this function if it's necessary
+ *============================================================================*/
+static cmr_int ov13855_dual_drv_write_exposure_dummy(cmr_handle handle,
+                                                cmr_u32 shutter,
+                                                cmr_u32 dummy_line,
+                                                cmr_u16 size_index) {
+    cmr_u32 dest_fr_len = 0;
+    cmr_u32 cur_fr_len = 0;
+    cmr_u32 fr_len = 0;
+    SENSOR_IC_CHECK_HANDLE(handle);
+    struct sensor_ic_drv_cxt *sns_drv_cxt = (struct sensor_ic_drv_cxt *)handle;
+    fr_len = sns_drv_cxt->frame_length_def;
+    // ov13855_dual_group_hold_on(handle);
+
+    dummy_line = dummy_line > FRAME_OFFSET ? dummy_line : FRAME_OFFSET;
+    dest_fr_len =
+        ((shutter + dummy_line) > fr_len) ? (shutter + dummy_line) : fr_len;
+    sns_drv_cxt->frame_length = dest_fr_len;
+
+    cur_fr_len = ov13855_dual_drv_read_frame_length(handle);
+
+    if (shutter < SENSOR_MIN_SHUTTER)
+        shutter = SENSOR_MIN_SHUTTER;
+
+    if (dest_fr_len != cur_fr_len)
+        ov13855_dual_drv_write_frame_length(handle, dest_fr_len);
+write_sensor_shutter:
+    /* write shutter to sensor registers */
+    sns_drv_cxt->sensor_ev_info.preview_shutter = shutter;
+
+    ov13855_dual_drv_write_shutter(handle, shutter);
+
+    if (sns_drv_cxt->ops_cb.set_exif_info) {
+        sns_drv_cxt->ops_cb.set_exif_info(
+            sns_drv_cxt->caller_handle, SENSOR_EXIF_CTRL_EXPOSURETIME, shutter);
+    }
+
+    return SENSOR_SUCCESS;
+}
+
+/*==============================================================================
+ * Description:
+ * sensor power on
+ * please modify this function acording your spec
+ *============================================================================*/
+static cmr_int ov13855_dual_drv_power_on(cmr_handle handle, cmr_uint power_on) {
+    SENSOR_IC_CHECK_HANDLE(handle);
+    struct sensor_ic_drv_cxt *sns_drv_cxt = (struct sensor_ic_drv_cxt *)handle;
+    struct module_cfg_info *module_info = sns_drv_cxt->module_info;
+
+    SENSOR_AVDD_VAL_E dvdd_val = module_info->dvdd_val;
+    SENSOR_AVDD_VAL_E avdd_val = module_info->avdd_val;
+    SENSOR_AVDD_VAL_E iovdd_val = module_info->iovdd_val;
+    BOOLEAN power_down = MIPI_RAW_INFO.power_down_level;
+    BOOLEAN reset_level = MIPI_RAW_INFO.reset_pulse_level;
+
+    if (SENSOR_TRUE == power_on) {
+        hw_sensor_power_down(sns_drv_cxt->hw_handle, power_down);
+        hw_sensor_set_reset_level(sns_drv_cxt->hw_handle, reset_level);
+        hw_sensor_set_mclk(sns_drv_cxt->hw_handle, SENSOR_DISABLE_MCLK);
+        hw_sensor_set_avdd_val(sns_drv_cxt->hw_handle, SENSOR_AVDD_CLOSED);
+        hw_sensor_set_dvdd_val(sns_drv_cxt->hw_handle, SENSOR_AVDD_CLOSED);
+        hw_sensor_set_iovdd_val(sns_drv_cxt->hw_handle, SENSOR_AVDD_CLOSED);
+
+        usleep(1 * 1000);
+        hw_sensor_set_avdd_val(sns_drv_cxt->hw_handle, avdd_val);
+        hw_sensor_set_dvdd_val(sns_drv_cxt->hw_handle, dvdd_val);
+        hw_sensor_set_iovdd_val(sns_drv_cxt->hw_handle, iovdd_val);
+
+        usleep(20 * 1000);
+        hw_sensor_power_down(sns_drv_cxt->hw_handle, !power_down);
+        hw_sensor_set_reset_level(sns_drv_cxt->hw_handle, !reset_level);
+        usleep(6 * 1000);
+        hw_sensor_set_mclk(sns_drv_cxt->hw_handle, EX_MCLK);
+        usleep(500);
+
+        sns_drv_cxt->current_state_machine = SENSOR_STATE_POWER_ON;
+
+    } else {
+        hw_sensor_set_mclk(sns_drv_cxt->hw_handle, SENSOR_DISABLE_MCLK);
+        usleep(500);
+        hw_sensor_set_reset_level(sns_drv_cxt->hw_handle, reset_level);
+        usleep(200);
+        hw_sensor_set_avdd_val(sns_drv_cxt->hw_handle, SENSOR_AVDD_CLOSED);
+        hw_sensor_set_dvdd_val(sns_drv_cxt->hw_handle, SENSOR_AVDD_CLOSED);
+        hw_sensor_set_iovdd_val(sns_drv_cxt->hw_handle, SENSOR_AVDD_CLOSED);
+
+        sns_drv_cxt->current_state_machine = SENSOR_STATE_POWER_OFF;
+    }
+    SENSOR_LOGI("(1:on, 0:off): %ld", power_on);
+    return SENSOR_SUCCESS;
+}
+
+/*==============================================================================
+ * Description:
+ * calculate fps for every sensor mode according to frame_line and line_time
+ * please modify this function acording your spec
+ *============================================================================*/
+static cmr_int ov13855_dual_drv_init_fps_info(cmr_handle handle) {
+    cmr_int rtn = SENSOR_SUCCESS;
+    SENSOR_IC_CHECK_HANDLE(handle);
+    struct sensor_ic_drv_cxt *sns_drv_cxt = (struct sensor_ic_drv_cxt *)handle;
+
+    struct sensor_fps_info *fps_info = sns_drv_cxt->fps_info;
+    struct sensor_trim_tag *trim_info = sns_drv_cxt->trim_tab_info;
+    struct sensor_static_info *static_info = sns_drv_cxt->static_info;
+
+    SENSOR_LOGI("E");
+    if (!fps_info->is_init) {
+        cmr_u32 i, modn, tempfps = 0;
+        SENSOR_LOGI("start init");
+        for (i = 0; i < SENSOR_MODE_MAX; i++) {
+            // max fps should be multiple of 30,it calulated from line_time and
+            // frame_line
+            tempfps = trim_info[i].line_time * trim_info[i].frame_line;
+            if (0 != tempfps) {
+                tempfps = 1000000000 / tempfps;
+                modn = tempfps / 30;
+                if (tempfps > modn * 30)
+                    modn++;
+                fps_info->sensor_mode_fps[i].max_fps = modn * 30;
+                if (fps_info->sensor_mode_fps[i].max_fps > 30) {
+                    fps_info->sensor_mode_fps[i].is_high_fps = 1;
+                    fps_info->sensor_mode_fps[i].high_fps_skip_num =
+                        fps_info->sensor_mode_fps[i].max_fps / 30;
+                }
+                if (fps_info->sensor_mode_fps[i].max_fps >
+                    static_info->max_fps) {
+                    static_info->max_fps = fps_info->sensor_mode_fps[i].max_fps;
+                }
+            }
+            SENSOR_LOGI("mode %d,tempfps %d,frame_len %d,line_time: %d ", i,
+                        tempfps, trim_info[i].frame_line,
+                        trim_info[i].line_time);
+            SENSOR_LOGI("mode %d,max_fps: %d ", i,
+                        fps_info->sensor_mode_fps[i].max_fps);
+            SENSOR_LOGI("is_high_fps: %d,highfps_skip_num %d",
+                        fps_info->sensor_mode_fps[i].is_high_fps,
+                        fps_info->sensor_mode_fps[i].high_fps_skip_num);
+        }
+        fps_info->is_init = 1;
+    }
+    SENSOR_LOGI("X");
+    return rtn;
+}
+
+static cmr_int ov13855_dual_drv_get_static_info(cmr_handle handle, cmr_u32 *param) {
+    cmr_int rtn = SENSOR_SUCCESS;
+    struct sensor_ex_info *ex_info = (struct sensor_ex_info *)param;
+    cmr_u32 up = 0;
+    cmr_u32 down = 0;
+    SENSOR_IC_CHECK_HANDLE(handle);
+    SENSOR_IC_CHECK_PTR(ex_info);
+    SENSOR_IC_CHECK_PTR(param);
+    struct sensor_ic_drv_cxt *sns_drv_cxt = (struct sensor_ic_drv_cxt *)handle;
+
+    struct sensor_fps_info *fps_info = sns_drv_cxt->fps_info;
+    struct sensor_static_info *static_info = sns_drv_cxt->static_info;
+    struct module_cfg_info *module_info = sns_drv_cxt->module_info;
+
+    // make sure we have get max fps of all settings.
+    if (!fps_info->is_init) {
+        ov13855_dual_drv_init_fps_info(handle);
+    }
+    ex_info->f_num = static_info->f_num;
+    ex_info->focal_length = static_info->focal_length;
+    ex_info->max_fps = static_info->max_fps;
+    ex_info->max_adgain = static_info->max_adgain;
+    ex_info->ois_supported = static_info->ois_supported;
+    ex_info->pdaf_supported = static_info->pdaf_supported;
+    ex_info->exp_valid_frame_num = static_info->exp_valid_frame_num;
+    ex_info->clamp_level = static_info->clamp_level;
+    ex_info->adgain_valid_frame_num = static_info->adgain_valid_frame_num;
+    ex_info->preview_skip_num = module_info->preview_skip_num;
+    ex_info->capture_skip_num = module_info->capture_skip_num;
+    ex_info->name = (cmr_s8 *)MIPI_RAW_INFO.name;
+    ex_info->sensor_version_info = (cmr_s8 *)MIPI_RAW_INFO.sensor_version_info;
+
+    memcpy(&ex_info->fov_info, &static_info->fov_info,
+           sizeof(static_info->fov_info));
+
+    ex_info->pos_dis.up2hori = up;
+    ex_info->pos_dis.hori2down = down;
+    sensor_ic_print_static_info((cmr_s8 *)SENSOR_NAME, ex_info);
+
+    return rtn;
+}
+
+static cmr_int ov13855_dual_drv_get_fps_info(cmr_handle handle, cmr_u32 *param) {
+    cmr_int rtn = SENSOR_SUCCESS;
+    SENSOR_MODE_FPS_T *fps_info = (SENSOR_MODE_FPS_T *)param;
+    SENSOR_IC_CHECK_HANDLE(handle);
+    SENSOR_IC_CHECK_PTR(fps_info);
+    SENSOR_IC_CHECK_PTR(param);
+    struct sensor_ic_drv_cxt *sns_drv_cxt = (struct sensor_ic_drv_cxt *)handle;
+    struct sensor_fps_info *fps_data = sns_drv_cxt->fps_info;
+
+    // make sure have inited fps of every sensor mode.
+    if (!fps_data->is_init) {
+        ov13855_dual_drv_init_fps_info(handle);
+    }
+    cmr_u32 sensor_mode = fps_info->mode;
+    fps_info->max_fps = fps_data->sensor_mode_fps[sensor_mode].max_fps;
+    fps_info->min_fps = fps_data->sensor_mode_fps[sensor_mode].min_fps;
+    fps_info->is_high_fps = fps_data->sensor_mode_fps[sensor_mode].is_high_fps;
+    fps_info->high_fps_skip_num =
+        fps_data->sensor_mode_fps[sensor_mode].high_fps_skip_num;
+    SENSOR_LOGI("mode %d, max_fps: %d", fps_info->mode, fps_info->max_fps);
+    SENSOR_LOGI("min_fps: %d", fps_info->min_fps);
+    SENSOR_LOGI("is_high_fps: %d", fps_info->is_high_fps);
+    SENSOR_LOGI("high_fps_skip_num: %d", fps_info->high_fps_skip_num);
+
+    return rtn;
+}
+/*block size 16x16 normal pos(x,y) mirror(16-x,y) flip(x,16-y)
+ * mirror&&flip(16-x, 16-y)*/
+
+#if defined(CONFIG_DUAL_MODULE)
+// static int  mirror_diasble_factor = -1; //enable: -1  diable: 1
+// static int  flip_disable_factor = -1; //enable: -1  diable: 1
+
+static const cmr_u16 ov13855_dual_pd_is_right[] = {0, 1, 1, 0};
+static const cmr_u16 ov13855_dual_pd_row[] = {2, 6, 10, 14}; //{14, 10, 6, 2};//y
+
+static const cmr_u16 ov13855_dual_pd_col[] = {10, 10, 2, 2}; //{2, 2, 10, 10};//x
+static const struct pd_pos_info _ov13855_dual_pd_pos_r[] = {
+    {10, 6}, {2, 10},
+};
+
+static const struct pd_pos_info _ov13855_dual_pd_pos_l[] = {
+    {10, 2}, {2, 14},
+};
+
+#else
+// static int  mirror_diasble_factor = 1; //enable: -1  diable: 1
+// static int  flip_disable_factor = 1; //enable:-1  diable: 1
+
+static const cmr_u16 ov13855_dual_pd_is_right[] = {1, 0, 0, 1};
+
+static const cmr_u16 ov13855_dual_pd_row[] = {2, 6, 10, 14};
+
+static const cmr_u16 ov13855_dual_pd_col[] = {14, 14, 6, 6};
+static const struct pd_pos_info _ov13855_dual_pd_pos_l[] = {
+    {14, 6}, {6, 10},
+};
+
+static const struct pd_pos_info _ov13855_dual_pd_pos_r[] = {
+    {14, 2}, {6, 14},
+};
+#endif
+static cmr_int ov13855_dual_drv_get_pdaf_info(cmr_handle handle, cmr_u32 *param) {
+    cmr_int rtn = SENSOR_SUCCESS;
+    struct sensor_pdaf_info *pdaf_info = NULL;
+    cmr_u16 i = 0;
+    cmr_u16 pd_pos_row_size = 0;
+    cmr_u16 pd_pos_col_size = 0;
+    cmr_u16 pd_pos_is_right_size = 0;
+    SENSOR_IC_CHECK_PTR(param);
+
+    pdaf_info = (struct sensor_pdaf_info *)param;
+    pd_pos_is_right_size = NUMBER_OF_ARRAY(ov13855_dual_pd_is_right);
+    pd_pos_row_size = NUMBER_OF_ARRAY(ov13855_dual_pd_row);
+    pd_pos_col_size = NUMBER_OF_ARRAY(ov13855_dual_pd_col);
+    if ((pd_pos_row_size != pd_pos_col_size) ||
+        (pd_pos_row_size != pd_pos_is_right_size) ||
+        (pd_pos_is_right_size != pd_pos_col_size)) {
+        SENSOR_LOGE("pd_pos_row size and pd_pos_is_right size are not match");
+        return -1;
+    }
+
+    pdaf_info->pd_offset_x = 0;
+    pdaf_info->pd_offset_y = 0;
+    pdaf_info->pd_end_x = 4224;
+    pdaf_info->pd_end_y = 3136;
+    pdaf_info->pd_block_w = 1;
+    pdaf_info->pd_block_h = 1;
+    pdaf_info->pd_block_num_x = 264;
+    pdaf_info->pd_block_num_y = 196;
+    pdaf_info->pd_is_right = (cmr_u16 *)ov13855_dual_pd_is_right;
+    pdaf_info->pd_pos_row = (cmr_u16 *)ov13855_dual_pd_row;
+    pdaf_info->pd_pos_col = (cmr_u16 *)ov13855_dual_pd_col;
+
+    cmr_u16 pd_pos_r_size = NUMBER_OF_ARRAY(_ov13855_dual_pd_pos_r);
+    cmr_u16 pd_pos_l_size = NUMBER_OF_ARRAY(_ov13855_dual_pd_pos_l);
+
+    if (pd_pos_r_size != pd_pos_l_size) {
+        SENSOR_LOGE("pd_pos_r size not match pd_pos_l");
+        return -1;
+    }
+    pdaf_info->pd_pitch_x = 16;
+    pdaf_info->pd_pitch_y = 16;
+    pdaf_info->pd_density_x = 16;
+    pdaf_info->pd_density_y = 8;
+    pdaf_info->pd_block_num_x = 264;
+    pdaf_info->pd_block_num_y = 196;
+    pdaf_info->pd_pos_size = pd_pos_r_size;
+    pdaf_info->pd_pos_r = (struct pd_pos_info *)_ov13855_dual_pd_pos_r;
+    pdaf_info->pd_pos_l = (struct pd_pos_info *)_ov13855_dual_pd_pos_l;
+    pdaf_info->vendor_type = SENSOR_VENDOR_OV13855;
+
+#ifdef CONFIG_DUAL_MODULE
+    pdaf_info->sns_orientation = 1; /*mirror+flip*/
+#else
+    pdaf_info->sns_orientation = 0; /*Normal*/
+#endif
+
+    return rtn;
+}
+
+/*==============================================================================
+ * Description:
+ * cfg otp setting
+ * please modify this function acording your spec
+ *============================================================================*/
+static cmr_int ov13855_dual_drv_access_val(cmr_handle handle, cmr_uint param) {
+    cmr_int ret = SENSOR_SUCCESS;
+    SENSOR_VAL_T *param_ptr = (SENSOR_VAL_T *)param;
+    SENSOR_IC_CHECK_HANDLE(handle);
+    SENSOR_IC_CHECK_PTR(param_ptr);
+    struct sensor_ic_drv_cxt *sns_drv_cxt = (struct sensor_ic_drv_cxt *)handle;
+
+    SENSOR_LOGI("param_ptr->type=%x", param_ptr->type);
+    switch (param_ptr->type) {
+    case SENSOR_VAL_TYPE_GET_STATIC_INFO:
+        ret = ov13855_dual_drv_get_static_info(handle, param_ptr->pval);
+        break;
+    case SENSOR_VAL_TYPE_GET_FPS_INFO:
+        ret = ov13855_dual_drv_get_fps_info(handle, param_ptr->pval);
+        break;
+    case SENSOR_VAL_TYPE_SET_SENSOR_CLOSE_FLAG:
+        ret = sns_drv_cxt->is_sensor_close = 1;
+        break;
+    case SENSOR_VAL_TYPE_GET_PDAF_INFO:
+        ret = ov13855_dual_drv_get_pdaf_info(handle, param_ptr->pval);
+        break;
+    default:
+        break;
+    }
+
+    return ret;
+}
+
+/*==============================================================================
+ * Description:
+ * identify sensor id
+ * please modify this function acording your spec
+ *============================================================================*/
+static cmr_int ov13855_dual_drv_identify(cmr_handle handle, cmr_uint param) {
+    cmr_u16 pid_value = 0x00;
+    cmr_u16 ver_value = 0x00;
+    cmr_int ret_value = SENSOR_FAIL;
+    SENSOR_IC_CHECK_HANDLE(handle);
+    struct sensor_ic_drv_cxt *sns_drv_cxt = (struct sensor_ic_drv_cxt *)handle;
+
+    SENSOR_LOGI("mipi raw identify");
+
+    pid_value = hw_sensor_read_reg(sns_drv_cxt->hw_handle, ov13855_dual_PID_ADDR);
+
+    if (ov13855_dual_PID_VALUE == pid_value) {
+        ver_value =
+            hw_sensor_read_reg(sns_drv_cxt->hw_handle, ov13855_dual_VER_ADDR);
+        SENSOR_LOGI("Identify: PID = %x, VER = %x", pid_value, ver_value);
+        if (ov13855_dual_VER_VALUE == ver_value) {
+            SENSOR_LOGI("this is ov13855_dual sensor");
+            //            ov13855_dual_drv_init_fps_info(handle);
+            ret_value = SENSOR_SUCCESS;
+        } else {
+            SENSOR_LOGI("Identify this is %x%x sensor", pid_value, ver_value);
+        }
+    } else {
+        SENSOR_LOGE("sensor identify fail, pid_value = %x", pid_value);
+    }
+
+    return ret_value;
+}
+
+/*==============================================================================
+ * Description:
+ * before snapshot
+ * you can change this function if it's necessary
+ *============================================================================*/
+static cmr_int ov13855_dual_drv_before_snapshot(cmr_handle handle, cmr_uint param) {
+    cmr_u32 cap_shutter = 0;
+    cmr_u32 prv_shutter = 0;
+    cmr_u32 gain = 0;
+    cmr_u32 cap_gain = 0;
+    cmr_u32 capture_mode = param & 0xffff;
+    cmr_u32 preview_mode = (param >> 0x10) & 0xffff;
+
+    SENSOR_IC_CHECK_HANDLE(handle);
+    struct sensor_ic_drv_cxt *sns_drv_cxt = (struct sensor_ic_drv_cxt *)handle;
+    cmr_u32 prv_linetime = sns_drv_cxt->trim_tab_info[preview_mode].line_time;
+    cmr_u32 cap_linetime = sns_drv_cxt->trim_tab_info[capture_mode].line_time;
+
+    sns_drv_cxt->frame_length_def =
+        sns_drv_cxt->trim_tab_info[capture_mode].frame_line;
+
+    SENSOR_LOGI("capture_mode = %d", capture_mode);
+    if (sns_drv_cxt->ops_cb.set_mode)
+        sns_drv_cxt->ops_cb.set_mode(sns_drv_cxt->caller_handle, capture_mode);
+    if (sns_drv_cxt->ops_cb.set_mode_wait_done)
+        sns_drv_cxt->ops_cb.set_mode_wait_done(sns_drv_cxt->caller_handle);
+
+    if (preview_mode == capture_mode) {
+        cap_shutter = sns_drv_cxt->sensor_ev_info.preview_shutter;
+        cap_gain = sns_drv_cxt->sensor_ev_info.preview_gain;
+        goto snapshot_info;
+    }
+
+    prv_shutter = sns_drv_cxt->sensor_ev_info.preview_shutter;
+    gain = sns_drv_cxt->sensor_ev_info.preview_gain;
+    cap_shutter = prv_shutter * prv_linetime / cap_linetime;
+
+    cap_shutter = ov13855_dual_drv_write_exposure_dummy(handle, cap_shutter, 0, 0);
+    cap_gain = gain;
+    ov13855_dual_drv_write_gain(handle, cap_gain);
+    SENSOR_LOGI("preview_shutter = 0x%x, preview_gain = %f",
+                sns_drv_cxt->sensor_ev_info.preview_shutter,
+                sns_drv_cxt->sensor_ev_info.preview_gain);
+
+    SENSOR_LOGI("capture_shutter = 0x%x, capture_gain = 0x%x", cap_shutter,
+                cap_gain);
+snapshot_info:
+
+    if (sns_drv_cxt->ops_cb.set_exif_info) {
+        sns_drv_cxt->ops_cb.set_exif_info(sns_drv_cxt->caller_handle,
+                                          SENSOR_EXIF_CTRL_EXPOSURETIME,
+                                          cap_shutter);
+    } else {
+        sns_drv_cxt->exif_info.exposure_line = cap_shutter;
+    }
+    return SENSOR_SUCCESS;
+}
+
+/*==============================================================================
+ * Description:
+ * get the shutter from isp
+ * please don't change this function unless it's necessary
+ *============================================================================*/
+static cmr_int ov13855_dual_drv_write_exposure(cmr_handle handle, cmr_uint param) {
+    cmr_int ret_value = SENSOR_SUCCESS;
+    cmr_u16 exposure_line = 0x00;
+    cmr_u16 dummy_line = 0x00;
+    cmr_u16 size_index = 0x00;
+    cmr_u16 frame_interval = 0x00;
+    struct sensor_ex_exposure *ex = (struct sensor_ex_exposure *)param;
+    SENSOR_IC_CHECK_HANDLE(handle);
+    SENSOR_IC_CHECK_HANDLE(ex);
+    struct sensor_ic_drv_cxt *sns_drv_cxt = (struct sensor_ic_drv_cxt *)handle;
+
+    exposure_line = ex->exposure;
+    dummy_line = ex->dummy;
+    size_index = ex->size_index;
+
+    frame_interval =
+        (cmr_u16)(((exposure_line + dummy_line) *
+                   (sns_drv_cxt->trim_tab_info[size_index].line_time)) /
+                  1000000);
+    SENSOR_LOGI(
+        "mode = %d, exposure_line = %d, dummy_line= %d, frame_interval= %d ms",
+        size_index, exposure_line, dummy_line, frame_interval);
+    sns_drv_cxt->frame_length_def =
+        sns_drv_cxt->trim_tab_info[size_index].frame_line;
+    sns_drv_cxt->line_time_def =
+        sns_drv_cxt->trim_tab_info[size_index].line_time;
+
+    ret_value = ov13855_dual_drv_write_exposure_dummy(handle, exposure_line,
+                                                 dummy_line, size_index);
+
+    return ret_value;
+}
+
+/*==============================================================================
+ * Description:
+ * get the parameter from isp to real gain
+ * you mustn't change the funcion !
+ *============================================================================*/
+static cmr_u32 isp_to_real_gain(cmr_handle handle, cmr_u32 param) {
+    cmr_u32 real_gain = 0;
+
+    real_gain = param;
+
+    return real_gain;
+}
+
+/*==============================================================================
+ * Description:
+ * write gain value to sensor
+ * you can change this function if it's necessary
+ *============================================================================*/
+static cmr_int ov13855_dual_drv_write_gain_value(cmr_handle handle, cmr_uint param) {
+    cmr_int ret_value = SENSOR_SUCCESS;
+    float real_gain = 0;
+    SENSOR_IC_CHECK_HANDLE(handle);
+    struct sensor_ic_drv_cxt *sns_drv_cxt = (struct sensor_ic_drv_cxt *)handle;
+
+    // real_gain = isp_to_real_gain(handle,param);
+    // SENSOR_LOGI("param = %d", param);
+    param = param < ISP_BASE_GAIN ? ISP_BASE_GAIN : param;
+
+    real_gain = (float)1.0f * param * SENSOR_BASE_GAIN / ISP_BASE_GAIN;
+
+    SENSOR_LOGI("real_gain = %f", real_gain);
+
+    sns_drv_cxt->sensor_ev_info.preview_gain = real_gain;
+    ov13855_dual_drv_write_gain(handle, real_gain);
+
+    return ret_value;
+}
+
+static struct sensor_reg_tag ov13855_dual_shutter_reg[] = {
+    {0x3502, 0}, {0x3501, 0}, {0x3500, 0},
+};
+
+static struct sensor_i2c_reg_tab ov13855_dual_shutter_tab = {
+    .settings = ov13855_dual_shutter_reg, .size = ARRAY_SIZE(ov13855_dual_shutter_reg),
+};
+
+#if defined(OV13855_DGAIN_SUPPORT)
+static struct sensor_reg_tag ov13855_dual_again_reg[] = {
+    {0x3208, 0x01}, {0x3508, 0x00}, {0x3509, 0x00},
+};
+#else
+static struct sensor_reg_tag ov13855_dual_again_reg[] = {
+    {0x3208, 0x01}, {0x3508, 0x00}, {0x3509, 0x00},
+    {0x3208, 0x11}, {0x3208, 0xA1},
+};
+#endif
+
+static struct sensor_i2c_reg_tab ov13855_dual_again_tab = {
+    .settings = ov13855_dual_again_reg, .size = ARRAY_SIZE(ov13855_dual_again_reg),
+};
+
+#if defined(OV13855_DGAIN_SUPPORT)
+static struct sensor_reg_tag ov13855_dual_dgain_reg[] = {
+    {0x5100, 0}, {0x5101, 0}, {0x5102, 0},    {0x5103, 0},
+    {0x5104, 0}, {0x5105, 0}, {0x3208, 0x11}, {0x3208, 0xA1},
+};
+#else
+static struct sensor_reg_tag ov13855_dual_dgain_reg[] = {
+};
+#endif
+
+struct sensor_i2c_reg_tab ov13855_dual_dgain_tab = {
+    .settings = ov13855_dual_dgain_reg, .size = ARRAY_SIZE(ov13855_dual_dgain_reg),
+};
+
+static struct sensor_reg_tag ov13855_dual_frame_length_reg[] = {
+    {0x380e, 0}, {0x380f, 0},
+};
+
+static struct sensor_i2c_reg_tab ov13855_dual_frame_length_tab = {
+    .settings = ov13855_dual_frame_length_reg,
+    .size = ARRAY_SIZE(ov13855_dual_frame_length_reg),
+};
+
+static struct sensor_aec_i2c_tag ov13855_dual_aec_info = {
+    .slave_addr = (I2C_SLAVE_ADDR >> 1),
+    .addr_bits_type = SENSOR_I2C_REG_16BIT,
+    .data_bits_type = SENSOR_I2C_VAL_8BIT,
+    .shutter = &ov13855_dual_shutter_tab,
+    .again = &ov13855_dual_again_tab,
+    .dgain = &ov13855_dual_dgain_tab,
+    .frame_length = &ov13855_dual_frame_length_tab,
+};
+
+static cmr_u16 ov13855_dual_drv_calc_exposure(cmr_handle handle, cmr_u32 shutter,
+                                         cmr_u32 dummy_line, cmr_u16 mode,
+                                         struct sensor_aec_i2c_tag *aec_info) {
+    cmr_u32 dest_fr_len = 0;
+    cmr_u32 cur_fr_len = 0;
+    cmr_u32 fr_len = 0;
+    int32_t offset = 0;
+    cmr_u16 value = 0x00;
+    float fps = 0.0;
+    float line_time = 0.0;
+    SENSOR_IC_CHECK_HANDLE(handle);
+    struct sensor_ic_drv_cxt *sns_drv_cxt = (struct sensor_ic_drv_cxt *)handle;
+    fr_len = sns_drv_cxt->frame_length_def;
+
+    dummy_line = dummy_line > FRAME_OFFSET ? dummy_line : FRAME_OFFSET;
+    dest_fr_len =
+        ((shutter + dummy_line) > fr_len) ? (shutter + dummy_line) : fr_len;
+    sns_drv_cxt->frame_length = dest_fr_len;
+
+    cur_fr_len = ov13855_dual_drv_read_frame_length(handle);
+
+    if (shutter < SENSOR_MIN_SHUTTER)
+        shutter = SENSOR_MIN_SHUTTER;
+
+    line_time = sns_drv_cxt->trim_tab_info[mode].line_time;
+    if (cur_fr_len > shutter) {
+        fps = 1000000.0 / (cur_fr_len * line_time);
+    } else {
+        fps = 1000000.0 / ((shutter + dummy_line) * line_time);
+    }
+    SENSOR_LOGI("sync fps = %f", fps);
+    aec_info->frame_length->settings[0].reg_value = (dest_fr_len >> 8) & 0xff;
+    aec_info->frame_length->settings[1].reg_value = dest_fr_len & 0xff;
+    value = (shutter << 0x04) & 0xff;
+    aec_info->shutter->settings[0].reg_value = value;
+    value = (shutter >> 0x04) & 0xff;
+    aec_info->shutter->settings[1].reg_value = value;
+    value = (shutter >> 0x0c) & 0x0f;
+    aec_info->shutter->settings[2].reg_value = value;
+    return shutter;
+}
+
+static void ov13855_dual_drv_calc_gain(float gain,
+                                  struct sensor_aec_i2c_tag *aec_info) {
+    float gain_a = gain;
+    float gain_d = 0x400;
+
+    if (SENSOR_MAX_GAIN < (cmr_u16)gain_a) {
+
+        gain_a = SENSOR_MAX_GAIN;
+        gain_d = gain * 0x400 / gain_a;
+        if ((cmr_u16)gain_d > 0x4 * 0x400 - 1)
+            gain_d = 0x4 * 0x400 - 1;
+    }
+
+    if (aec_info->again->size) {
+        aec_info->again->settings[1].reg_value = ((cmr_u16)gain_a >> 8) & 0x1f;
+        aec_info->again->settings[2].reg_value = (cmr_u16)gain_a & 0xff;
+    }
+
+    if (aec_info->dgain->size) {
+        aec_info->dgain->settings[0].reg_value = ((cmr_u16)gain_d >> 8) & 0x7f;
+        aec_info->dgain->settings[1].reg_value = (cmr_u16)gain_d & 0xff;
+        aec_info->dgain->settings[2].reg_value = ((cmr_u16)gain_d >> 8) & 0x7f;
+        aec_info->dgain->settings[3].reg_value = (cmr_u16)gain_d & 0xff;
+        aec_info->dgain->settings[4].reg_value = ((cmr_u16)gain_d >> 8) & 0x7f;
+        aec_info->dgain->settings[5].reg_value = (cmr_u16)gain_d & 0xff;
+    }
+}
+
+static cmr_int ov13855_dual_drv_read_aec_info(cmr_handle handle, cmr_uint param) {
+    cmr_int ret_value = SENSOR_SUCCESS;
+    struct sensor_aec_reg_info *info = (struct sensor_aec_reg_info *)param;
+    cmr_u16 exposure_line = 0x00;
+    cmr_u16 dummy_line = 0x00;
+    cmr_u16 mode = 0x00;
+    float real_gain = 0;
+    cmr_u32 gain = 0;
+    cmr_u16 frame_interval = 0x00;
+    SENSOR_IC_CHECK_HANDLE(handle);
+    SENSOR_IC_CHECK_PTR(info);
+    struct sensor_ic_drv_cxt *sns_drv_cxt = (struct sensor_ic_drv_cxt *)handle;
+
+    info->aec_i2c_info_out = &ov13855_dual_aec_info;
+
+    exposure_line = info->exp.exposure;
+    dummy_line = info->exp.dummy;
+    mode = info->exp.size_index;
+
+    frame_interval = (cmr_u16)(((exposure_line + dummy_line) *
+                                (sns_drv_cxt->trim_tab_info[mode].line_time)) /
+                               1000000);
+    SENSOR_LOGI(
+        "mode = %d, exposure_line = %d, dummy_line= %d, frame_interval= %d ms",
+        mode, exposure_line, dummy_line, frame_interval);
+    sns_drv_cxt->frame_length_def = sns_drv_cxt->trim_tab_info[mode].frame_line;
+    //        ov13855_dual_drv_get_default_frame_length(handle, mode);
+    //    s_current_default_line_time =
+    //    s_ov13855_dual_resolution_trim_tab[mode].line_time;
+    sns_drv_cxt->line_time_def = sns_drv_cxt->trim_tab_info[mode].line_time;
+
+    sns_drv_cxt->sensor_ev_info.preview_shutter = ov13855_dual_drv_calc_exposure(
+        handle, exposure_line, dummy_line, mode, &ov13855_dual_aec_info);
+
+    gain = info->gain < ISP_BASE_GAIN ? ISP_BASE_GAIN : info->gain;
+    real_gain = (float)info->gain * SENSOR_BASE_GAIN / ISP_BASE_GAIN * 1.0;
+    ov13855_dual_drv_calc_gain(real_gain, &ov13855_dual_aec_info);
+    return ret_value;
+}
+
+#if defined(CONFIG_DUAL_MODULE)
+cmr_int ov13855_dual_drv_set_master_FrameSync(cmr_handle handle, cmr_uint param) {
+    SENSOR_IC_CHECK_HANDLE(handle);
+    struct sensor_ic_drv_cxt *sns_drv_cxt = (struct sensor_ic_drv_cxt *)handle;
+    hw_sensor_write_reg(sns_drv_cxt->hw_handle, 0x3002, 0x40);
+    hw_sensor_write_reg(sns_drv_cxt->hw_handle, 0x3832, 0x80);
+    SENSOR_LOGI("E");
+    return 0;
+}
+#endif
+/*==============================================================================
+ * Description:
+ * mipi stream on
+ * please modify this function acording your spec
+ *============================================================================*/
+static cmr_int ov13855_dual_drv_stream_on(cmr_handle handle, cmr_uint param)
+{
+    SENSOR_IC_CHECK_HANDLE(handle);
+    struct sensor_ic_drv_cxt * sns_drv_cxt = (struct sensor_ic_drv_cxt *)handle;
+
+	SENSOR_LOGI("E");
+
+#if defined(CONFIG_DUAL_MODULE)
+	//ov13855_dual_drv_set_master_FrameSync(handle,param);
+#endif
+	/*TODO*/
+	usleep(40 * 1000);
+    hw_sensor_write_reg(sns_drv_cxt->hw_handle, 0x0100, 0x01);
+
+	/*END*/
+
+	/*delay*/
+	usleep(10 * 1000);
+
+	return SENSOR_SUCCESS;
+}
+
+/*==============================================================================
+ * Description:
+ * mipi stream off
+ * please modify this function acording your spec
+ *============================================================================*/
+static cmr_int ov13855_dual_drv_stream_off(cmr_handle handle, cmr_uint param)
+{
+	SENSOR_LOGI("E");
+
+    SENSOR_IC_CHECK_HANDLE(handle);
+    struct sensor_ic_drv_cxt * sns_drv_cxt = (struct sensor_ic_drv_cxt *)handle;
+
+    if (!sns_drv_cxt->is_sensor_close) {
+        usleep(5 * 1000);
+    }
+
+
+    /*TODO*/
+	usleep(20 * 1000);
+   	hw_sensor_write_reg(sns_drv_cxt->hw_handle, 0x0100, 0x00);
+
+	/*END*/
+
+	/*delay*/
+	usleep(100 * 1000);
+    sns_drv_cxt->is_sensor_close = 0;
+
+    return SENSOR_SUCCESS;
+}
+
+
+/*==============================================================================
+ * Description:
+ * Initialize Exif Info
+ * please modify this function acording your spec
+ *============================================================================*/
+static cmr_int ov13855_dual_drv_init_exif_info(cmr_handle handle,
+                                          void **exif_info_in /*in*/) {
+    cmr_int ret = SENSOR_FAIL;
+    EXIF_SPEC_PIC_TAKING_COND_T *exif_ptr = NULL;
+    *exif_info_in = NULL;
+    SENSOR_IC_CHECK_HANDLE(handle);
+
+    struct sensor_ic_drv_cxt *sns_drv_cxt = (struct sensor_ic_drv_cxt *)handle;
+    struct sensor_static_info *static_info = sns_drv_cxt->static_info;
+    ret = sensor_ic_get_init_exif_info(sns_drv_cxt, &exif_ptr);
+    SENSOR_IC_CHECK_PTR(exif_ptr);
+    *exif_info_in = exif_ptr;
+
+    SENSOR_LOGI("Start");
+    exif_ptr->valid.FNumber = 1;
+    exif_ptr->FNumber.numerator = static_info->f_num;
+    exif_ptr->FNumber.denominator = 100;
+    exif_ptr->valid.ApertureValue = 1;
+    exif_ptr->ApertureValue.numerator = static_info->f_num;
+    exif_ptr->ApertureValue.denominator = 100;
+    exif_ptr->valid.MaxApertureValue = 1;
+    exif_ptr->MaxApertureValue.numerator = static_info->f_num;
+    exif_ptr->MaxApertureValue.denominator = 100;
+    exif_ptr->valid.FocalLength = 1;
+    exif_ptr->FocalLength.numerator = static_info->focal_length;
+    exif_ptr->FocalLength.denominator = 100;
+
+    return ret;
+}
+
+static cmr_int
+ov13855_dual_drv_handle_create(struct sensor_ic_drv_init_para *init_param,
+                          cmr_handle *sns_ic_drv_handle) {
+    cmr_int ret = SENSOR_SUCCESS;
+    struct sensor_ic_drv_cxt *sns_drv_cxt = NULL;
+    void *pri_data = NULL;
+    char value[255];
+
+    ret = sensor_ic_drv_create(init_param, sns_ic_drv_handle);
+    sns_drv_cxt = *sns_ic_drv_handle;
+
+    sns_drv_cxt->sensor_ev_info.preview_shutter =
+        PREVIEW_FRAME_LENGTH - FRAME_OFFSET;
+    sns_drv_cxt->sensor_ev_info.preview_gain = SENSOR_BASE_GAIN;
+    sns_drv_cxt->sensor_ev_info.preview_framelength = PREVIEW_FRAME_LENGTH;
+
+    sns_drv_cxt->frame_length_def = PREVIEW_FRAME_LENGTH;
+
+    sns_drv_cxt->current_state_machine = SENSOR_STATE_IDLE;
+
+    sensor_ic_set_match_module_info(sns_drv_cxt, ARRAY_SIZE(MODULE_INFO),
+                                    MODULE_INFO);
+
+    /*change value when use sharkle new setting*/
+    property_get("debug.camera.setting", value, "0");
+    if (atoi(value) == 1) {
+        sensor_ic_set_match_resolution_info(
+            sns_drv_cxt, ARRAY_SIZE(RES_TAB_RAW_NEW), RES_TAB_RAW_NEW);
+        sensor_ic_set_match_trim_info(sns_drv_cxt, ARRAY_SIZE(RES_TRIM_TAB_NEW),
+                                      RES_TRIM_TAB_NEW);
+        SENSOR_LOGI("debug.camera.setting!!!");
+    } else {
+        sensor_ic_set_match_resolution_info(
+            sns_drv_cxt, ARRAY_SIZE(RES_TAB_RAW), RES_TAB_RAW);
+        sensor_ic_set_match_trim_info(sns_drv_cxt, ARRAY_SIZE(RES_TRIM_TAB),
+                                      RES_TRIM_TAB);
+    }
+    sensor_ic_set_match_static_info(sns_drv_cxt, ARRAY_SIZE(STATIC_INFO),
+                                    STATIC_INFO);
+    sensor_ic_set_match_fps_info(sns_drv_cxt, ARRAY_SIZE(FPS_INFO), FPS_INFO);
+
+    /*init exif info,this will be deleted in the future*/
+    ov13855_dual_drv_init_fps_info(sns_drv_cxt);
+    ov13855_dual_drv_init_exif_info(sns_drv_cxt, &sns_drv_cxt->exif_ptr);
+
+    /*add private here*/
+    return ret;
+}
+
+static cmr_int ov13855_dual_drv_handle_delete(cmr_handle handle, cmr_uint *param) {
+    cmr_int ret = SENSOR_SUCCESS;
+
+    SENSOR_IC_CHECK_HANDLE(handle);
+    struct sensor_ic_drv_cxt *sns_drv_cxt = (struct sensor_ic_drv_cxt *)handle;
+
+    sns_drv_cxt->current_state_machine = SENSOR_STATE_IDLE;
+    ret = sensor_ic_drv_delete(handle, param);
+    return ret;
+}
+
+static cmr_int ov13855_dual_drv_get_private_data(cmr_handle handle, cmr_uint cmd,
+                                            void **param) {
+    cmr_int ret = SENSOR_SUCCESS;
+    SENSOR_IC_CHECK_HANDLE(handle);
+    SENSOR_IC_CHECK_PTR(param);
+
+    ret = sensor_ic_get_private_data(handle, cmd, param);
+    return ret;
+}
+
+void *sensor_ic_open_lib(void)
+{
+     return &g_ov13855_dual_mipi_raw_info;
+}
+
+/*==============================================================================
+ * Description:
+ * all ioctl functoins
+ * you can add functions reference SENSOR_IOCTL_FUNC_TAB_T from sensor_drv_u.h
+ *
+ * add ioctl functions like this:
+ * .power = ov13855_dual_power_on,
+ *============================================================================*/
+static struct sensor_ic_ops s_ov13855_dual_ops_tab = {
+    .create_handle = ov13855_dual_drv_handle_create,
+    .delete_handle = ov13855_dual_drv_handle_delete,
+    .get_data = ov13855_dual_drv_get_private_data,
+    /*---------------------------------------*/
+    .power = ov13855_dual_drv_power_on,
+    .identify = ov13855_dual_drv_identify,
+    .ex_write_exp = ov13855_dual_drv_write_exposure,
+    .write_gain_value = ov13855_dual_drv_write_gain_value,
+
+#if defined(CONFIG_DUAL_MODULE)
+    .read_aec_info = ov13855_dual_drv_read_aec_info,
+#endif
+
+    .ext_ops = {
+            [SENSOR_IOCTL_BEFORE_SNAPSHOT].ops = ov13855_dual_drv_before_snapshot,
+            [SENSOR_IOCTL_STREAM_ON].ops = ov13855_dual_drv_stream_on,
+            [SENSOR_IOCTL_STREAM_OFF].ops = ov13855_dual_drv_stream_off,
+            /** expand interface,if you want to add your sub cmd ,
+             *  you can add it in enum {@SENSOR_IOCTL_VAL_TYPE}
+             */
+            [SENSOR_IOCTL_ACCESS_VAL].ops = ov13855_dual_drv_access_val,
+    }};
diff --git a/sensor/sensor_drv/classic/OmniVision/ov13855_dual/sensor_ov13855_dual_mipi_raw.h b/sensor/sensor_drv/classic/OmniVision/ov13855_dual/sensor_ov13855_dual_mipi_raw.h
new file mode 100755
index 0000000..a2512d1
--- /dev/null
+++ b/sensor/sensor_drv/classic/OmniVision/ov13855_dual/sensor_ov13855_dual_mipi_raw.h
@@ -0,0 +1,938 @@
+/*
+ * Copyright (C) 2012 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * V2.0
+ */
+#ifndef _SENSOR_OV13855_DUAL_MIPI_RAW_H_
+#define _SENSOR_OV13855_DUAL_MIPI_RAW_H_
+
+//#include <utils/Log.h>
+#include "sensor.h"
+#include "jpeg_exif_header.h"
+#include "sensor_drv_u.h"
+#include "sensor_raw.h"
+
+#define SENSOR_NAME "ov13855_dual_mipi_raw"
+#define I2C_SLAVE_ADDR 0x6c /* 16bit slave address*/
+
+
+#define VENDOR_NUM 1
+#define BINNING_FACTOR 1
+#define ov13855_dual_PID_ADDR 0x300A
+#define ov13855_dual_PID_VALUE 0x00
+#define ov13855_dual_VER_ADDR 0x300B
+#define ov13855_dual_VER_VALUE 0xD8
+#define ov13855_dual_VER_1_ADDR 0x300C
+#define ov13855_dual_VER_1_VALUE 0x55
+
+/* sensor parameters begin */
+/* effective sensor output image size */
+#if defined(CONFIG_CAMERA_SIZE_LIMIT_FOR_ANDROIDGO)
+#define SNAPSHOT_WIDTH 2112  // 5344
+#define SNAPSHOT_HEIGHT 1568 // 4016
+#else
+#define SNAPSHOT_WIDTH 4224  // 5344
+#define SNAPSHOT_HEIGHT 3136 // 4016
+#endif
+#define PREVIEW_WIDTH 2112 // 2672
+#define PREVIEW_HEIGHT 1568
+
+/* frame length*/
+#define SNAPSHOT_FRAME_LENGTH 3214
+#define PREVIEW_FRAME_LENGTH 3216
+
+/*Mipi output*/
+#define LANE_NUM 4
+#define RAW_BITS 10
+
+#define SNAPSHOT_MIPI_PER_LANE_BPS 1080
+#define PREVIEW_MIPI_PER_LANE_BPS 540
+
+/* please ref your spec */
+#define FRAME_OFFSET 8 // 16 // 32
+#define SENSOR_MAX_GAIN 0x7c0
+#define SENSOR_BASE_GAIN 0x80
+#define SENSOR_MIN_SHUTTER 4
+
+/* isp parameters, please don't change it*/
+#define ISP_BASE_GAIN 0x80
+
+/* please don't change it */
+#define EX_MCLK 24
+#define IMAGE_NORMAL_MIRROR
+
+/*==============================================================================
+ * Description:
+ * global variable
+ *============================================================================*/
+// static struct hdr_info_t s_hdr_info;
+// static uint32_t s_current_default_frame_length;
+// struct sensor_ev_info_t s_sensor_ev_info;
+
+static const SENSOR_REG_T ov13855_dual_init_setting[] = {
+    /*mipi 1080Mbps,4224,3136*/
+    // Address   value
+    {0x0103, 0x01}, {0x0300, 0x02}, {0x0301, 0x00}, {0x0302, 0x5a},
+    {0x0303, 0x00}, {0x0304, 0x00}, {0x0305, 0x01}, {0x3022, 0x01},
+    {0x3013, 0x32}, {0x3016, 0x72}, {0x301b, 0xF0}, {0x301f, 0xd0},
+    {0x3106, 0x15}, {0x3107, 0x23}, {0x3500, 0x00}, {0x3501, 0x80},
+    {0x3502, 0x00}, {0x3508, 0x02}, {0x3509, 0x00}, {0x350a, 0x00}, // 0x00
+    {0x350e, 0x00}, {0x3510, 0x00}, {0x3511, 0x02}, {0x3512, 0x00},
+    {0x3600, 0x2b}, {0x3601, 0x52}, {0x3602, 0x60}, {0x3612, 0x05},
+    {0x3613, 0xa4}, {0x3620, 0x80}, {0x3621, 0x10}, {0x3622, 0x30},
+    {0x3624, 0x1c}, {0x3640, 0x10}, {0x3641, 0x70}, {0x3661, 0x80},
+    {0x3662, 0x12}, {0x3664, 0x73}, {0x3665, 0xa7}, {0x366e, 0xff},
+    {0x366f, 0xf4}, {0x3674, 0x00}, {0x3679, 0x0c}, {0x367f, 0x01},
+    {0x3680, 0x0c}, {0x3681, 0x60}, {0x3682, 0x17}, {0x3683, 0xa9},
+    {0x3684, 0x9a}, {0x3709, 0x68}, {0x3714, 0x24}, {0x371a, 0x3e},
+    {0x3737, 0x04}, {0x3738, 0xcc}, {0x3739, 0x12}, {0x373d, 0x26},
+    {0x3764, 0x20}, {0x3765, 0x20}, {0x37a1, 0x36}, {0x37a8, 0x3b},
+    {0x37ab, 0x31}, {0x37c2, 0x04}, {0x37c3, 0xf1}, {0x37c5, 0x00},
+    {0x37d8, 0x03}, {0x37d9, 0x0c}, {0x37da, 0xc2}, {0x37dc, 0x02},
+    {0x37e0, 0x00}, {0x37e1, 0x0a}, {0x37e2, 0x14}, {0x37e3, 0x04},
+    {0x37e4, 0x2A}, {0x37e5, 0x03}, {0x37e6, 0x04}, {0x3800, 0x00},
+    {0x3801, 0x00}, {0x3802, 0x00}, {0x3803, 0x08}, {0x3804, 0x10},
+    {0x3805, 0x9f}, {0x3806, 0x0c}, {0x3807, 0x57}, {0x3808, 0x10},
+    {0x3809, 0x80}, {0x380a, 0x0c}, {0x380b, 0x40}, {0x380c, 0x04},
+    {0x380d, 0x62}, {0x380e, 0x0c}, {0x380f, 0x8e}, {0x3811, 0x10},
+    {0x3813, 0x08}, {0x3814, 0x01}, {0x3815, 0x01}, {0x3816, 0x01},
+#if defined(CONFIG_DUAL_MODULE)
+    {0x3817, 0x01}, {0x3820, 0xb0}, {0x3821, 0x00}, {0x3822, 0xc2},
+#else
+    {0x3817, 0x01}, {0x3820, 0xa8}, {0x3821, 0x00}, {0x3822, 0xc2},
+#endif
+    {0x3823, 0x18}, {0x3826, 0x11}, {0x3827, 0x1c}, {0x3829, 0x03},
+    {0x3832, 0x00}, {0x3c80, 0x00}, {0x3c87, 0x01}, {0x3c8c, 0x19},
+    {0x3c8d, 0x1c}, {0x3c90, 0x00}, {0x3c91, 0x00}, {0x3c92, 0x00},
+    {0x3c93, 0x00}, {0x3c94, 0x40}, {0x3c95, 0x54}, {0x3c96, 0x34},
+    {0x3c97, 0x04}, {0x3c98, 0x00}, {0x3d8c, 0x73}, {0x3d8d, 0xc0},
+    {0x3f00, 0x0b}, {0x3f03, 0x00}, {0x4001, 0xe0}, {0x4008, 0x00},
+    {0x4009, 0x0f}, {0x4011, 0xf0}, {0x4017, 0x08}, {0x4050, 0x04},
+    {0x4051, 0x0b}, {0x4052, 0x00}, {0x4053, 0x80}, {0x4054, 0x00},
+    {0x4055, 0x80}, {0x4056, 0x00}, {0x4057, 0x80}, {0x4058, 0x00},
+    {0x4059, 0x80}, {0x405e, 0x20}, {0x4500, 0x07}, {0x4503, 0x00},
+    {0x450a, 0x04}, {0x4809, 0x04}, {0x480c, 0x12}, {0x481f, 0x30},
+    {0x4833, 0x10}, {0x4837, 0x0e}, {0x4902, 0x01}, {0x4d00, 0x03},
+    {0x4d01, 0xc9}, {0x4d02, 0xbc}, {0x4d03, 0xd7}, {0x4d04, 0xf0},
+#ifndef CONFIG_CAMERA_PDAF_TYPE
+    {0x4d05, 0xa2}, {0x5000, 0xfd}, {0x5001, 0x05}, {0x5040, 0x39},
+#else
+    {0x4d05, 0xa2}, {0x5000, 0xff}, {0x5001, 0x07}, {0x5040, 0x39},
+#endif
+    {0x5041, 0x10}, {0x5042, 0x10}, {0x5043, 0x84}, {0x5044, 0x62},
+    {0x5180, 0x00}, {0x5181, 0x10}, {0x5182, 0x02}, {0x5183, 0x0f},
+    {0x5200, 0x1b}, {0x520b, 0x07}, {0x520c, 0x0f}, {0x5300, 0x04},
+    {0x5301, 0x0C}, {0x5302, 0x0C}, {0x5303, 0x0f}, {0x5304, 0x00},
+    {0x5305, 0x70}, {0x5306, 0x00}, {0x5307, 0x80}, {0x5308, 0x00},
+    {0x5309, 0xa5}, {0x530a, 0x00}, {0x530b, 0xd3}, {0x530c, 0x00},
+    {0x530d, 0xf0}, {0x530e, 0x01}, {0x530f, 0x10}, {0x5310, 0x01},
+    {0x5311, 0x20}, {0x5312, 0x01}, {0x5313, 0x20}, {0x5314, 0x01},
+    {0x5315, 0x20}, {0x5316, 0x08}, {0x5317, 0x08}, {0x5318, 0x10},
+    {0x5319, 0x88}, {0x531a, 0x88}, {0x531b, 0xa9}, {0x531c, 0xaa},
+    {0x531d, 0x0a}, {0x5405, 0x02}, {0x5406, 0x67}, {0x5407, 0x01},
+    {0x5408, 0x4a}, {0x3503, 0x78}, {0x3681, 0x50}, {0x3682, 0x50},
+    {0x3683, 0xa9}, {0x3684, 0xa9}, {0x3709, 0x5f},
+
+    //   {0x0100,0x01},
+};
+
+static const SENSOR_REG_T ov13855_dual_2112x1568_setting[] = {
+    /*4Lane
+       binning (4:3) 29.96fps
+           line time 10.38
+                   bps 540Mbps/lan
+       H: 2112
+       V: 1568
+       Output format Setting
+           Address value*/
+    //	{0x0100,0x00},
+    {0x0303, 0x01},
+    {0x3500, 0x00},
+    {0x3501, 0x40},
+    {0x3502, 0x00},
+    {0x3662, 0x10},
+    {0x3714, 0x28},
+    {0x3737, 0x08},
+    {0x3739, 0x20},
+    {0x37c2, 0x14},
+    {0x37e3, 0x08},
+    //{0x37e4, 0x34},
+    {0x37e4, 0x38},
+    {0x37e6, 0x08},
+    {0x3800, 0x00},
+    {0x3801, 0x00},
+    {0x3802, 0x00},
+    {0x3803, 0x08},
+    {0x3804, 0x10},
+    {0x3805, 0x9f},
+    {0x3806, 0x0c},
+    {0x3807, 0x4f},
+    {0x3808, 0x08},
+    {0x3809, 0x40},
+    {0x380a, 0x06},
+    {0x380b, 0x20},
+#ifndef CONFIG_SENSOR_LOWPOWER_MODE
+    // hts 2244  vts 1608
+    {0x380c, 0x08},
+    {0x380d, 0xc4},
+    {0x380e, 0x06},
+    {0x380f, 0x48},
+#else
+    // hts 1122  vts 3216
+    {0x380c, 0x04},
+    {0x380d, 0x62},
+    {0x380e, 0x0c},
+    {0x380f, 0x90},
+#endif
+    {0x3811, 0x08},
+    {0x3813, 0x02},
+    {0x3814, 0x03},
+    {0x3816, 0x03},
+#if defined(CONFIG_DUAL_MODULE)
+    {0x3820, 0xb3},
+    {0x3826, 0x04},
+    {0x3827, 0x90},
+    {0x3829, 0x07},
+#else
+    {0x3820, 0xab},
+    {0x3826, 0x04},
+    {0x3827, 0x90},
+    {0x3829, 0x07},
+#endif
+    {0x4009, 0x0d},
+    {0x4050, 0x04},
+    {0x4051, 0x0b},
+    {0x4837, 0x1c},
+    {0x4902, 0x01},
+    // {0x0100,0x01},
+};
+
+static const SENSOR_REG_T ov13855_dual_4224x3136_30fps_setting[] = {
+    /*4Lane
+    Full (4:3) 29.95fps
+        line time 10.38
+                bps 1080Mbps/lan
+    H: 4224
+    V: 3136
+    Output format Setting
+        Address value*/
+    //  {0x0100,0x00},
+    {0x0303, 0x00},
+    {0x3500, 0x00},
+    {0x3501, 0x80},
+    {0x3502, 0x00},
+    {0x3662, 0x12},
+    {0x3714, 0x24},
+    {0x3737, 0x04},
+    {0x3739, 0x12},
+    {0x37c2, 0x04},
+    {0x37e3, 0x04},
+    //{0x37e4, 0x26},
+    {0x37e4, 0x2a},
+    {0x37e6, 0x04},
+    {0x3800, 0x00},
+    {0x3801, 0x00},
+    {0x3802, 0x00},
+    {0x3803, 0x08},
+    {0x3804, 0x10},
+    {0x3805, 0x9f},
+    {0x3806, 0x0c},
+    {0x3807, 0x57},
+    {0x3808, 0x10},
+    {0x3809, 0x80},
+    {0x380a, 0x0c},
+    {0x380b, 0x40},
+    {0x380c, 0x04},
+    {0x380d, 0x62},
+    {0x380e, 0x0c},
+    {0x380f, 0x8e},
+    {0x3811, 0x10},
+    {0x3813, 0x08},
+    {0x3814, 0x01},
+    {0x3816, 0x01},
+#if defined(CONFIG_DUAL_MODULE)
+    {0x3820, 0xb0},
+    {0x3826, 0x11},
+    {0x3827, 0x1c},
+    {0x3829, 0x03},
+#else
+    {0x3820, 0xa8},
+    {0x3826, 0x11},
+    {0x3827, 0x1c},
+    {0x3829, 0x03},
+#endif
+    {0x4009, 0x0f},
+    {0x4050, 0x04},
+    {0x4051, 0x0b},
+    {0x4837, 0x0e},
+    {0x4902, 0x01},
+    //    {0x0100,0x01},
+
+};
+
+static const SENSOR_REG_T ov13855_dual_4224x3136_15fps_setting[] = {
+    /*4Lane
+    Full (4:3) 14.97fps
+        line time 20.22us
+        bps 540Mbps/lan
+    H: 4224
+    V: 3136
+    Output format Setting
+        Address value*/
+    //    {0x0100,0x00},
+    {0x0303, 0x01},
+    {0x3500, 0x00},
+    {0x3501, 0x80},
+    {0x3502, 0x00},
+    {0x3662, 0x12},
+    {0x3714, 0x24},
+    {0x3737, 0x04},
+    {0x3739, 0x12},
+    {0x37c2, 0x04},
+    {0x37e3, 0x04},
+    //{0x37e4, 0x26},
+    {0x37e4, 0x2a},
+    {0x37e6, 0x04},
+    {0x3800, 0x00},
+    {0x3801, 0x00},
+    {0x3802, 0x00},
+    {0x3803, 0x08},
+    {0x3804, 0x10},
+    {0x3805, 0x9f},
+    {0x3806, 0x0c},
+    {0x3807, 0x57},
+    {0x3808, 0x10},
+    {0x3809, 0x80},
+    {0x380a, 0x0c},
+    {0x380b, 0x40},
+    {0x380c, 0x08},
+    {0x380d, 0xc4},
+    {0x380e, 0x0c},
+    {0x380f, 0x8e},
+    {0x3811, 0x10},
+    {0x3813, 0x08},
+    {0x3814, 0x01},
+    {0x3816, 0x01},
+#if defined(CONFIG_DUAL_MODULE)
+    {0x3820, 0xb0},
+    {0x3826, 0x11},
+    {0x3827, 0x1c},
+    {0x3829, 0x03},
+#else
+    {0x3820, 0xa8},
+    {0x3826, 0x11},
+    {0x3827, 0x1c},
+    {0x3829, 0x03},
+#endif
+    {0x4009, 0x0f},
+    {0x4050, 0x04},
+    {0x4051, 0x0b},
+    {0x4837, 0x1c},
+    {0x4902, 0x01},
+    // {0x0100,0x01},
+};
+
+static const SENSOR_REG_T ov13855_dual_1024x768_setting[] = {
+    /*4Lane
+    HV1/4 (4:3) 119.72fps
+                line time 10.38us
+        bps 270Mbps/lan
+    H: 1024
+    V: 768
+    Output format Setting
+        Address value*/
+    //    {0x0100,0x00},
+    {0x0303, 0x03},
+    {0x3500, 0x00},
+    {0x3501, 0x20},
+    {0x3502, 0x00},
+    {0x3662, 0x08},
+    {0x3714, 0x30},
+    {0x3737, 0x08},
+    {0x3739, 0x20},
+    {0x37c2, 0x2c},
+    {0x37d9, 0x06},
+    {0x37e3, 0x08},
+    //{0x37e4, 0x34},
+    {0x37e4, 0x36},
+    {0x37e6, 0x08},
+    {0x3800, 0x00},
+    {0x3801, 0x40},
+    {0x3802, 0x00},
+    {0x3803, 0x40},
+    {0x3804, 0x10},
+    {0x3805, 0x5f},
+    {0x3806, 0x0c},
+    {0x3807, 0x5f},
+    {0x3808, 0x04},
+    {0x3809, 0x00},
+    {0x380a, 0x03},
+    {0x380b, 0x00},
+    {0x380c, 0x04},
+    {0x380d, 0x62},
+    {0x380e, 0x03},
+    {0x380f, 0x24},
+    {0x3811, 0x04},
+    {0x3813, 0x04},
+    {0x3814, 0x07},
+#if defined(CONFIG_DUAL_MODULE)
+    {0x3816, 0x07},
+    {0x3820, 0xb4},
+    {0x3826, 0x04},
+    {0x3827, 0x48},
+#else
+    {0x3816, 0x07},
+    {0x3820, 0xac},
+    {0x3826, 0x04},
+    {0x3827, 0x48},
+#endif
+    {0x3829, 0x03},
+    {0x4009, 0x05},
+    {0x4050, 0x02},
+    {0x4051, 0x05},
+    {0x4837, 0x38},
+    {0x4902, 0x02},
+    // {0x0100,0x01},
+};
+
+static const SENSOR_REG_T ov13855_dual_1280x720_setting[] = {
+    /*4Lane
+    HV1/4 (4:3) 90fps
+        line time 10.38
+        bps 540Mpbs/lane
+    H: 1280
+    V: 720
+    Output format Setting
+        Address value*/
+    //   {0x0100,0x00},
+    {0x0303, 0x01},
+    {0x3500, 0x00},
+    {0x3501, 0x40},
+    {0x3502, 0x00},
+    {0x3662, 0x10},
+    {0x3714, 0x28},
+    {0x3737, 0x08},
+    {0x3739, 0x20},
+    {0x37c2, 0x14},
+    {0x37e3, 0x08},
+    //{0x37e4, 0x34},
+    {0x37e4, 0x38},
+    {0x37e6, 0x08},
+    {0x3800, 0x03},
+    {0x3801, 0x30},
+    {0x3802, 0x03},
+    {0x3803, 0x50},
+    {0x3804, 0x0d},
+    {0x3805, 0x6f},
+    {0x3806, 0x09},
+    {0x3807, 0x0f},
+    {0x3808, 0x05},
+    {0x3809, 0x00},
+    {0x380a, 0x02},
+    {0x380b, 0xd0},
+    {0x380c, 0x04},
+    {0x380d, 0x62},
+    {0x380e, 0x04},
+    {0x380f, 0x2d},
+    {0x3811, 0x08},
+    {0x3813, 0x08},
+    {0x3814, 0x03},
+    {0x3816, 0x03},
+#if defined(CONFIG_DUAL_MODULE)
+    {0x3820, 0xb3},
+    {0x3826, 0x04},
+    {0x3827, 0x90},
+    {0x3829, 0x07},
+#else
+    {0x3820, 0xab},
+    {0x3826, 0x04},
+    {0x3827, 0x90},
+    {0x3829, 0x07},
+#endif
+    {0x4009, 0x0d},
+    {0x4050, 0x04},
+    {0x4051, 0x0b},
+    {0x4837, 0x1c},
+    {0x4902, 0x01},
+    //    {0x0100,0x01},
+};
+
+/****sharkle new setting,change mipi clock,line_time,frame_length etc****/
+static const SENSOR_REG_T ov13855_dual_init_setting1[] = {
+    /*mipi 1092Mbps,4224,3136*/
+    // Address   value
+    {0x0103, 0x01}, {0x0300, 0x02}, {0x0301, 0x00}, {0x0302, 0x5b},
+    {0x0303, 0x01}, {0x0304, 0x00}, {0x0305, 0x01}, {0x030b, 0x06},
+    {0x030c, 0x02}, {0x030d, 0x88}, {0x0312, 0x11}, {0x3022, 0x01},
+    {0x3012, 0x40}, {0x3013, 0x72}, {0x3016, 0x72}, {0x301b, 0xF0},
+    {0x301f, 0xd0}, {0x3021, 0x23}, {0x3106, 0x15}, {0x3107, 0x23},
+    {0x3500, 0x00}, {0x3501, 0x40}, {0x3502, 0x00}, {0x3508, 0x02},
+    {0x3509, 0x00}, {0x350a, 0x00}, {0x350e, 0x00}, {0x3510, 0x00},
+    {0x3511, 0x02}, {0x3512, 0x00}, {0x3600, 0x2b}, {0x3601, 0x52},
+    {0x3602, 0x60}, {0x3612, 0x05}, {0x3613, 0xa4}, {0x3620, 0x80},
+    {0x3621, 0x10}, {0x3622, 0x30}, {0x3624, 0x1c}, {0x3640, 0x10},
+    {0x3641, 0x70}, {0x3661, 0x80}, {0x3662, 0x10}, {0x3664, 0x73},
+    {0x3665, 0xa7}, {0x366e, 0xff}, {0x366f, 0xf4}, {0x3674, 0x00},
+    {0x3679, 0x0c}, {0x367f, 0x01}, {0x3680, 0x0c}, {0x3681, 0x50},
+    {0x3682, 0x50}, {0x3683, 0xa9}, {0x3684, 0xa9}, {0x3706, 0x40},
+    {0x3709, 0x5f}, {0x3714, 0x28}, {0x371a, 0x3e}, {0x3737, 0x08},
+    {0x3738, 0xcc}, {0x3739, 0x20}, {0x373d, 0x26}, {0x3764, 0x20},
+    {0x3765, 0x20}, {0x37a1, 0x36}, {0x37a8, 0x3b}, {0x37ab, 0x31},
+    {0x37c2, 0x14}, {0x37c3, 0xf1}, {0x37c5, 0x00}, {0x37d8, 0x03},
+    {0x37d9, 0x0c}, {0x37da, 0xc2}, {0x37dc, 0x02}, {0x37e0, 0x00},
+    {0x37e1, 0x0a}, {0x37e2, 0x14}, {0x37e3, 0x08}, {0x37e4, 0x38},
+    {0x37e5, 0x03}, {0x37e6, 0x08}, {0x3800, 0x00}, {0x3801, 0x00},
+    {0x3803, 0x08}, {0x3805, 0x9f}, {0x3807, 0x4f}, {0x3808, 0x08},
+    {0x3809, 0x40}, {0x380a, 0x06}, {0x380b, 0x20}, {0x380c, 0x08},
+    {0x380d, 0xc4}, {0x380e, 0x06}, {0x380f, 0x48}, {0x3811, 0x08},
+    {0x3813, 0x02}, {0x3814, 0x03}, {0x3815, 0x01}, {0x3816, 0x03},
+#if defined(CONFIG_DUAL_MODULE)
+    {0x3817, 0x01}, {0x3820, 0xb3}, {0x3821, 0x00}, {0x3822, 0xc2},
+#else
+    {0x3817, 0x01}, {0x3820, 0xab}, {0x3821, 0x00}, {0x3822, 0xc2},
+#endif
+    {0x3823, 0x18}, {0x3826, 0x04}, {0x3827, 0x90}, {0x3829, 0x07},
+    {0x3832, 0x00}, {0x3c80, 0x00}, {0x3c87, 0x01}, {0x3c8c, 0x19},
+    {0x3c8d, 0x1c}, {0x3c90, 0x00}, {0x3c91, 0x00}, {0x3c92, 0x00},
+    {0x3c93, 0x00}, {0x3c94, 0x40}, {0x3c95, 0x54}, {0x3c96, 0x34},
+    {0x3c97, 0x04}, {0x3c98, 0x00}, {0x3d8c, 0x73}, {0x3d8d, 0xc0},
+    {0x3f00, 0x0b}, {0x3f03, 0x00}, {0x4001, 0xe0}, {0x4008, 0x00},
+    {0x4009, 0x0d}, {0x4011, 0xf0}, {0x4017, 0x08}, {0x4050, 0x04},
+    {0x4051, 0x0b}, {0x4052, 0x00}, {0x4053, 0x80}, {0x4054, 0x00},
+    {0x4055, 0x80}, {0x4056, 0x00}, {0x4057, 0x80}, {0x4058, 0x00},
+    {0x4059, 0x80}, {0x405e, 0x20}, {0x4500, 0x07}, {0x4503, 0x00},
+    {0x450a, 0x04}, {0x4809, 0x04}, {0x480c, 0x12}, {0x481f, 0x30},
+    {0x4833, 0x10}, {0x4837, 0x1d}, {0x484b, 0x07}, {0x4902, 0x01},
+    {0x4d00, 0x03}, {0x4d01, 0xc9}, {0x4d02, 0xbc}, {0x4d03, 0xd7},
+    {0x4d04, 0xf0}, {0x4d05, 0xa2}, {0x5000, 0xff}, {0x5001, 0x07},
+    {0x5040, 0x39}, {0x5041, 0x10}, {0x5042, 0x10}, {0x5043, 0x84},
+    {0x5044, 0x62}, {0x5180, 0x00}, {0x5181, 0x10}, {0x5182, 0x02},
+    {0x5183, 0x0f}, {0x5200, 0x1b}, {0x520b, 0x07}, {0x520c, 0x0f},
+    {0x5300, 0x04}, {0x5301, 0x0C}, {0x5302, 0x0C}, {0x5303, 0x0f},
+    {0x5304, 0x00}, {0x5305, 0x70}, {0x5306, 0x00}, {0x5307, 0x80},
+    {0x5308, 0x00}, {0x5309, 0xa5}, {0x530a, 0x00}, {0x530b, 0xd3},
+    {0x530c, 0x00}, {0x530d, 0xf0}, {0x530e, 0x01}, {0x530f, 0x10},
+    {0x5310, 0x01}, {0x5311, 0x20}, {0x5312, 0x01}, {0x5313, 0x20},
+    {0x5314, 0x01}, {0x5315, 0x20}, {0x5316, 0x08}, {0x5317, 0x08},
+    {0x5318, 0x10}, {0x5319, 0x88}, {0x531a, 0x88}, {0x531b, 0xa9},
+    {0x531c, 0xaa}, {0x531d, 0x0a}, {0x5405, 0x02}, {0x5406, 0x67},
+    {0x5407, 0x01}, {0x5408, 0x4a}, {0x3503, 0x78},
+    //{0x0100, 0x01},
+};
+
+static const SENSOR_REG_T ov13855_dual_2112x1568_setting1[] = {
+    /*4Lane
+       binning (4:3) 30fps
+       line time 20.78
+       bps 546Mbps/lan
+       H: 2112
+       V: 1568
+       Output format Setting
+           Address value*/
+    {0x0100, 0x00}, {0x0303, 0x01}, {0x3501, 0x40}, {0x3662, 0x10},
+    {0x3714, 0x28}, {0x3737, 0x08}, {0x3739, 0x20}, {0x37c2, 0x14},
+    {0x37d9, 0x0c}, {0x37e3, 0x08}, {0x37e4, 0x38}, {0x37e6, 0x08},
+    {0x3801, 0x00}, {0x3802, 0x00}, {0x3803, 0x08}, {0x3804, 0x10},
+    {0x3805, 0x9f}, {0x3806, 0x0c}, {0x3807, 0x4f}, {0x3808, 0x08},
+    {0x3809, 0x40}, {0x380a, 0x06}, {0x380b, 0x20}, {0x380c, 0x08},
+    {0x380d, 0xc4}, {0x380e, 0x06}, {0x380f, 0x48}, {0x3810, 0x00},
+    {0x3811, 0x08}, {0x3812, 0x00}, {0x3813, 0x02}, {0x3814, 0x03},
+    {0x3816, 0x03},
+#if defined(CONFIG_DUAL_MODULE)
+    {0x3820, 0xb3}, {0x3826, 0x04}, {0x3827, 0x90}, {0x3829, 0x07},
+#else
+    {0x3820, 0xab}, {0x3826, 0x04}, {0x3827, 0x90}, {0x3829, 0x07},
+#endif
+    {0x4009, 0x0d}, {0x4050, 0x04}, {0x4051, 0x0b}, {0x4837, 0x1d},
+    {0x4902, 0x01},
+    //{0x0100, 0x01},
+};
+
+static const SENSOR_REG_T ov13855_dual_4224x3136_30fps_setting1[] = {
+    /*4Lane
+    Full (4:3) 30fps
+    line time 10.38
+    bps 1092Mbps/lan
+    H: 4224
+    V: 3136
+    Output format Setting
+        Address value*/
+    {0x0100, 0x00}, {0x0303, 0x00}, {0x3501, 0x80}, {0x3662, 0x12},
+    {0x3714, 0x24}, {0x3737, 0x04}, {0x3739, 0x12}, {0x37c2, 0x04},
+    {0x37d9, 0x0c}, {0x37e3, 0x04}, {0x37e4, 0x2a}, {0x37e6, 0x04},
+    {0x3801, 0x00}, {0x3802, 0x00}, {0x3803, 0x08}, {0x3804, 0x10},
+    {0x3805, 0x9f}, {0x3806, 0x0c}, {0x3807, 0x57}, {0x3808, 0x10},
+    {0x3809, 0x80}, {0x380a, 0x0c}, {0x380b, 0x40}, {0x380c, 0x04},
+    {0x380d, 0x62}, {0x380e, 0x0c}, {0x380f, 0x8e}, {0x3810, 0x00},
+    {0x3811, 0x10}, {0x3812, 0x00}, {0x3813, 0x08}, {0x3814, 0x01},
+    {0x3816, 0x01},
+#if defined(CONFIG_DUAL_MODULE)
+    {0x3820, 0xb0}, {0x3826, 0x11}, {0x3827, 0x1c}, {0x3829, 0x03},
+#else
+    {0x3820, 0xa8}, {0x3826, 0x11}, {0x3827, 0x1c}, {0x3829, 0x03},
+#endif
+    {0x4009, 0x0f}, {0x4050, 0x04}, {0x4051, 0x0b}, {0x4837, 0x0f},
+    {0x4902, 0x01},
+    //{0x0100, 0x01},
+};
+
+static const SENSOR_REG_T ov13855_dual_1024x768_setting1[] = {
+    /*4Lane
+    HV1/4 (4:3) 120fps
+    line time 10.38us
+    bps 546Mbps/lan
+    H: 1024
+    V: 768
+    Output format Setting
+      Address value*/
+    {0x0100, 0x00}, {0x0303, 0x01}, {0x3501, 0x20}, {0x3662, 0x08},
+    {0x3714, 0x30}, {0x3737, 0x08}, {0x3739, 0x20}, {0x37c2, 0x2c},
+    {0x37d9, 0x06}, {0x37e3, 0x08}, {0x37e4, 0x36}, {0x37e6, 0x08},
+    {0x3801, 0x40}, {0x3802, 0x00}, {0x3803, 0x40}, {0x3804, 0x10},
+    {0x3805, 0x5f}, {0x3806, 0x0c}, {0x3807, 0x5f}, {0x3808, 0x04},
+    {0x3809, 0x00}, {0x380a, 0x03}, {0x380b, 0x00}, {0x380c, 0x04},
+    {0x380c, 0x62}, {0x380e, 0x03}, {0x380f, 0x24}, {0x3810, 0x00},
+    {0x3811, 0x04}, {0x3812, 0x00}, {0x3813, 0x04}, {0x3814, 0x07},
+    {0x3816, 0x07},
+#if defined(CONFIG_DUAL_MODULE)
+    {0x3820, 0xb4}, {0x3826, 0x04}, {0x3827, 0x48}, {0x3829, 0x03},
+#else
+    {0x3820, 0xac}, {0x3826, 0x04}, {0x3827, 0x48}, {0x3829, 0x03},
+#endif
+    {0x4009, 0x05}, {0x4050, 0x02}, {0x4051, 0x05}, {0x4837, 0x1d},
+    {0x4902, 0x02},
+    //{0x0100, 0x01},
+};
+
+static const SENSOR_REG_T ov13855_dual_1280x720_setting1[] = {
+    /*4Lane
+    HV1/4 (4:3) 120fps
+    line time 10.38
+    bps 546Mpbs/lane
+    H: 1280
+    V: 720
+    Output format Setting
+        Address value*/
+    {0x0100, 0x00}, {0x0303, 0x01}, {0x3501, 0x30}, {0x3662, 0x10},
+    {0x3714, 0x28}, {0x3737, 0x08}, {0x3739, 0x20}, {0x37c2, 0x14},
+    {0x37d9, 0x0c}, {0x37e3, 0x08}, {0x37e4, 0x34}, {0x37e6, 0x08},
+    {0x3800, 0x03}, {0x3801, 0x30}, {0x3802, 0x03}, {0x3803, 0x50},
+    {0x3804, 0x0d}, {0x3805, 0x6f}, {0x3806, 0x09}, {0x3807, 0x0f},
+    {0x3808, 0x05}, {0x3809, 0x00}, {0x380a, 0x02}, {0x380b, 0xd0},
+    {0x380c, 0x04}, {0x380d, 0x62}, {0x380e, 0x03}, {0x380f, 0x24},
+    {0x3810, 0x00}, {0x3811, 0x08}, {0x3812, 0x00}, {0x3813, 0x08},
+    {0x3814, 0x03}, {0x3816, 0x03},
+#if defined(CONFIG_DUAL_MODULE)
+    {0x3820, 0xb3}, {0x3826, 0x04}, {0x3827, 0x90}, {0x3829, 0x07},
+#else
+    {0x3820, 0xab}, {0x3826, 0x04}, {0x3827, 0x90}, {0x3829, 0x07},
+#endif
+    {0x4009, 0x0d}, {0x4050, 0x04}, {0x4051, 0x0b}, {0x4837, 0x1c},
+    {0x4902, 0x01},
+    //{0x0100, 0x01},
+};
+
+static struct sensor_res_tab_info s_ov13855_dual_resolution_tab_raw_new[VENDOR_NUM] =
+    {
+        {.module_id = MODULE_SUNNY,
+         .reg_tab =
+             {{ADDR_AND_LEN_OF_ARRAY(ov13855_dual_init_setting1), PNULL, 0,
+               .width = 0, .height = 0, .xclk_to_sensor = EX_MCLK,
+               .image_format = SENSOR_IMAGE_FORMAT_RAW},
+
+              {ADDR_AND_LEN_OF_ARRAY(ov13855_dual_1280x720_setting1), PNULL, 0,
+               .width = 1280, .height = 720, .xclk_to_sensor = 24,
+               .image_format = SENSOR_IMAGE_FORMAT_RAW},
+
+              /*{ADDR_AND_LEN_OF_ARRAY(ov13855_dual_1024x768_setting), PNULL, 0,
+              .width = 1024, .height = 768,
+              .xclk_to_sensor = 24, .image_format = SENSOR_IMAGE_FORMAT_RAW}*/
+
+              {ADDR_AND_LEN_OF_ARRAY(ov13855_dual_2112x1568_setting1), PNULL, 0,
+               .width = 2112, .height = 1568, .xclk_to_sensor = 24,
+               .image_format = SENSOR_IMAGE_FORMAT_RAW},
+              {ADDR_AND_LEN_OF_ARRAY(ov13855_dual_4224x3136_30fps_setting1), PNULL,
+               0, .width = 4224, .height = 3136, .xclk_to_sensor = 24,
+               .image_format = SENSOR_IMAGE_FORMAT_RAW}}}
+        /*If there are multiple modules,please add here*/
+};
+
+static SENSOR_TRIM_T
+    s_ov13855_dual_resolution_trim_tab_new[VENDOR_NUM] =
+        {
+            {.module_id = MODULE_SUNNY,
+             .trim_info =
+                 {
+                     {0, 0, 0, 0, 0, 0, 0, {0, 0, 0, 0}},
+
+                     {.trim_start_x = 0,
+                      .trim_start_y = 0,
+                      .trim_width = 1280,
+                      .trim_height = 720,
+                      .line_time = 10389,
+                      .bps_per_lane = 546,
+                      .frame_line = 804,
+                      .scaler_trim = {.x = 0, .y = 0, .w = 1280, .h = 720}},
+                     /*{
+                      .trim_start_x = 0, .trim_start_y = 0,
+                      .trim_width = 1024,   .trim_height = 768,
+                      .line_time = 10380, .bps_per_lane = 270,
+                      .frame_line = 804,
+                      .scaler_trim = {.x = 0, .y = 0, .w = 1024, .h = 768}},*/
+                     {.trim_start_x = 0,
+                      .trim_start_y = 0,
+                      .trim_width = 2112,
+                      .trim_height = 1568,
+                      .line_time = 20778,
+                      .bps_per_lane = 546,
+                      .frame_line = 1608,
+                      .scaler_trim = {.x = 0, .y = 0, .w = 2112, .h = 1568}},
+                     {.trim_start_x = 0,
+                      .trim_start_y = 0,
+                      .trim_width = 4224,
+                      .trim_height = 3136,
+                      .line_time = 10389,
+                      .bps_per_lane = 1092,
+                      .frame_line = 3214,
+                      .scaler_trim = {.x = 0, .y = 0, .w = 4224, .h = 3136}},
+                 }}
+
+            /*If there are multiple modules,please add here*/
+};
+
+static SENSOR_STATIC_INFO_T s_ov13855_dual_static_info[VENDOR_NUM] = {
+    {.module_id = MODULE_SUNNY,
+     .static_info = {.f_num = 200,
+                     .focal_length = 354,
+                     .max_fps = 0,
+                     .max_adgain = 15 * 4,
+                     .ois_supported = 0,
+
+#ifdef CONFIG_CAMERA_PDAF_TYPE
+                     .pdaf_supported =
+                         CONFIG_CAMERA_PDAF_TYPE, // pdaf_supported;
+#else
+                     .pdaf_supported = 0,
+#endif
+                     .exp_valid_frame_num = 1,
+                     .clamp_level = 64,
+                     .adgain_valid_frame_num = 1,
+                     .fov_info = {{4.815f, 3.6783f}, 3.74f}}}
+    /*If there are multiple modules,please add here*/
+};
+
+static SENSOR_MODE_FPS_INFO_T s_ov13855_dual_mode_fps_info[VENDOR_NUM] = {
+    {.module_id = MODULE_SUNNY,
+     {.is_init = 0,
+      {{SENSOR_MODE_COMMON_INIT, 0, 1, 0, 0},
+       {SENSOR_MODE_PREVIEW_ONE, 0, 1, 0, 0},
+       {SENSOR_MODE_SNAPSHOT_ONE_FIRST, 0, 1, 0, 0},
+       {SENSOR_MODE_SNAPSHOT_ONE_SECOND, 0, 1, 0, 0},
+       {SENSOR_MODE_SNAPSHOT_ONE_THIRD, 0, 1, 0, 0},
+       {SENSOR_MODE_PREVIEW_TWO, 0, 1, 0, 0},
+       {SENSOR_MODE_SNAPSHOT_TWO_FIRST, 0, 1, 0, 0},
+       {SENSOR_MODE_SNAPSHOT_TWO_SECOND, 0, 1, 0, 0},
+       {SENSOR_MODE_SNAPSHOT_TWO_THIRD, 0, 1, 0, 0}}}}
+    /*If there are multiple modules,please add here*/
+};
+
+static struct sensor_res_tab_info s_ov13855_dual_resolution_tab_raw[VENDOR_NUM] = {
+    {.module_id = MODULE_SUNNY,
+     .reg_tab =
+         {{ADDR_AND_LEN_OF_ARRAY(ov13855_dual_init_setting), PNULL, 0, .width = 0,
+           .height = 0, .xclk_to_sensor = EX_MCLK,
+           .image_format = SENSOR_IMAGE_FORMAT_RAW},
+
+          {ADDR_AND_LEN_OF_ARRAY(ov13855_dual_1280x720_setting), PNULL, 0,
+           .width = 1280, .height = 720, .xclk_to_sensor = 24,
+           .image_format = SENSOR_IMAGE_FORMAT_RAW},
+
+          /*{ADDR_AND_LEN_OF_ARRAY(ov13855_dual_1024x768_setting), PNULL, 0,
+          .width = 1024, .height = 768,
+          .xclk_to_sensor = 24, .image_format = SENSOR_IMAGE_FORMAT_RAW}*/
+
+          {ADDR_AND_LEN_OF_ARRAY(ov13855_dual_2112x1568_setting), PNULL, 0,
+           .width = 2112, .height = 1568, .xclk_to_sensor = 24,
+           .image_format = SENSOR_IMAGE_FORMAT_RAW},
+          {ADDR_AND_LEN_OF_ARRAY(ov13855_dual_4224x3136_30fps_setting), PNULL, 0,
+           .width = 4224, .height = 3136, .xclk_to_sensor = 24,
+           .image_format = SENSOR_IMAGE_FORMAT_RAW}}}
+    /*If there are multiple modules,please add here*/
+};
+
+static SENSOR_TRIM_T s_ov13855_dual_resolution_trim_tab[VENDOR_NUM] = {
+    {.module_id = MODULE_SUNNY,
+     .trim_info =
+         {
+             {0, 0, 0, 0, 0, 0, 0, {0, 0, 0, 0}},
+             {.trim_start_x = 0,
+              .trim_start_y = 0,
+              .trim_width = 1280,
+              .trim_height = 720,
+              .line_time = 10380,
+              .bps_per_lane = 540,
+              .frame_line = 1069,
+              .scaler_trim = {.x = 0, .y = 0, .w = 1280, .h = 720}},
+/*{
+ .trim_start_x = 0, .trim_start_y = 0,
+ .trim_width = 1024,   .trim_height = 768,
+ .line_time = 10380, .bps_per_lane = 270,
+ .frame_line = 804,
+ .scaler_trim = {.x = 0, .y = 0, .w = 1024, .h = 768}},*/
+#ifndef CONFIG_SENSOR_LOWPOWER_MODE
+             {.trim_start_x = 0,
+              .trim_start_y = 0,
+              .trim_width = 2112,
+              .trim_height = 1568,
+              .line_time = 20770,
+              .bps_per_lane = 540,
+              .frame_line = 1608,
+              .scaler_trim = {.x = 0, .y = 0, .w = 2112, .h = 1568}},
+#else
+             {.trim_start_x = 0,
+              .trim_start_y = 0,
+              .trim_width = 2112,
+              .trim_height = 1568,
+              .line_time = 10380,
+              .bps_per_lane = 540,
+              .frame_line = 3216,
+              .scaler_trim = {.x = 0, .y = 0, .w = 2112, .h = 1568}},
+#endif
+             {.trim_start_x = 0,
+              .trim_start_y = 0,
+              .trim_width = 4224,
+              .trim_height = 3136,
+              .line_time = 10380,
+              .bps_per_lane = 1080,
+              .frame_line = 3214,
+              .scaler_trim = {.x = 0, .y = 0, .w = 4224, .h = 3136}},
+         }}
+
+    /*If there are multiple modules,please add here*/
+};
+
+static const SENSOR_REG_T
+    s_ov13855_dual_preview_size_video_tab[SENSOR_VIDEO_MODE_MAX][1] = {
+        /*video mode 0: ?fps*/
+        {{.reg_addr = 0xffff, .reg_value = 0xff}},
+        /* video mode 1:?fps*/
+        {{.reg_addr = 0xffff, .reg_value = 0xff}},
+        /* video mode 2:?fps*/
+        {{.reg_addr = 0xffff, .reg_value = 0xff}},
+        /* video mode 3:?fps*/
+        {{.reg_addr = 0xffff, .reg_value = 0xff}},
+};
+
+static const SENSOR_REG_T
+    s_ov13855_dual_capture_size_video_tab[SENSOR_VIDEO_MODE_MAX][1] = {
+        /*video mode 0: ?fps*/
+        {{.reg_addr = 0xffff, .reg_value = 0xff}},
+        /* video mode 1:?fps*/
+        {{.reg_addr = 0xffff, .reg_value = 0xff}},
+        /* video mode 2:?fps*/
+        {{.reg_addr = 0xffff, .reg_value = 0xff}},
+        /* video mode 3:?fps*/
+        {{.reg_addr = 0xffff, .reg_value = 0xff}},
+};
+
+static SENSOR_VIDEO_INFO_T s_ov13855_dual_video_info[SENSOR_MODE_MAX] = {
+    {{{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, PNULL},
+    {{{30, 30, 270, 90}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}},
+     (SENSOR_REG_T **)s_ov13855_dual_preview_size_video_tab},
+    {{{2, 5, 338, 1000}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}},
+     (SENSOR_REG_T **)s_ov13855_dual_capture_size_video_tab},
+};
+
+static struct sensor_module_info s_ov13855_dual_module_info_tab[VENDOR_NUM] = {
+    {.module_id = MODULE_SUNNY,
+     .module_info = {.major_i2c_addr = I2C_SLAVE_ADDR >> 1,
+                     .minor_i2c_addr = 0x20 >> 1,
+
+                     .reg_addr_value_bits = SENSOR_I2C_REG_16BIT |
+                                            SENSOR_I2C_VAL_8BIT |
+                                            SENSOR_I2C_FREQ_400,
+
+                     .avdd_val = SENSOR_AVDD_2800MV,
+                     .iovdd_val = SENSOR_AVDD_1800MV,
+                     .dvdd_val = SENSOR_AVDD_1200MV,
+
+                     .image_pattern = SENSOR_IMAGE_PATTERN_RAWRGB_B,
+
+                     .preview_skip_num = 1,
+                     .capture_skip_num = 1,
+                     .flash_capture_skip_num = 9,
+                     .mipi_cap_skip_num = 0,
+                     .preview_deci_num = 0,
+                     .video_preview_deci_num = 0,
+
+                     .threshold_eb = 0,
+                     .threshold_mode = 0,
+                     .threshold_start = 0,
+                     .threshold_end = 0,
+
+                     .sensor_interface =
+                         {
+                             .type = SENSOR_INTERFACE_TYPE_CSI2,
+                             .bus_width = 4,
+                             .pixel_width = 10,
+                             .is_loose = 0,
+                         },
+                     .change_setting_skip_num = 1,
+                     .horizontal_view_angle = 35,
+                     .vertical_view_angle = 35}}
+
+    /*If there are multiple modules,please add here*/
+};
+
+static struct sensor_ic_ops s_ov13855_dual_ops_tab;
+struct sensor_raw_info *s_ov13855_dual_mipi_raw_info_ptr =
+    PNULL; //&s_ov13855_dual_mipi_raw_info;
+
+SENSOR_INFO_T g_ov13855_dual_mipi_raw_info = {
+    .hw_signal_polarity = SENSOR_HW_SIGNAL_PCLK_P | SENSOR_HW_SIGNAL_VSYNC_P |
+                          SENSOR_HW_SIGNAL_HSYNC_P,
+    .environment_mode = SENSOR_ENVIROMENT_NORMAL | SENSOR_ENVIROMENT_NIGHT,
+    .image_effect = SENSOR_IMAGE_EFFECT_NORMAL |
+                    SENSOR_IMAGE_EFFECT_BLACKWHITE | SENSOR_IMAGE_EFFECT_RED |
+                    SENSOR_IMAGE_EFFECT_GREEN | SENSOR_IMAGE_EFFECT_BLUE |
+                    SENSOR_IMAGE_EFFECT_YELLOW | SENSOR_IMAGE_EFFECT_NEGATIVE |
+                    SENSOR_IMAGE_EFFECT_CANVAS,
+
+    .wb_mode = 0,
+    .step_count = 7,
+    .reset_pulse_level = SENSOR_LOW_PULSE_RESET,
+    .reset_pulse_width = 50,
+    .power_down_level = SENSOR_LOW_LEVEL_PWDN,
+    .identify_count = 1,
+    .identify_code =
+        {{.reg_addr = ov13855_dual_PID_ADDR, .reg_value = ov13855_dual_PID_VALUE},
+         {.reg_addr = ov13855_dual_VER_ADDR, .reg_value = ov13855_dual_VER_VALUE},
+         {.reg_addr = ov13855_dual_VER_1_ADDR, .reg_value = ov13855_dual_VER_1_VALUE}},
+
+    .source_width_max = SNAPSHOT_WIDTH,
+    .source_height_max = SNAPSHOT_HEIGHT,
+    .name = (cmr_s8 *)SENSOR_NAME,
+    .image_format = SENSOR_IMAGE_FORMAT_RAW,
+
+    .module_info_tab = s_ov13855_dual_module_info_tab,
+    .module_info_tab_size = ARRAY_SIZE(s_ov13855_dual_module_info_tab),
+
+    .resolution_tab_info_ptr = s_ov13855_dual_resolution_tab_raw,
+    .sns_ops = &s_ov13855_dual_ops_tab,
+    .raw_info_ptr = &s_ov13855_dual_mipi_raw_info_ptr,
+
+    .video_tab_info_ptr = NULL,
+    .sensor_version_info = (cmr_s8 *)"ov13855_dualv1",
+};
+#endif
diff --git a/sensor/sensor_drv/classic/OmniVision/ov8856_front/Makefile b/sensor/sensor_drv/classic/OmniVision/ov8856_front/Makefile
new file mode 100755
index 0000000..1b2d0eb
--- /dev/null
+++ b/sensor/sensor_drv/classic/OmniVision/ov8856_front/Makefile
@@ -0,0 +1,72 @@
+#
+# SPDX-FileCopyrightText: 2020-2022 Unisoc (Shanghai) Technologies Co., Ltd
+# SPDX-License-Identifier: LicenseRef-Unisoc-General-1.0
+#
+# Copyright 2022-2022 Unisoc (Shanghai) Technologies Co., Ltd.
+# Licensed under the Unisoc General Software License, version 1.0 (the License);
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+# https://www.unisoc.com/en_us/license/UNISOC_GENERAL_LICENSE_V1.0-EN_US
+# Software distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OF ANY KIND, either express or implied.
+# See the Unisoc General Software License, version 1.0 for more details.
+#
+CFLAGS = -Wall -g -O -fPIC 
+
+LOCAL_C_INCLUDES :=
+LOCAL_SRC_DIR :=
+LOCAL_SRC_FILES :=
+LOCAL_CFLAGS :=
+
+LOCAL_PATH := $(shell pwd)
+
+PARAM_NAME := $(notdir $(LOCAL_PATH))
+
+include $(LOCAL_PATH)/../../../../../devices/$(BOARD)/BoardConfig.mk
+include $(LOCAL_PATH)/../../../../../camera.mk
+include $(LOCAL_PATH)/../../../../../SprdCtrl.mk
+
+LOCAL_C_INCLUDES := $(LOCAL_PATH)/../../../../inc \
+                    $(LOCAL_PATH)/../../../../../$(OEM_DIR)/inc \
+                    $(LOCAL_PATH)/../../../../../common/inc \
+                    $(LOCAL_PATH)/../../../../../$(ISPDRV_DIR)/isp_tune \
+                    $(LOCAL_PATH)/../../../../../$(ISPALG_DIR)/common/inc \
+                    $(LOCAL_PATH)/../../../../../$(ISPDRV_DIR)/middleware/inc \
+                    $(LOCAL_PATH)/../../../../../$(ISPDRV_DIR)/driver/inc \
+                    $(LOCAL_PATH)/../../../../../KIface \
+                    $(LOCAL_PATH)/../../../../../KIface/interface \
+                    $(LOCAL_PATH)/../../../../../utils/camxmlparser/inc/libxml2 \
+                    $(LOCAL_PATH)/../../../../../libcaminiparser \
+                    sensor_ov8856_front_mipi_raw_2lane.h
+
+
+LOCAL_SRC_FILES := sensor_ov8856_front_mipi_raw.c
+
+ifeq (1, $(strip $(shell expr $(ANDROID_MAJOR_VER) \>= 8)))
+LOCAL_PROPRIETARY_MODULE := true
+endif
+
+INCLUDE_DIRS = $(addprefix -I , $(LOCAL_C_INCLUDES))
+
+OBJS = $(notdir $(patsubst %.c,%.o,$(LOCAL_SRC_FILES)))
+
+LIBS = -lpthread -lcamcommon -lcamsensor -lcamxmlparser
+
+SRCS =  $(LOCAL_SRC_FILES)
+
+TARGET := libsensor_$(PARAM_NAME).so
+
+CFLAGS += $(LOCAL_CFLAGS)
+
+all:$(OBJS)
+	$(CC) -shared -fPIC -o $(TARGET) $(OBJS)  $(LIBS)
+
+$(OBJS):$(SRCS)
+	$(CC) $(CFLAGS) $(INCLUDE_DIRS) -c $^
+
+install:
+	cp $(TARGET) $(INSTALL_MOD_PATH)/usr/lib
+
+clean:
+	rm -f *.o
+	rm -f $(TARGET)
diff --git a/sensor/sensor_drv/classic/OmniVision/ov8856_front/sensor_ov8856_front_mipi_raw_2lane.h b/sensor/sensor_drv/classic/OmniVision/ov8856_front/sensor_ov8856_front_mipi_raw_2lane.h
index 7ba20e5..2953acb 100755
--- a/sensor/sensor_drv/classic/OmniVision/ov8856_front/sensor_ov8856_front_mipi_raw_2lane.h
+++ b/sensor/sensor_drv/classic/OmniVision/ov8856_front/sensor_ov8856_front_mipi_raw_2lane.h
@@ -20,7 +20,7 @@
 #define _SENSOR_ov8856_FRONT_MIPI_RAW_H_
 
 #define LOG_TAG "ov8856_front_2lane"
-#include <utils/Log.h>
+//#include <utils/Log.h>
 #include "sensor.h"
 #include "jpeg_exif_header.h"
 #include "sensor_drv_u.h"
diff --git a/sensor/sensor_drv/classic/OmniVision/ov8856_front/sensor_ov8856_front_mipi_raw_4lane.h b/sensor/sensor_drv/classic/OmniVision/ov8856_front/sensor_ov8856_front_mipi_raw_4lane.h
index 753212f..532a3e5 100755
--- a/sensor/sensor_drv/classic/OmniVision/ov8856_front/sensor_ov8856_front_mipi_raw_4lane.h
+++ b/sensor/sensor_drv/classic/OmniVision/ov8856_front/sensor_ov8856_front_mipi_raw_4lane.h
@@ -20,7 +20,7 @@
 #define _SENSOR_ov8856_FRONT_MIPI_RAW_H_
 
 #define LOG_TAG "ov8856_front_4lane"
-#include <utils/Log.h>
+//#include <utils/Log.h>
 #include "sensor.h"
 #include "jpeg_exif_header.h"
 #include "sensor_drv_u.h"
diff --git a/sensor/sensor_drv/classic/OmniVision/ov8856_front/sensor_ov8856_front_otp.h b/sensor/sensor_drv/classic/OmniVision/ov8856_front/sensor_ov8856_front_otp.h
index 8510595..d1d63bc 100755
--- a/sensor/sensor_drv/classic/OmniVision/ov8856_front/sensor_ov8856_front_otp.h
+++ b/sensor/sensor_drv/classic/OmniVision/ov8856_front/sensor_ov8856_front_otp.h
@@ -12,7 +12,7 @@
  * See the Unisoc General Software License, version 1.0 for more details.
  */
 
-#include <utils/Log.h>
+//#include <utils/Log.h>
 #include "sensor.h"
 #include "sensor_drv_u.h"
 #include "sensor_raw.h"
diff --git a/sensor/sensor_drv/classic/OmniVision/ov8856_xl_front/Makefile b/sensor/sensor_drv/classic/OmniVision/ov8856_xl_front/Makefile
index ace88da..17b0d38 100755
--- a/sensor/sensor_drv/classic/OmniVision/ov8856_xl_front/Makefile
+++ b/sensor/sensor_drv/classic/OmniVision/ov8856_xl_front/Makefile
@@ -1,71 +1,72 @@
-#
-# SPDX-FileCopyrightText: 2020-2022 Unisoc (Shanghai) Technologies Co., Ltd
-# SPDX-License-Identifier: LicenseRef-Unisoc-General-1.0
-#
-# Copyright 2022-2022 Unisoc (Shanghai) Technologies Co., Ltd.
-# Licensed under the Unisoc General Software License, version 1.0 (the License);
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-# https://www.unisoc.com/en_us/license/UNISOC_GENERAL_LICENSE_V1.0-EN_US
-# Software distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OF ANY KIND, either express or implied.
-# See the Unisoc General Software License, version 1.0 for more details.
-#
-CFLAGS = -Wall -g -O -fPIC 
-
-LOCAL_C_INCLUDES :=
-LOCAL_SRC_DIR :=
-LOCAL_SRC_FILES :=
-LOCAL_CFLAGS :=
-
-LOCAL_PATH := $(shell pwd)
-
-PARAM_NAME := $(notdir $(LOCAL_PATH))
-
-include $(LOCAL_PATH)/../../../../../devices/$(BOARD)/BoardConfig.mk
-include $(LOCAL_PATH)/../../../../../camera.mk
-include $(LOCAL_PATH)/../../../../../SprdCtrl.mk
-
-LOCAL_C_INCLUDES := $(LOCAL_PATH)/../../../../inc \
-                    $(LOCAL_PATH)/../../../../../$(OEM_DIR)/inc \
-                    $(LOCAL_PATH)/../../../../../common/inc \
-                    $(LOCAL_PATH)/../../../../../$(ISPDRV_DIR)/isp_tune \
-                    $(LOCAL_PATH)/../../../../../$(ISPALG_DIR)/common/inc \
-                    $(LOCAL_PATH)/../../../../../$(ISPDRV_DIR)/middleware/inc \
-                    $(LOCAL_PATH)/../../../../../$(ISPDRV_DIR)/driver/inc \
-                    $(LOCAL_PATH)/../../../../../KIface \
-                    $(LOCAL_PATH)/../../../../../KIface/interface \
-                    $(LOCAL_PATH)/../../../../../utils/camxmlparser/inc/libxml2 \
-                    $(LOCAL_PATH)/../../../../../libcaminiparser \
-
-
-LOCAL_SRC_FILES := sensor_ov8856_xl_f_mipi_raw.c
-
-ifeq (1, $(strip $(shell expr $(ANDROID_MAJOR_VER) \>= 8)))
-LOCAL_PROPRIETARY_MODULE := true
-endif
-
-INCLUDE_DIRS = $(addprefix -I , $(LOCAL_C_INCLUDES))
-
-OBJS = $(notdir $(patsubst %.c,%.o,$(LOCAL_SRC_FILES)))
-
-LIBS = -lpthread -lcamcommon -lcamsensor -lcamxmlparser
-
-SRCS =  $(LOCAL_SRC_FILES)
-
-TARGET := libsensor_$(PARAM_NAME).so
-
-CFLAGS += $(LOCAL_CFLAGS)
-
-all:$(OBJS)
-	$(CC) -shared -fPIC -o $(TARGET) $(OBJS)  $(LIBS)
-
-$(OBJS):$(SRCS)
-	$(CC) $(CFLAGS) $(INCLUDE_DIRS) -c $^
-
-install:
-	cp $(TARGET) $(INSTALL_MOD_PATH)/usr/lib
-
-clean:
-	rm -f *.o
-	rm -f $(TARGET)
+#
+# SPDX-FileCopyrightText: 2020-2022 Unisoc (Shanghai) Technologies Co., Ltd
+# SPDX-License-Identifier: LicenseRef-Unisoc-General-1.0
+#
+# Copyright 2022-2022 Unisoc (Shanghai) Technologies Co., Ltd.
+# Licensed under the Unisoc General Software License, version 1.0 (the License);
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+# https://www.unisoc.com/en_us/license/UNISOC_GENERAL_LICENSE_V1.0-EN_US
+# Software distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OF ANY KIND, either express or implied.
+# See the Unisoc General Software License, version 1.0 for more details.
+#
+CFLAGS = -Wall -g -O -fPIC 
+
+LOCAL_C_INCLUDES :=
+LOCAL_SRC_DIR :=
+LOCAL_SRC_FILES :=
+LOCAL_CFLAGS :=
+
+LOCAL_PATH := $(shell pwd)
+
+PARAM_NAME := $(notdir $(LOCAL_PATH))
+
+include $(LOCAL_PATH)/../../../../../devices/$(BOARD)/BoardConfig.mk
+include $(LOCAL_PATH)/../../../../../camera.mk
+include $(LOCAL_PATH)/../../../../../SprdCtrl.mk
+
+LOCAL_C_INCLUDES := $(LOCAL_PATH)/../../../../inc \
+                    $(LOCAL_PATH)/../../../../../$(OEM_DIR)/inc \
+                    $(LOCAL_PATH)/../../../../../common/inc \
+                    $(LOCAL_PATH)/../../../../../$(ISPDRV_DIR)/isp_tune \
+                    $(LOCAL_PATH)/../../../../../$(ISPALG_DIR)/common/inc \
+                    $(LOCAL_PATH)/../../../../../$(ISPDRV_DIR)/middleware/inc \
+                    $(LOCAL_PATH)/../../../../../$(ISPDRV_DIR)/driver/inc \
+                    $(LOCAL_PATH)/../../../../../KIface \
+                    $(LOCAL_PATH)/../../../../../KIface/interface \
+                    $(LOCAL_PATH)/../../../../../utils/camxmlparser/inc/libxml2 \
+                    $(LOCAL_PATH)/../../../../../libcaminiparser \
+                    sensor_ov8856_xl_f_mipi_raw_2lane.h
+
+
+LOCAL_SRC_FILES := sensor_ov8856_xl_f_mipi_raw.c
+
+ifeq (1, $(strip $(shell expr $(ANDROID_MAJOR_VER) \>= 8)))
+LOCAL_PROPRIETARY_MODULE := true
+endif
+
+INCLUDE_DIRS = $(addprefix -I , $(LOCAL_C_INCLUDES))
+
+OBJS = $(notdir $(patsubst %.c,%.o,$(LOCAL_SRC_FILES)))
+
+LIBS = -lpthread -lcamcommon -lcamsensor -lcamxmlparser
+
+SRCS =  $(LOCAL_SRC_FILES)
+
+TARGET := libsensor_$(PARAM_NAME).so
+
+CFLAGS += $(LOCAL_CFLAGS)
+
+all:$(OBJS)
+	$(CC) -shared -fPIC -o $(TARGET) $(OBJS)  $(LIBS)
+
+$(OBJS):$(SRCS)
+	$(CC) $(CFLAGS) $(INCLUDE_DIRS) -c $^
+
+install:
+	cp $(TARGET) $(INSTALL_MOD_PATH)/usr/lib
+
+clean:
+	rm -f *.o
+	rm -f $(TARGET)
diff --git a/sensor/sensor_drv/classic/OmniVision/ov8856_xl_front/sensor_ov8856_xl_f_mipi_raw.c b/sensor/sensor_drv/classic/OmniVision/ov8856_xl_front/sensor_ov8856_xl_f_mipi_raw.c
index f2459f1..b02ca92 100755
--- a/sensor/sensor_drv/classic/OmniVision/ov8856_xl_front/sensor_ov8856_xl_f_mipi_raw.c
+++ b/sensor/sensor_drv/classic/OmniVision/ov8856_xl_front/sensor_ov8856_xl_f_mipi_raw.c
@@ -224,9 +224,9 @@ static cmr_int ov8856_drv_power_on(cmr_handle handle, cmr_uint power_on) {
         hw_sensor_power_down(sns_drv_cxt->hw_handle, power_down);
         hw_sensor_set_reset_level(sns_drv_cxt->hw_handle, reset_level);
         hw_sensor_set_mclk(sns_drv_cxt->hw_handle, SENSOR_DISABLE_MCLK);
-//        hw_sensor_set_avdd_val(sns_drv_cxt->hw_handle, SENSOR_AVDD_CLOSED);
-//        hw_sensor_set_dvdd_val(sns_drv_cxt->hw_handle, SENSOR_AVDD_CLOSED);
-//        hw_sensor_set_iovdd_val(sns_drv_cxt->hw_handle, SENSOR_AVDD_CLOSED);
+        hw_sensor_set_avdd_val(sns_drv_cxt->hw_handle, SENSOR_AVDD_CLOSED);
+        hw_sensor_set_dvdd_val(sns_drv_cxt->hw_handle, SENSOR_AVDD_CLOSED);
+        hw_sensor_set_iovdd_val(sns_drv_cxt->hw_handle, SENSOR_AVDD_CLOSED);
 
         usleep(1 * 1000);
         hw_sensor_set_iovdd_val(sns_drv_cxt->hw_handle, iovdd_val);
diff --git a/sensor/sensor_drv/classic/OmniVision/ov8856_xl_front/sensor_ov8856_xl_f_otp.h b/sensor/sensor_drv/classic/OmniVision/ov8856_xl_front/sensor_ov8856_xl_f_otp.h
index c4a6e5e..772d2f9 100755
--- a/sensor/sensor_drv/classic/OmniVision/ov8856_xl_front/sensor_ov8856_xl_f_otp.h
+++ b/sensor/sensor_drv/classic/OmniVision/ov8856_xl_front/sensor_ov8856_xl_f_otp.h
@@ -12,7 +12,7 @@
  * See the Unisoc General Software License, version 1.0 for more details.
  */
 
-#include <utils/Log.h>
+//#include <utils/Log.h>
 #include "sensor.h"
 #include "sensor_drv_u.h"
 #include "sensor_raw.h"
diff --git a/sensor/sensor_drv/sensor_lib_cfg.mk b/sensor/sensor_drv/sensor_lib_cfg.mk
index 795656f..d14cbe0 100755
--- a/sensor/sensor_drv/sensor_lib_cfg.mk
+++ b/sensor/sensor_drv/sensor_lib_cfg.mk
@@ -18,6 +18,7 @@ PRODUCT_PACKAGES += libsensor_imx351 \
     libsensor_imx586 \
     libsensor_imx586_2lane \
     libsensor_ov13855 \
+    libsensor_ov13855_dual \
     libsensor_ov13b10 \
     libsensor_s5k3l8xxm3 \
     libsensor_s5k4h8yx \
-- 
2.25.1

