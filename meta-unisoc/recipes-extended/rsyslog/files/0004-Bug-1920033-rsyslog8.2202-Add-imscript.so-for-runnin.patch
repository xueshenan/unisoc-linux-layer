From cd0db49b06e91855dac42a2a57ca5b48ec555585 Mon Sep 17 00:00:00 2001
From: "etham.li" <etham.li@unisoc.com>
Date: Sun, 26 Jun 2022 21:39:22 +0800
Subject: [PATCH] Bug #1920033 [rsyslog8.2202] Add imscript.so for running
 scripts

[root cause  ]: Add imscript.so for running scripts
[changes     ]: Add imscript.so for running scripts
[side effects]: no
[self test   ]: build pass
[download normally]:yes
[power on/off normally]:yes
[do common repository/branch inspection]:no
[is there dependence]:no
[confirm dependent commit]:no
[board]:trunk
[test case]:build pass
[reviewers]:zhenghai.yang

commit_template_version:v1
---
 Makefile.am                  |   7 +-
 configure.ac                 |  13 ++
 plugins/imscript/Makefile.am |   6 +
 plugins/imscript/imscript.c  | 346 +++++++++++++++++++++++++++++++++++
 4 files changed, 371 insertions(+), 1 deletion(-)
 create mode 100755 plugins/imscript/Makefile.am
 create mode 100755 plugins/imscript/imscript.c

diff --git a/Makefile.am b/Makefile.am
index bb8e439..3c446b6 100755
--- a/Makefile.am
+++ b/Makefile.am
@@ -38,6 +38,10 @@ if ENABLE_IMEVENTS
 SUBDIRS += plugins/imevents
 endif
 
+if ENABLE_IMSCRIPT
+SUBDIRS += plugins/imscript
+endif
+
 if ENABLE_IMKMSG
 SUBDIRS += contrib/imkmsg
 endif
@@ -398,7 +402,8 @@ DISTCHECK_CONFIGURE_FLAGS+= \
 	--enable-pmsnare \
 	--enable-usertools \
 	--enable-test \
-	--enable-events
+	--enable-events \
+	--enable-script
 
 else
 DISTCHECK_CONFIGURE_FLAGS+= \
diff --git a/configure.ac b/configure.ac
index e0bf5dd..6f617c5 100755
--- a/configure.ac
+++ b/configure.ac
@@ -603,6 +603,18 @@ AC_ARG_ENABLE(test,
 )
 AM_CONDITIONAL(ENABLE_IMEVENTS, test x$enable_events = xyes)
 
+# script
+AC_ARG_ENABLE(script,
+        [AS_HELP_STRING([--enable-script],[Integrated script functionality @<:@default=yes@:>@])],
+        [case "${enableval}" in
+         yes) enable_script="yes" ;;
+          no) enable_script="no" ;;
+           *) AC_MSG_ERROR(bad value ${enableval} for --enable-script) ;;
+         esac],
+        [enable_script="yes"]
+)
+AM_CONDITIONAL(ENABLE_IMSCRIPT, test x$enable_script = xyes)
+
 # kmsg
 AC_ARG_ENABLE(kmsg,
         [AS_HELP_STRING([--enable-kmsg],[Kmsg structured kernel logs functionality @<:@default=no@:>@])],
@@ -2699,6 +2711,7 @@ AC_CONFIG_FILES([Makefile \
 		plugins/imklog/Makefile \
 		plugins/imtest/Makefile \
 		plugins/imevents/Makefile \
+		plugins/imscript/Makefile \
 		plugins/omhdfs/Makefile \
 		plugins/omkafka/Makefile \
 		plugins/omprog/Makefile \
diff --git a/plugins/imscript/Makefile.am b/plugins/imscript/Makefile.am
new file mode 100755
index 0000000..9ecea3b
--- /dev/null
+++ b/plugins/imscript/Makefile.am
@@ -0,0 +1,6 @@
+pkglib_LTLIBRARIES = imscript.la
+
+imscript_la_SOURCES = imscript.c
+imscript_la_CPPFLAGS = -I$(top_srcdir) $(PTHREADS_CFLAGS) $(RSRT_CFLAGS)
+imscript_la_LDFLAGS = -module -avoid-version
+imscript_la_LIBADD = 
diff --git a/plugins/imscript/imscript.c b/plugins/imscript/imscript.c
new file mode 100755
index 0000000..53b291c
--- /dev/null
+++ b/plugins/imscript/imscript.c
@@ -0,0 +1,346 @@
+/*
+ * SPDX-FileCopyrightText: 2022 Unisoc (Shanghai) Technologies Co., Ltd.
+ *
+ * SPDX-License-Identifier: LicenseRef-Unisoc-General-1.0
+ *
+ */
+#include "config.h"
+#include <stdio.h>
+#include <assert.h>
+#include <string.h>
+#include <stdarg.h>
+#include <ctype.h>
+#include <stdlib.h>
+#include <poll.h>
+#include <sys/types.h>
+#include <sys/wait.h>
+#include <sys/types.h>
+
+#include "rsyslog.h"
+#include "dirty.h"
+#include "cfsysline.h"
+#include "obj.h"
+#include "msg.h"
+#include "glbl.h"
+#include "prop.h"
+#include "errmsg.h"
+#include "stream.h"
+#include "unicode-helper.h"
+#include "module-template.h"
+#include "stringbuf.h"
+
+MODULE_TYPE_INPUT
+MODULE_TYPE_NOKEEP
+MODULE_CNFNAME("imscript")
+
+/* Module static data */
+DEF_IMOD_STATIC_DATA
+DEFobjCurrIf(glbl)
+DEFobjCurrIf(strm)
+DEFobjCurrIf(prop)
+
+static int bLegacyCnfModGlobalsPermitted;
+
+static struct configSettings_s {
+	uchar *pszScriptFile;
+	uchar *pszScriptLogName;
+} cs;
+
+/* input params config settings */
+struct instanceConf_s {
+	uchar *pszFile;
+	uchar *pszLogName;
+	struct instanceConf_s *next;
+};
+
+/* module params config settings */
+struct modConfData_s {
+	rsconf_t *pConf;
+	instanceConf_t *root, *tail;
+};
+
+static modConfData_t *loadModConf = NULL;
+static modConfData_t *runModConf = NULL;
+
+/* global property */
+static prop_t *pInputName = NULL;
+
+/* module-global parameters */
+static struct cnfparamdescr modpdescr[] = {
+};
+static struct cnfparamblk modpblk =
+	{ CNFPARAMBLK_VERSION,
+	  sizeof(modpdescr)/sizeof(struct cnfparamdescr),
+	  modpdescr
+	};
+
+/* input instance parameters */
+static struct cnfparamdescr inppdescr[] = {
+	{ "scriptfile", eCmdHdlrString, CNFPARAM_REQUIRED },
+	{ "scriptlogname", eCmdHdlrString, CNFPARAM_REQUIRED }
+};
+static struct cnfparamblk inppblk =
+	{ CNFPARAMBLK_VERSION,
+	  sizeof(inppdescr)/sizeof(struct cnfparamdescr),
+	  inppdescr
+	};
+
+/************************************************************/
+/* function define                                          */
+/************************************************************/
+static int ecode_check(pid_t status) {
+  if (-1 == status) {
+    DBGPRINTF("system error!");
+    return -1;
+  } else {
+    DBGPRINTF("exit status value = [0x%x]\n", status);
+    if (WIFEXITED(status)) {
+      if (0 == WEXITSTATUS(status)) {
+        DBGPRINTF("run shell script successfully.\n");
+      } else {
+        DBGPRINTF("run shell script fail, script exit code: %d\n", WEXITSTATUS(
+            status));
+        return -1;
+      }
+    } else {
+      DBGPRINTF("exit status = [%d]\n", WEXITSTATUS(status));
+      return -1;
+    }
+  }
+  return 0;
+}
+
+static int exec_cmd(const char * cmd_fmt, ...) {
+  char cmd[128];
+  va_list va;
+  int ecode;
+
+  va_start(va, cmd_fmt);
+  vsnprintf(cmd, sizeof cmd, cmd_fmt, va);
+  va_end(va);
+
+  ecode = system(cmd);
+  DBGPRINTF("%s exit with %d\n", cmd, ecode);
+  return ecode_check(ecode);
+}
+
+/* create input instance, set default parameters, and
+ * add it to the list of instances.
+ */
+static rsRetVal
+createInstance(instanceConf_t **pinst)
+{
+	DBGPRINTF("imscript: createInstance\n");
+	instanceConf_t *inst;
+	DEFiRet;
+	CHKmalloc(inst = malloc(sizeof(instanceConf_t)));
+	inst->next = NULL;
+	inst->pszFile = NULL;
+	inst->pszLogName = NULL;
+
+	if(loadModConf->tail == NULL) {
+		loadModConf->tail = loadModConf->root = inst;
+	} else {
+		loadModConf->tail->next = inst;
+		loadModConf->tail = inst;
+	}
+
+	*pinst = inst;
+finalize_it:
+	RETiRet;
+}
+
+/* enqueue the the /dev/kmsg message into the main message-queue.*/
+static rsRetVal
+RunScript(instanceConf_t *inst)
+{
+	DBGPRINTF("imscript: emter RunScript\n");
+	char cmd[128];
+	int ret;
+	DEFiRet;
+	assert(msg != NULL);
+	assert(inst->pszFile != NULL);
+	assert(inst->pszLogName != NULL);
+	DBGPRINTF("imscript: input scriptfile = %s", inst->pszFile);
+	DBGPRINTF("imscript: input scriptlogname = %s", inst->pszLogName);
+	snprintf(cmd, sizeof(cmd), "%s %s", inst->pszFile, inst->pszLogName);
+	ret = exec_cmd(cmd);
+	DBGPRINTF("imscript: input scriptfile exec = %d", ret);
+finalize_it:
+	RETiRet;
+}
+
+/*
+ * Initialize input parameters by rsyslog.conf
+*/
+BEGINnewInpInst
+	struct cnfparamvals *pvals;
+	instanceConf_t *inst;
+	int i;
+CODESTARTnewInpInst
+	pvals = nvlstGetParams(lst, &inppblk, NULL);
+	if(pvals == NULL) {
+		DBGPRINTF("imscript: error processing input config parameters [input(...)]");
+		ABORT_FINALIZE(RS_RET_MISSING_CNFPARAMS);
+	}
+
+	cnfparamsPrint(&inppblk, pvals);
+	CHKiRet(createInstance(&inst));
+
+	for(i = 0 ; i < inppblk.nParams ; ++i) {
+		if(!pvals[i].bUsed)
+			continue;
+		if(!strcmp(inppblk.descr[i].name, "scriptfile")) {
+			inst->pszFile = (uchar*)es_str2cstr(pvals[i].val.d.estr, NULL);
+		} else if(!strcmp(inppblk.descr[i].name, "scriptlogname")) {
+			inst->pszLogName = (uchar*)es_str2cstr(pvals[i].val.d.estr, NULL);
+		} else {
+			DBGPRINTF("imscript: program error, non-handled "
+			  "param '%s'\n", inppblk.descr[i].name);
+		}
+	}
+finalize_it:
+CODE_STD_FINALIZERnewInpInst
+	cnfparamvalsDestruct(pvals, &inppblk);
+ENDnewInpInst
+
+/*
+ * Initialize module parameters
+*/
+BEGINbeginCnfLoad
+CODESTARTbeginCnfLoad
+	loadModConf = pModConf;
+	pModConf->pConf = pConf;
+	/* init legacy config vars */
+	cs.pszScriptFile = NULL;
+	cs.pszScriptLogName = NULL;
+ENDbeginCnfLoad
+
+/*
+ * Set module parameters by rsyslog.conf
+*/
+BEGINsetModCnf
+CODESTARTsetModCnf
+	bLegacyCnfModGlobalsPermitted = 0;
+finalize_it:
+ENDsetModCnf
+
+/*
+ * End module/input parameters configure end load
+*/
+BEGINendCnfLoad
+CODESTARTendCnfLoad
+	loadModConf = NULL;
+	free(cs.pszScriptFile);
+	free(cs.pszScriptLogName);
+ENDendCnfLoad
+
+/*
+ * Check Conf
+*/
+BEGINcheckCnf
+CODESTARTcheckCnf
+	if(pModConf->root == NULL) {
+		DBGPRINTF("imscript: no files configured to be monitored no input will be gathered");
+		iRet = RS_RET_NO_LISTNERS;
+	}
+ENDcheckCnf
+
+BEGINactivateCnfPrePrivDrop
+CODESTARTactivateCnfPrePrivDrop
+ENDactivateCnfPrePrivDrop
+
+BEGINactivateCnf
+CODESTARTactivateCnf
+	runModConf = pModConf;
+ENDactivateCnf
+
+BEGINfreeCnf
+	instanceConf_t *inst, *del;
+CODESTARTfreeCnf
+	for(inst = pModConf->root ; inst != NULL ; ) {
+		free(inst->pszFile);
+		free(inst->pszLogName);
+		del = inst;
+		inst = inst->next;
+		free(del);
+	}
+ENDfreeCnf
+
+BEGINrunInput
+	instanceConf_t *inst;
+CODESTARTrunInput
+	if(runModConf->root == NULL) {
+		DBGPRINTF("imscript: no file monitors configured, input not activated\n");
+		ABORT_FINALIZE(RS_RET_NO_RUN);
+	}
+	for(inst = runModConf->root ; inst != NULL ; inst = inst->next) {
+		RunScript(inst); //run scripts
+		sleep(1);
+	}
+finalize_it:
+ENDrunInput
+
+BEGINwillRun
+CODESTARTwillRun
+ENDwillRun
+
+BEGINafterRun
+CODESTARTafterRun
+	if(pInputName != NULL)
+		prop.Destruct(&pInputName);
+ENDafterRun
+
+BEGINisCompatibleWithFeature
+CODESTARTisCompatibleWithFeature
+	if(eFeat == sFEATURENonCancelInputTermination)
+		iRet = RS_RET_OK;
+ENDisCompatibleWithFeature
+
+BEGINmodExit
+CODESTARTmodExit
+	if(pInputName != NULL) {
+		prop.Destruct(&pInputName);
+	}
+	/* release objects we used */
+	objRelease(strm, CORE_COMPONENT);
+	objRelease(glbl, CORE_COMPONENT);
+	objRelease(prop, CORE_COMPONENT);
+ENDmodExit
+
+BEGINqueryEtryPt
+CODESTARTqueryEtryPt
+CODEqueryEtryPt_STD_IMOD_QUERIES
+CODEqueryEtryPt_STD_CONF2_QUERIES
+CODEqueryEtryPt_STD_CONF2_setModCnf_QUERIES
+CODEqueryEtryPt_STD_CONF2_IMOD_QUERIES
+CODEqueryEtryPt_IsCompatibleWithFeature_IF_OMOD_QUERIES
+ENDqueryEtryPt
+
+static rsRetVal
+resetConfigVariables(uchar __attribute__((unused)) *pp, void __attribute__((unused)) *pVal)
+{
+	DEFiRet;
+	free(cs.pszScriptFile);
+	free(cs.pszScriptLogName);
+	cs.pszScriptFile = NULL;
+	cs.pszScriptLogName = NULL;
+	RETiRet;
+}
+
+BEGINmodInit()
+CODESTARTmodInit
+	*ipIFVersProvided = CURR_MOD_IF_VERSION;
+CODEmodInit_QueryRegCFSLineHdlr
+	CHKiRet(objUse(glbl, CORE_COMPONENT));
+	CHKiRet(objUse(strm, CORE_COMPONENT));
+	CHKiRet(objUse(prop, CORE_COMPONENT));
+
+	CHKiRet(omsdRegCFSLineHdlr((uchar *)"inputscriptfile", 0, eCmdHdlrGetWord,
+	  	NULL, &cs.pszScriptFile, STD_LOADABLE_MODULE_ID));
+	CHKiRet(omsdRegCFSLineHdlr((uchar *)"inputscriptlogname", 0, eCmdHdlrGetWord,
+	  	NULL, &cs.pszScriptLogName, STD_LOADABLE_MODULE_ID));
+	CHKiRet(omsdRegCFSLineHdlr((uchar *)"resetconfigvariables", 1, eCmdHdlrCustomHandler,
+		resetConfigVariables, NULL, STD_LOADABLE_MODULE_ID));
+ENDmodInit
+
-- 
2.17.1

