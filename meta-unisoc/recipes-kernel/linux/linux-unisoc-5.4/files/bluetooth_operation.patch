diff --git a/include/net/bluetooth/hci_core.h b/include/net/bluetooth/hci_core.h
index 02c5cca26658..39d04e70beed 100644
--- a/include/net/bluetooth/hci_core.h
+++ b/include/net/bluetooth/hci_core.h
@@ -1517,6 +1517,7 @@ void hci_sock_dev_event(struct hci_dev *hdev, int event);
 #define HCI_MGMT_NO_HDEV	BIT(1)
 #define HCI_MGMT_UNTRUSTED	BIT(2)
 #define HCI_MGMT_UNCONFIGURED	BIT(3)
+#define HCI_MGMT_HDEV_OPTIONAL BIT(4)
 
 struct hci_mgmt_handler {
 	int (*func) (struct sock *sk, struct hci_dev *hdev, void *data,
diff --git a/include/net/bluetooth/mgmt.h b/include/net/bluetooth/mgmt.h
index 9cee7ddc6741..25062f3ee6d9 100644
--- a/include/net/bluetooth/mgmt.h
+++ b/include/net/bluetooth/mgmt.h
@@ -654,6 +654,199 @@ struct mgmt_cp_set_phy_confguration {
 } __packed;
 #define MGMT_SET_PHY_CONFIGURATION_SIZE	4
 
+#define MGMT_OP_SET_BLOCKED_KEYS	0x0046
+
+#define HCI_BLOCKED_KEY_TYPE_LINKKEY	0x00
+#define HCI_BLOCKED_KEY_TYPE_LTK	0x01
+#define HCI_BLOCKED_KEY_TYPE_IRK	0x02
+
+struct mgmt_blocked_key_info {
+	__u8 type;
+	__u8 val[16];
+} __packed;
+
+struct mgmt_cp_set_blocked_keys {
+	__le16 key_count;
+	struct mgmt_blocked_key_info keys[];
+} __packed;
+#define MGMT_OP_SET_BLOCKED_KEYS_SIZE 2
+
+#define MGMT_OP_SET_WIDEBAND_SPEECH	0x0047
+
+#define MGMT_CAP_SEC_FLAGS		0x01
+#define MGMT_CAP_MAX_ENC_KEY_SIZE	0x02
+#define MGMT_CAP_SMP_MAX_ENC_KEY_SIZE	0x03
+#define MGMT_CAP_LE_TX_PWR		0x04
+
+#define MGMT_OP_READ_CONTROLLER_CAP	0x0048
+#define MGMT_READ_CONTROLLER_CAP_SIZE	0
+struct mgmt_rp_read_controller_cap {
+	__le16   cap_len;
+	__u8     cap[0];
+} __packed;
+
+#define MGMT_OP_READ_EXP_FEATURES_INFO	0x0049
+#define MGMT_READ_EXP_FEATURES_INFO_SIZE 0
+struct mgmt_rp_read_exp_features_info {
+	__le16 feature_count;
+	struct {
+		__u8   uuid[16];
+		__le32 flags;
+	} features[];
+} __packed;
+
+#define MGMT_OP_SET_EXP_FEATURE		0x004a
+struct mgmt_cp_set_exp_feature {
+	__u8   uuid[16];
+	__u8   param[];
+} __packed;
+#define MGMT_SET_EXP_FEATURE_SIZE	16
+struct mgmt_rp_set_exp_feature {
+	__u8   uuid[16];
+	__le32 flags;
+} __packed;
+
+#define MGMT_OP_READ_DEF_SYSTEM_CONFIG	0x004b
+#define MGMT_READ_DEF_SYSTEM_CONFIG_SIZE	0
+
+#define MGMT_OP_SET_DEF_SYSTEM_CONFIG	0x004c
+#define MGMT_SET_DEF_SYSTEM_CONFIG_SIZE		0
+
+#define MGMT_OP_READ_DEF_RUNTIME_CONFIG	0x004d
+#define MGMT_READ_DEF_RUNTIME_CONFIG_SIZE	0
+
+#define MGMT_OP_SET_DEF_RUNTIME_CONFIG	0x004e
+#define MGMT_SET_DEF_RUNTIME_CONFIG_SIZE	0
+
+#define MGMT_OP_GET_DEVICE_FLAGS	0x004F
+#define MGMT_GET_DEVICE_FLAGS_SIZE	7
+struct mgmt_cp_get_device_flags {
+	struct mgmt_addr_info addr;
+} __packed;
+struct mgmt_rp_get_device_flags {
+	struct mgmt_addr_info addr;
+	__le32 supported_flags;
+	__le32 current_flags;
+} __packed;
+
+#define MGMT_OP_SET_DEVICE_FLAGS	0x0050
+#define MGMT_SET_DEVICE_FLAGS_SIZE	11
+struct mgmt_cp_set_device_flags {
+	struct mgmt_addr_info addr;
+	__le32 current_flags;
+} __packed;
+struct mgmt_rp_set_device_flags {
+	struct mgmt_addr_info addr;
+} __packed;
+
+#define MGMT_ADV_MONITOR_FEATURE_MASK_OR_PATTERNS    BIT(0)
+
+#define MGMT_OP_READ_ADV_MONITOR_FEATURES	0x0051
+#define MGMT_READ_ADV_MONITOR_FEATURES_SIZE	0
+struct mgmt_rp_read_adv_monitor_features {
+	__le32 supported_features;
+	__le32 enabled_features;
+	__le16 max_num_handles;
+	__u8 max_num_patterns;
+	__le16 num_handles;
+	__le16 handles[];
+}  __packed;
+
+struct mgmt_adv_pattern {
+	__u8 ad_type;
+	__u8 offset;
+	__u8 length;
+	__u8 value[31];
+} __packed;
+
+#define MGMT_OP_ADD_ADV_PATTERNS_MONITOR	0x0052
+struct mgmt_cp_add_adv_patterns_monitor {
+	__u8 pattern_count;
+	struct mgmt_adv_pattern patterns[];
+} __packed;
+#define MGMT_ADD_ADV_PATTERNS_MONITOR_SIZE	1
+struct mgmt_rp_add_adv_patterns_monitor {
+	__le16 monitor_handle;
+} __packed;
+
+#define MGMT_OP_REMOVE_ADV_MONITOR		0x0053
+struct mgmt_cp_remove_adv_monitor {
+	__le16 monitor_handle;
+} __packed;
+#define MGMT_REMOVE_ADV_MONITOR_SIZE		2
+struct mgmt_rp_remove_adv_monitor {
+	__le16 monitor_handle;
+} __packed;
+
+#define MGMT_OP_ADD_EXT_ADV_PARAMS		0x0054
+struct mgmt_cp_add_ext_adv_params {
+	__u8	instance;
+	__le32	flags;
+	__le16	duration;
+	__le16	timeout;
+	__le32	min_interval;
+	__le32	max_interval;
+	__s8	tx_power;
+} __packed;
+#define MGMT_ADD_EXT_ADV_PARAMS_MIN_SIZE	18
+struct mgmt_rp_add_ext_adv_params {
+	__u8	instance;
+	__s8	tx_power;
+	__u8	max_adv_data_len;
+	__u8	max_scan_rsp_len;
+} __packed;
+
+#define MGMT_OP_ADD_EXT_ADV_DATA		0x0055
+struct mgmt_cp_add_ext_adv_data {
+	__u8	instance;
+	__u8	adv_data_len;
+	__u8	scan_rsp_len;
+	__u8	data[];
+} __packed;
+#define MGMT_ADD_EXT_ADV_DATA_SIZE	3
+struct mgmt_rp_add_ext_adv_data {
+	__u8	instance;
+} __packed;
+
+struct mgmt_adv_rssi_thresholds {
+	__s8	high_threshold;
+	__le16	high_threshold_timeout;
+	__s8	low_threshold;
+	__le16	low_threshold_timeout;
+	__u8	sampling_period;
+} __packed;
+
+#define MGMT_OP_ADD_ADV_PATTERNS_MONITOR_RSSI	0x0056
+struct mgmt_cp_add_adv_patterns_monitor_rssi {
+	struct mgmt_adv_rssi_thresholds rssi;
+	__u8	pattern_count;
+	struct mgmt_adv_pattern patterns[];
+} __packed;
+#define MGMT_ADD_ADV_PATTERNS_MONITOR_RSSI_SIZE	8
+
+
+#define MGMT_OP_SET_OPP_TRANSFER		0x0057
+struct mgmt_cp_set_opp_transfer {
+	__u8	instance;
+	bdaddr_t bdaddr; //peer addr
+  __le32	op;      //0x1 Opp send; 0x2 Opp recv;
+	__le32	flags;   //0x0 stop; 0x1 start;
+} __packed;
+#define MGMT_OP_SET_OPP_TRANSFER_SIZE	15
+struct mgmt_rp_set_opp_transfer {
+	__u8	instance;
+} __packed;
+
+#define MGMT_OP_SET_VND_PLAY		0x0058
+struct mgmt_cp_set_vnd_play {
+	__u8	instance;
+	__le32	flags;
+} __packed;
+#define MGMT_OP_SET_VND_PLAY_SIZE	5
+struct mgmt_rp_set_vnd_play {
+	__u8	instance;
+} __packed;
+
 #define MGMT_EV_CMD_COMPLETE		0x0001
 struct mgmt_ev_cmd_complete {
 	__le16	opcode;
diff --git a/net/bluetooth/6lowpan.c b/net/bluetooth/6lowpan.c
index 52fb6d6d6d58..9d5b755814f1 100644
--- a/net/bluetooth/6lowpan.c
+++ b/net/bluetooth/6lowpan.c
@@ -96,7 +96,7 @@ static inline bool peer_del(struct lowpan_btle_dev *dev,
 	module_put(THIS_MODULE);
 
 	if (atomic_dec_and_test(&dev->peer_count)) {
-		BT_DBG("last peer");
+		BT_INFO("last peer");
 		return true;
 	}
 
@@ -108,13 +108,13 @@ static inline struct lowpan_peer *peer_lookup_ba(struct lowpan_btle_dev *dev,
 {
 	struct lowpan_peer *peer;
 
-	BT_DBG("peers %d addr %pMR type %d", atomic_read(&dev->peer_count),
+	BT_INFO("peers %d addr %pMR type %d", atomic_read(&dev->peer_count),
 	       ba, type);
 
 	rcu_read_lock();
 
 	list_for_each_entry_rcu(peer, &dev->peers, list) {
-		BT_DBG("dst addr %pMR dst type %d",
+		BT_INFO("dst addr %pMR dst type %d",
 		       &peer->chan->dst, peer->chan->dst_type);
 
 		if (bacmp(&peer->chan->dst, ba))
@@ -167,7 +167,7 @@ static inline struct lowpan_peer *peer_lookup_dst(struct lowpan_btle_dev *dev,
 	struct lowpan_peer *peer;
 	struct neighbour *neigh;
 
-	BT_DBG("peers %d addr %pI6c rt %p", count, daddr, rt);
+	BT_INFO("peers %d addr %pI6c rt %p", count, daddr, rt);
 
 	if (!rt) {
 		if (ipv6_addr_any(&lowpan_cb(skb)->gw)) {
@@ -190,12 +190,12 @@ static inline struct lowpan_peer *peer_lookup_dst(struct lowpan_btle_dev *dev,
 		memcpy(&lowpan_cb(skb)->gw, nexthop, sizeof(struct in6_addr));
 	}
 
-	BT_DBG("gw %pI6c", nexthop);
+	BT_INFO("gw %pI6c", nexthop);
 
 	rcu_read_lock();
 
 	list_for_each_entry_rcu(peer, &dev->peers, list) {
-		BT_DBG("dst addr %pMR dst type %d ip %pI6c",
+		BT_INFO("dst addr %pMR dst type %d ip %pI6c",
 		       &peer->chan->dst, peer->chan->dst_type,
 		       &peer->peer_addr);
 
@@ -338,7 +338,7 @@ static int recv_pkt(struct sk_buff *skb, struct net_device *dev,
 
 		ret = iphc_decompress(local_skb, dev, peer);
 		if (ret < 0) {
-			BT_DBG("iphc_decompress failed: %d", ret);
+			BT_INFO("iphc_decompress failed: %d", ret);
 			kfree_skb(local_skb);
 			goto drop;
 		}
@@ -358,7 +358,7 @@ static int recv_pkt(struct sk_buff *skb, struct net_device *dev,
 		consume_skb(local_skb);
 		consume_skb(skb);
 	} else {
-		BT_DBG("unknown packet type");
+		BT_INFO("unknown packet type");
 		goto drop;
 	}
 
@@ -386,7 +386,7 @@ static int chan_recv_cb(struct l2cap_chan *chan, struct sk_buff *skb)
 
 	err = recv_pkt(skb, dev->netdev, peer);
 	if (err) {
-		BT_DBG("recv pkt %d", err);
+		BT_INFO("recv pkt %d", err);
 		err = -EAGAIN;
 	}
 
@@ -413,7 +413,7 @@ static int setup_header(struct sk_buff *skb, struct net_device *netdev,
 		lowpan_cb(skb)->chan = NULL;
 		daddr = NULL;
 	} else {
-		BT_DBG("dest IP %pI6c", &ipv6_daddr);
+		BT_INFO("dest IP %pI6c", &ipv6_daddr);
 
 		/* The packet might be sent to 6lowpan interface
 		 * because of routing (either via default route
@@ -422,7 +422,7 @@ static int setup_header(struct sk_buff *skb, struct net_device *netdev,
 		 */
 		peer = peer_lookup_dst(dev, &ipv6_daddr, skb);
 		if (!peer) {
-			BT_DBG("no such peer");
+			BT_INFO("no such peer");
 			return -ENOENT;
 		}
 
@@ -507,7 +507,7 @@ static int send_mcast_pkt(struct sk_buff *skb, struct net_device *netdev)
 
 			local_skb = skb_clone(skb, GFP_ATOMIC);
 
-			BT_DBG("xmit %s to %pMR type %d IP %pI6c chan %p",
+			BT_INFO("xmit %s to %pMR type %d IP %pI6c chan %p",
 			       netdev->name,
 			       &pentry->chan->dst, pentry->chan->dst_type,
 			       &pentry->peer_addr, pentry->chan);
@@ -550,7 +550,7 @@ static netdev_tx_t bt_xmit(struct sk_buff *skb, struct net_device *netdev)
 
 	if (err) {
 		if (lowpan_cb(skb)->chan) {
-			BT_DBG("xmit %s to %pMR type %d IP %pI6c chan %p",
+			BT_INFO("xmit %s to %pMR type %d IP %pI6c chan %p",
 			       netdev->name, &addr, addr_type,
 			       &lowpan_cb(skb)->addr, lowpan_cb(skb)->chan);
 			err = send_pkt(lowpan_cb(skb)->chan, skb, netdev);
@@ -567,7 +567,7 @@ static netdev_tx_t bt_xmit(struct sk_buff *skb, struct net_device *netdev)
 	dev_kfree_skb(skb);
 
 	if (err)
-		BT_DBG("ERROR: xmit failed (%d)", err);
+		BT_INFO("ERROR: xmit failed (%d)", err);
 
 	return err < 0 ? NET_XMIT_DROP : err;
 }
@@ -719,7 +719,7 @@ static int setup_netdev(struct l2cap_chan *chan, struct lowpan_btle_dev **dev)
 		goto out;
 	}
 
-	BT_DBG("ifindex %d peer bdaddr %pMR type %d my addr %pMR type %d",
+	BT_INFO("ifindex %d peer bdaddr %pMR type %d my addr %pMR type %d",
 	       netdev->ifindex, &chan->dst, chan->dst_type,
 	       &chan->src, chan->src_type);
 	set_bit(__LINK_STATE_PRESENT, &netdev->state);
@@ -737,7 +737,7 @@ static inline void chan_ready_cb(struct l2cap_chan *chan)
 
 	dev = lookup_dev(chan->conn);
 
-	BT_DBG("chan %p conn %p dev %p", chan, chan->conn, dev);
+	BT_INFO("chan %p conn %p dev %p", chan, chan->conn, dev);
 
 	if (!dev) {
 		if (setup_netdev(chan, &dev) < 0) {
@@ -764,7 +764,7 @@ static inline struct l2cap_chan *chan_new_conn_cb(struct l2cap_chan *pchan)
 
 	chan->ops = pchan->ops;
 
-	BT_DBG("chan %p pchan %p", chan, pchan);
+	BT_INFO("chan %p pchan %p", chan, pchan);
 
 	return chan;
 }
@@ -788,7 +788,7 @@ static void chan_close_cb(struct l2cap_chan *chan)
 	int err = -ENOENT;
 	bool last = false, remove = true;
 
-	BT_DBG("chan %p conn %p", chan, chan->conn);
+	BT_INFO("chan %p conn %p", chan, chan->conn);
 
 	if (chan->conn && chan->conn->hcon) {
 		if (!is_bt_6lowpan(chan->conn->hcon))
@@ -809,9 +809,9 @@ static void chan_close_cb(struct l2cap_chan *chan)
 			last = peer_del(dev, peer);
 			err = 0;
 
-			BT_DBG("dev %p removing %speer %p", dev,
+			BT_INFO("dev %p removing %speer %p", dev,
 			       last ? "last " : "1 ", peer);
-			BT_DBG("chan %p orig refcnt %d", chan,
+			BT_INFO("chan %p orig refcnt %d", chan,
 			       kref_read(&chan->kref));
 
 			l2cap_chan_put(chan);
@@ -839,7 +839,7 @@ static void chan_close_cb(struct l2cap_chan *chan)
 
 static void chan_state_change_cb(struct l2cap_chan *chan, int state, int err)
 {
-	BT_DBG("chan %p conn %p state %s err %d", chan, chan->conn,
+	BT_INFO("chan %p conn %p state %s err %d", chan, chan->conn,
 	       state_to_string(state), err);
 }
 
@@ -858,7 +858,7 @@ static void chan_suspend_cb(struct l2cap_chan *chan)
 {
 	struct lowpan_btle_dev *dev;
 
-	BT_DBG("chan %p suspend", chan);
+	BT_INFO("chan %p suspend", chan);
 
 	dev = lookup_dev(chan->conn);
 	if (!dev || !dev->netdev)
@@ -871,7 +871,7 @@ static void chan_resume_cb(struct l2cap_chan *chan)
 {
 	struct lowpan_btle_dev *dev;
 
-	BT_DBG("chan %p resume", chan);
+	BT_INFO("chan %p resume", chan);
 
 	dev = lookup_dev(chan->conn);
 	if (!dev || !dev->netdev)
@@ -924,7 +924,7 @@ static int bt_6lowpan_connect(bdaddr_t *addr, u8 dst_type)
 	err = l2cap_chan_connect(chan, cpu_to_le16(L2CAP_PSM_IPSP), 0,
 				 addr, dst_type);
 
-	BT_DBG("chan %p err %d", chan, err);
+	BT_INFO("chan %p err %d", chan, err);
 	if (err < 0)
 		l2cap_chan_put(chan);
 
@@ -935,13 +935,13 @@ static int bt_6lowpan_disconnect(struct l2cap_conn *conn, u8 dst_type)
 {
 	struct lowpan_peer *peer;
 
-	BT_DBG("conn %p dst type %d", conn, dst_type);
+	BT_INFO("conn %p dst type %d", conn, dst_type);
 
 	peer = lookup_peer(conn);
 	if (!peer)
 		return -ENOENT;
 
-	BT_DBG("peer %p chan %p", peer, peer->chan);
+	BT_INFO("peer %p chan %p", peer, peer->chan);
 
 	l2cap_chan_close(peer->chan, ENOENT);
 
@@ -967,7 +967,7 @@ static struct l2cap_chan *bt_6lowpan_listen(void)
 
 	atomic_set(&chan->nesting, L2CAP_NESTING_PARENT);
 
-	BT_DBG("chan %p src type %d", chan, chan->src_type);
+	BT_INFO("chan %p src type %d", chan, chan->src_type);
 
 	err = l2cap_add_psm(chan, addr, cpu_to_le16(L2CAP_PSM_IPSP));
 	if (err) {
@@ -1008,7 +1008,7 @@ static int get_l2cap_conn(char *buf, bdaddr_t *addr, u8 *addr_type,
 
 	*conn = (struct l2cap_conn *)hcon->l2cap_data;
 
-	BT_DBG("conn %p dst %pMR type %d", *conn, &hcon->dst, hcon->dst_type);
+	BT_INFO("conn %p dst %pMR type %d", *conn, &hcon->dst, hcon->dst_type);
 
 	return 0;
 }
@@ -1146,11 +1146,11 @@ static ssize_t lowpan_control_write(struct file *fp,
 
 			peer = lookup_peer(conn);
 			if (peer) {
-				BT_DBG("6LoWPAN connection already exists");
+				BT_INFO("6LoWPAN connection already exists");
 				return -EALREADY;
 			}
 
-			BT_DBG("conn %p dst %pMR type %d user %d", conn,
+			BT_INFO("conn %p dst %pMR type %d user %d", conn,
 			       &conn->hcon->dst, conn->hcon->dst_type,
 			       addr_type);
 		}
@@ -1237,7 +1237,7 @@ static void disconnect_devices(void)
 
 	list_for_each_entry_safe(entry, tmp, &devices, list) {
 		ifdown(entry->netdev);
-		BT_DBG("Unregistering netdev %s %p",
+		BT_INFO("Unregistering netdev %s %p",
 		       entry->netdev->name, entry->netdev);
 		lowpan_unregister_netdev(entry->netdev);
 		kfree(entry);
@@ -1258,7 +1258,7 @@ static int device_event(struct notifier_block *unused,
 		spin_lock(&devices_lock);
 		list_for_each_entry(entry, &bt_6lowpan_devices, list) {
 			if (entry->netdev == netdev) {
-				BT_DBG("Unregistered netdev %s %p",
+				BT_INFO("Unregistered netdev %s %p",
 				       netdev->name, netdev);
 				list_del(&entry->list);
 				break;
diff --git a/net/bluetooth/a2mp.c b/net/bluetooth/a2mp.c
index 463bad58478b..ac1f80efd480 100644
--- a/net/bluetooth/a2mp.c
+++ b/net/bluetooth/a2mp.c
@@ -120,7 +120,7 @@ static int a2mp_command_rej(struct amp_mgr *mgr, struct sk_buff *skb,
 	if (le16_to_cpu(hdr->len) < sizeof(*rej))
 		return -EINVAL;
 
-	BT_DBG("ident %d reason %d", hdr->ident, le16_to_cpu(rej->reason));
+	BT_INFO("ident %d reason %d", hdr->ident, le16_to_cpu(rej->reason));
 
 	skb_pull(skb, sizeof(*rej));
 
@@ -144,7 +144,7 @@ static int a2mp_discover_req(struct amp_mgr *mgr, struct sk_buff *skb,
 
 	ext_feat = le16_to_cpu(req->ext_feat);
 
-	BT_DBG("mtu %d efm 0x%4.4x", le16_to_cpu(req->mtu), ext_feat);
+	BT_INFO("mtu %d efm 0x%4.4x", le16_to_cpu(req->mtu), ext_feat);
 
 	/* check that packet is not broken for now */
 	while (ext_feat & A2MP_FEAT_EXT) {
@@ -152,7 +152,7 @@ static int a2mp_discover_req(struct amp_mgr *mgr, struct sk_buff *skb,
 			return -EINVAL;
 
 		ext_feat = get_unaligned_le16(skb->data);
-		BT_DBG("efm 0x%4.4x", ext_feat);
+		BT_INFO("efm 0x%4.4x", ext_feat);
 		len -= sizeof(ext_feat);
 		skb_pull(skb, sizeof(ext_feat));
 	}
@@ -204,7 +204,7 @@ static int a2mp_discover_rsp(struct amp_mgr *mgr, struct sk_buff *skb,
 
 	ext_feat = le16_to_cpu(rsp->ext_feat);
 
-	BT_DBG("mtu %d efm 0x%4.4x", le16_to_cpu(rsp->mtu), ext_feat);
+	BT_INFO("mtu %d efm 0x%4.4x", le16_to_cpu(rsp->mtu), ext_feat);
 
 	/* check that packet is not broken for now */
 	while (ext_feat & A2MP_FEAT_EXT) {
@@ -212,14 +212,14 @@ static int a2mp_discover_rsp(struct amp_mgr *mgr, struct sk_buff *skb,
 			return -EINVAL;
 
 		ext_feat = get_unaligned_le16(skb->data);
-		BT_DBG("efm 0x%4.4x", ext_feat);
+		BT_INFO("efm 0x%4.4x", ext_feat);
 		len -= sizeof(ext_feat);
 		skb_pull(skb, sizeof(ext_feat));
 	}
 
 	cl = (void *) skb->data;
 	while (len >= sizeof(*cl)) {
-		BT_DBG("Remote AMP id %d type %d status %d", cl->id, cl->type,
+		BT_INFO("Remote AMP id %d type %d status %d", cl->id, cl->type,
 		       cl->status);
 
 		if (cl->id != AMP_ID_BREDR && cl->type != AMP_TYPE_BREDR) {
@@ -247,7 +247,7 @@ static int a2mp_discover_rsp(struct amp_mgr *mgr, struct sk_buff *skb,
 
 		list_for_each_entry(chan, &conn->chan_l, list) {
 
-			BT_DBG("chan %p state %s", chan,
+			BT_INFO("chan %p state %s", chan,
 			       state_to_string(chan->state));
 
 			if (chan->scid == L2CAP_CID_A2MP)
@@ -273,7 +273,7 @@ static int a2mp_change_notify(struct amp_mgr *mgr, struct sk_buff *skb,
 	struct a2mp_cl *cl = (void *) skb->data;
 
 	while (skb->len >= sizeof(*cl)) {
-		BT_DBG("Controller id %d type %d status %d", cl->id, cl->type,
+		BT_INFO("Controller id %d type %d status %d", cl->id, cl->type,
 		       cl->status);
 		cl = skb_pull(skb, sizeof(*cl));
 	}
@@ -286,7 +286,7 @@ static int a2mp_change_notify(struct amp_mgr *mgr, struct sk_buff *skb,
 static void read_local_amp_info_complete(struct hci_dev *hdev, u8 status,
 					 u16 opcode)
 {
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	a2mp_send_getinfo_rsp(hdev);
 }
@@ -302,7 +302,7 @@ static int a2mp_getinfo_req(struct amp_mgr *mgr, struct sk_buff *skb,
 	if (le16_to_cpu(hdr->len) < sizeof(*req))
 		return -EINVAL;
 
-	BT_DBG("id %d", req->id);
+	BT_INFO("id %d", req->id);
 
 	hdev = hci_dev_get(req->id);
 	if (!hdev || hdev->dev_type != HCI_AMP) {
@@ -344,7 +344,7 @@ static int a2mp_getinfo_rsp(struct amp_mgr *mgr, struct sk_buff *skb,
 	if (le16_to_cpu(hdr->len) < sizeof(*rsp))
 		return -EINVAL;
 
-	BT_DBG("id %d status 0x%2.2x", rsp->id, rsp->status);
+	BT_INFO("id %d status 0x%2.2x", rsp->id, rsp->status);
 
 	if (rsp->status)
 		return -EINVAL;
@@ -373,7 +373,7 @@ static int a2mp_getampassoc_req(struct amp_mgr *mgr, struct sk_buff *skb,
 	if (le16_to_cpu(hdr->len) < sizeof(*req))
 		return -EINVAL;
 
-	BT_DBG("id %d", req->id);
+	BT_INFO("id %d", req->id);
 
 	/* Make sure that other request is not processed */
 	tmp = amp_mgr_lookup_by_state(READ_LOC_AMP_ASSOC);
@@ -423,7 +423,7 @@ static int a2mp_getampassoc_rsp(struct amp_mgr *mgr, struct sk_buff *skb,
 
 	assoc_len = len - sizeof(*rsp);
 
-	BT_DBG("id %d status 0x%2.2x assoc len %zu", rsp->id, rsp->status,
+	BT_INFO("id %d status 0x%2.2x assoc len %zu", rsp->id, rsp->status,
 	       assoc_len);
 
 	if (rsp->status)
@@ -457,7 +457,7 @@ static int a2mp_getampassoc_rsp(struct amp_mgr *mgr, struct sk_buff *skb,
 	if (!hcon)
 		goto done;
 
-	BT_DBG("Created hcon %p: loc:%d -> rem:%d", hcon, hdev->id, rsp->id);
+	BT_INFO("Created hcon %p: loc:%d -> rem:%d", hcon, hdev->id, rsp->id);
 
 	mgr->bredr_chan->remote_amp_id = rsp->id;
 
@@ -481,7 +481,7 @@ static int a2mp_createphyslink_req(struct amp_mgr *mgr, struct sk_buff *skb,
 	if (le16_to_cpu(hdr->len) < sizeof(*req))
 		return -EINVAL;
 
-	BT_DBG("local_id %d, remote_id %d", req->local_id, req->remote_id);
+	BT_INFO("local_id %d, remote_id %d", req->local_id, req->remote_id);
 
 	memset(&rsp, 0, sizeof(rsp));
 
@@ -562,7 +562,7 @@ static int a2mp_discphyslink_req(struct amp_mgr *mgr, struct sk_buff *skb,
 	if (le16_to_cpu(hdr->len) < sizeof(*req))
 		return -EINVAL;
 
-	BT_DBG("local_id %d remote_id %d", req->local_id, req->remote_id);
+	BT_INFO("local_id %d remote_id %d", req->local_id, req->remote_id);
 
 	memset(&rsp, 0, sizeof(rsp));
 
@@ -599,7 +599,7 @@ static int a2mp_discphyslink_req(struct amp_mgr *mgr, struct sk_buff *skb,
 static inline int a2mp_cmd_rsp(struct amp_mgr *mgr, struct sk_buff *skb,
 			       struct a2mp_cmd *hdr)
 {
-	BT_DBG("ident %d code 0x%2.2x", hdr->ident, hdr->code);
+	BT_INFO("ident %d code 0x%2.2x", hdr->ident, hdr->code);
 
 	skb_pull(skb, le16_to_cpu(hdr->len));
 	return 0;
@@ -620,7 +620,7 @@ static int a2mp_chan_recv_cb(struct l2cap_chan *chan, struct sk_buff *skb)
 		hdr = (void *) skb->data;
 		len = le16_to_cpu(hdr->len);
 
-		BT_DBG("code 0x%2.2x id %d len %u", hdr->code, hdr->ident, len);
+		BT_INFO("code 0x%2.2x id %d len %u", hdr->code, hdr->ident, len);
 
 		skb_pull(skb, sizeof(*hdr));
 
@@ -693,7 +693,7 @@ static int a2mp_chan_recv_cb(struct l2cap_chan *chan, struct sk_buff *skb)
 		rej.reason = cpu_to_le16(0);
 		hdr = (void *) skb->data;
 
-		BT_DBG("Send A2MP Rej: cmd 0x%2.2x err %d", hdr->code, err);
+		BT_INFO("Send A2MP Rej: cmd 0x%2.2x err %d", hdr->code, err);
 
 		a2mp_send(mgr, A2MP_COMMAND_REJ, hdr->ident, sizeof(rej),
 			  &rej);
@@ -721,7 +721,7 @@ static void a2mp_chan_state_change_cb(struct l2cap_chan *chan, int state,
 	if (!mgr)
 		return;
 
-	BT_DBG("chan %p state %s", chan, state_to_string(state));
+	BT_INFO("chan %p state %s", chan, state_to_string(state));
 
 	chan->state = state;
 
@@ -772,7 +772,7 @@ static struct l2cap_chan *a2mp_chan_open(struct l2cap_conn *conn, bool locked)
 	if (!chan)
 		return NULL;
 
-	BT_DBG("chan %p", chan);
+	BT_INFO("chan %p", chan);
 
 	chan->chan_type = L2CAP_CHAN_FIXED;
 	chan->scid = L2CAP_CID_A2MP;
@@ -818,7 +818,7 @@ static struct l2cap_chan *a2mp_chan_open(struct l2cap_conn *conn, bool locked)
 /* AMP Manager functions */
 struct amp_mgr *amp_mgr_get(struct amp_mgr *mgr)
 {
-	BT_DBG("mgr %p orig refcnt %d", mgr, kref_read(&mgr->kref));
+	BT_INFO("mgr %p orig refcnt %d", mgr, kref_read(&mgr->kref));
 
 	kref_get(&mgr->kref);
 
@@ -829,7 +829,7 @@ static void amp_mgr_destroy(struct kref *kref)
 {
 	struct amp_mgr *mgr = container_of(kref, struct amp_mgr, kref);
 
-	BT_DBG("mgr %p", mgr);
+	BT_INFO("mgr %p", mgr);
 
 	mutex_lock(&amp_mgr_list_lock);
 	list_del(&mgr->list);
@@ -841,7 +841,7 @@ static void amp_mgr_destroy(struct kref *kref)
 
 int amp_mgr_put(struct amp_mgr *mgr)
 {
-	BT_DBG("mgr %p orig refcnt %d", mgr, kref_read(&mgr->kref));
+	BT_INFO("mgr %p orig refcnt %d", mgr, kref_read(&mgr->kref));
 
 	return kref_put(&mgr->kref, &amp_mgr_destroy);
 }
@@ -855,7 +855,7 @@ static struct amp_mgr *amp_mgr_create(struct l2cap_conn *conn, bool locked)
 	if (!mgr)
 		return NULL;
 
-	BT_DBG("conn %p mgr %p", conn, mgr);
+	BT_INFO("conn %p mgr %p", conn, mgr);
 
 	mgr->l2cap_conn = conn;
 
@@ -897,7 +897,7 @@ struct l2cap_chan *a2mp_channel_create(struct l2cap_conn *conn,
 		return NULL;
 	}
 
-	BT_DBG("mgr: %p chan %p", mgr, mgr->a2mp_chan);
+	BT_INFO("mgr: %p chan %p", mgr, mgr->a2mp_chan);
 
 	return mgr->a2mp_chan;
 }
@@ -911,7 +911,7 @@ void a2mp_send_getinfo_rsp(struct hci_dev *hdev)
 	if (!mgr)
 		return;
 
-	BT_DBG("%s mgr %p", hdev->name, mgr);
+	BT_INFO("%s mgr %p", hdev->name, mgr);
 
 	memset(&rsp, 0, sizeof(rsp));
 
@@ -942,7 +942,7 @@ void a2mp_send_getampassoc_rsp(struct hci_dev *hdev, u8 status)
 	if (!mgr)
 		return;
 
-	BT_DBG("%s mgr %p", hdev->name, mgr);
+	BT_INFO("%s mgr %p", hdev->name, mgr);
 
 	len = sizeof(struct a2mp_amp_assoc_rsp) + loc_assoc->len;
 	rsp = kzalloc(len, GFP_KERNEL);
@@ -979,7 +979,7 @@ void a2mp_send_create_phy_link_req(struct hci_dev *hdev, u8 status)
 
 	len = sizeof(*req) + loc_assoc->len;
 
-	BT_DBG("%s mgr %p assoc_len %zu", hdev->name, mgr, len);
+	BT_INFO("%s mgr %p assoc_len %zu", hdev->name, mgr, len);
 
 	req = kzalloc(len, GFP_KERNEL);
 	if (!req) {
@@ -1022,7 +1022,7 @@ void a2mp_send_create_phy_link_rsp(struct hci_dev *hdev, u8 status)
 		rsp.status = A2MP_STATUS_SUCCESS;
 	}
 
-	BT_DBG("%s mgr %p hs_hcon %p status %u", hdev->name, mgr, hs_hcon,
+	BT_INFO("%s mgr %p hs_hcon %p status %u", hdev->name, mgr, hs_hcon,
 	       status);
 
 	rsp.local_id = hdev->id;
@@ -1036,7 +1036,7 @@ void a2mp_discover_amp(struct l2cap_chan *chan)
 	struct amp_mgr *mgr = conn->hcon->amp_mgr;
 	struct a2mp_discov_req req;
 
-	BT_DBG("chan %p conn %p mgr %p", chan, conn, mgr);
+	BT_INFO("chan %p conn %p mgr %p", chan, conn, mgr);
 
 	if (!mgr) {
 		mgr = amp_mgr_create(conn, true);
diff --git a/net/bluetooth/af_bluetooth.c b/net/bluetooth/af_bluetooth.c
index 5f508c50649d..71e8bb468397 100644
--- a/net/bluetooth/af_bluetooth.c
+++ b/net/bluetooth/af_bluetooth.c
@@ -156,7 +156,7 @@ EXPORT_SYMBOL(bt_sock_unlink);
 
 void bt_accept_enqueue(struct sock *parent, struct sock *sk, bool bh)
 {
-	BT_DBG("parent %p, sk %p", parent, sk);
+	BT_INFO("parent %p, sk %p", parent, sk);
 
 	sock_hold(sk);
 
@@ -182,7 +182,7 @@ EXPORT_SYMBOL(bt_accept_enqueue);
  */
 void bt_accept_unlink(struct sock *sk)
 {
-	BT_DBG("sk %p state %d", sk, sk->sk_state);
+	BT_INFO("sk %p state %d", sk, sk->sk_state);
 
 	list_del_init(&bt_sk(sk)->accept_q);
 	bt_sk(sk)->parent->sk_ack_backlog--;
@@ -196,7 +196,7 @@ struct sock *bt_accept_dequeue(struct sock *parent, struct socket *newsock)
 	struct bt_sock *s, *n;
 	struct sock *sk;
 
-	BT_DBG("parent %p", parent);
+	BT_INFO("parent %p", parent);
 
 restart:
 	list_for_each_entry_safe(s, n, &bt_sk(parent)->accept_q, accept_q) {
@@ -210,7 +210,7 @@ struct sock *bt_accept_dequeue(struct sock *parent, struct socket *newsock)
 		 * bt_accept_unlink() due to serialisation caused by sk locking
 		 */
 		if (!bt_sk(sk)->parent) {
-			BT_DBG("sk %p, already unlinked", sk);
+			BT_INFO("sk %p, already unlinked", sk);
 			release_sock(sk);
 			sock_put(sk);
 
@@ -258,7 +258,7 @@ int bt_sock_recvmsg(struct socket *sock, struct msghdr *msg, size_t len,
 	size_t skblen;
 	int err;
 
-	BT_DBG("sock %p sk %p len %zu", sock, sk, len);
+	BT_INFO("sock %p sk %p len %zu", sock, sk, len);
 
 	if (flags & MSG_OOB)
 		return -EOPNOTSUPP;
@@ -337,7 +337,7 @@ int bt_sock_stream_recvmsg(struct socket *sock, struct msghdr *msg,
 	if (flags & MSG_OOB)
 		return -EOPNOTSUPP;
 
-	BT_DBG("sk %p size %zu", sk, size);
+	BT_INFO("sk %p size %zu", sk, size);
 
 	lock_sock(sk);
 
@@ -453,7 +453,7 @@ __poll_t bt_sock_poll(struct file *file, struct socket *sock,
 	struct sock *sk = sock->sk;
 	__poll_t mask = 0;
 
-	BT_DBG("sock %p, sk %p", sock, sk);
+	BT_INFO("sock %p, sk %p", sock, sk);
 
 	poll_wait(file, sk_sleep(sk), wait);
 
@@ -497,7 +497,7 @@ int bt_sock_ioctl(struct socket *sock, unsigned int cmd, unsigned long arg)
 	long amount;
 	int err;
 
-	BT_DBG("sk %p cmd %x arg %lx", sk, cmd, arg);
+	BT_INFO("sk %p cmd %x arg %lx", sk, cmd, arg);
 
 	switch (cmd) {
 	case TIOCOUTQ:
@@ -536,7 +536,7 @@ int bt_sock_wait_state(struct sock *sk, int state, unsigned long timeo)
 	DECLARE_WAITQUEUE(wait, current);
 	int err = 0;
 
-	BT_DBG("sk %p", sk);
+	BT_INFO("sk %p", sk);
 
 	add_wait_queue(sk_sleep(sk), &wait);
 	set_current_state(TASK_INTERRUPTIBLE);
@@ -573,7 +573,7 @@ int bt_sock_wait_ready(struct sock *sk, unsigned long flags)
 	unsigned long timeo;
 	int err = 0;
 
-	BT_DBG("sk %p", sk);
+	BT_INFO("sk %p", sk);
 
 	timeo = sock_sndtimeo(sk, flags & O_NONBLOCK);
 
diff --git a/net/bluetooth/amp.c b/net/bluetooth/amp.c
index be2d469d6369..083357b538a7 100644
--- a/net/bluetooth/amp.c
+++ b/net/bluetooth/amp.c
@@ -16,7 +16,7 @@
 /* Remote AMP Controllers interface */
 void amp_ctrl_get(struct amp_ctrl *ctrl)
 {
-	BT_DBG("ctrl %p orig refcnt %d", ctrl,
+	BT_INFO("ctrl %p orig refcnt %d", ctrl,
 	       kref_read(&ctrl->kref));
 
 	kref_get(&ctrl->kref);
@@ -26,7 +26,7 @@ static void amp_ctrl_destroy(struct kref *kref)
 {
 	struct amp_ctrl *ctrl = container_of(kref, struct amp_ctrl, kref);
 
-	BT_DBG("ctrl %p", ctrl);
+	BT_INFO("ctrl %p", ctrl);
 
 	kfree(ctrl->assoc);
 	kfree(ctrl);
@@ -34,7 +34,7 @@ static void amp_ctrl_destroy(struct kref *kref)
 
 int amp_ctrl_put(struct amp_ctrl *ctrl)
 {
-	BT_DBG("ctrl %p orig refcnt %d", ctrl,
+	BT_INFO("ctrl %p orig refcnt %d", ctrl,
 	       kref_read(&ctrl->kref));
 
 	return kref_put(&ctrl->kref, &amp_ctrl_destroy);
@@ -55,7 +55,7 @@ struct amp_ctrl *amp_ctrl_add(struct amp_mgr *mgr, u8 id)
 	list_add(&ctrl->list, &mgr->amp_ctrls);
 	mutex_unlock(&mgr->amp_ctrls_lock);
 
-	BT_DBG("mgr %p ctrl %p", mgr, ctrl);
+	BT_INFO("mgr %p ctrl %p", mgr, ctrl);
 
 	return ctrl;
 }
@@ -64,7 +64,7 @@ void amp_ctrl_list_flush(struct amp_mgr *mgr)
 {
 	struct amp_ctrl *ctrl, *n;
 
-	BT_DBG("mgr %p", mgr);
+	BT_INFO("mgr %p", mgr);
 
 	mutex_lock(&mgr->amp_ctrls_lock);
 	list_for_each_entry_safe(ctrl, n, &mgr->amp_ctrls, list) {
@@ -78,7 +78,7 @@ struct amp_ctrl *amp_ctrl_lookup(struct amp_mgr *mgr, u8 id)
 {
 	struct amp_ctrl *ctrl;
 
-	BT_DBG("mgr %p id %d", mgr, id);
+	BT_INFO("mgr %p id %d", mgr, id);
 
 	mutex_lock(&mgr->amp_ctrls_lock);
 	list_for_each_entry(ctrl, &mgr->amp_ctrls, list) {
@@ -113,7 +113,7 @@ struct hci_conn *phylink_add(struct hci_dev *hdev, struct amp_mgr *mgr,
 	if (!hcon)
 		return NULL;
 
-	BT_DBG("hcon %p dst %pMR", hcon, dst);
+	BT_INFO("hcon %p dst %pMR", hcon, dst);
 
 	hcon->state = BT_CONNECT;
 	hcon->attempt++;
@@ -136,13 +136,13 @@ static int hmac_sha256(u8 *key, u8 ksize, char *plaintext, u8 psize, u8 *output)
 
 	tfm = crypto_alloc_shash("hmac(sha256)", 0, 0);
 	if (IS_ERR(tfm)) {
-		BT_DBG("crypto_alloc_ahash failed: err %ld", PTR_ERR(tfm));
+		BT_INFO("crypto_alloc_ahash failed: err %ld", PTR_ERR(tfm));
 		return PTR_ERR(tfm);
 	}
 
 	ret = crypto_shash_setkey(tfm, key, ksize);
 	if (ret) {
-		BT_DBG("crypto_ahash_setkey failed: err %d", ret);
+		BT_INFO("crypto_ahash_setkey failed: err %d", ret);
 		goto failed;
 	}
 
@@ -175,7 +175,7 @@ int phylink_gen_key(struct hci_conn *conn, u8 *data, u8 *len, u8 *type)
 	if (!hci_conn_check_link_mode(conn))
 		return -EACCES;
 
-	BT_DBG("conn %p key_type %d", conn, conn->key_type);
+	BT_INFO("conn %p key_type %d", conn, conn->key_type);
 
 	/* Legacy key */
 	if (conn->key_type < 3) {
@@ -188,7 +188,7 @@ int phylink_gen_key(struct hci_conn *conn, u8 *data, u8 *len, u8 *type)
 
 	key = hci_find_link_key(hdev, &conn->dst);
 	if (!key) {
-		BT_DBG("No Link key for conn %p dst %pMR", conn, &conn->dst);
+		BT_INFO("No Link key for conn %p dst %pMR", conn, &conn->dst);
 		return -EACCES;
 	}
 
@@ -204,7 +204,7 @@ int phylink_gen_key(struct hci_conn *conn, u8 *data, u8 *len, u8 *type)
 	}
 
 	if (conn->key_type == HCI_LK_DEBUG_COMBINATION) {
-		BT_DBG("Use Generic AMP Key (gamp)");
+		BT_INFO("Use Generic AMP Key (gamp)");
 		memcpy(data, gamp_key, HCI_AMP_LINK_KEY_SIZE);
 		return err;
 	}
@@ -220,7 +220,7 @@ static void read_local_amp_assoc_complete(struct hci_dev *hdev, u8 status,
 	struct amp_assoc *assoc = &hdev->loc_assoc;
 	size_t rem_len, frag_len;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	if (rp->status)
 		goto send_rsp;
@@ -229,7 +229,7 @@ static void read_local_amp_assoc_complete(struct hci_dev *hdev, u8 status,
 	rem_len = __le16_to_cpu(rp->rem_len);
 
 	if (rem_len > frag_len) {
-		BT_DBG("frag_len %zu rem_len %zu", frag_len, rem_len);
+		BT_INFO("frag_len %zu rem_len %zu", frag_len, rem_len);
 
 		memcpy(assoc->data + assoc->offset, rp->frag, frag_len);
 		assoc->offset += frag_len;
@@ -257,7 +257,7 @@ void amp_read_loc_assoc_frag(struct hci_dev *hdev, u8 phy_handle)
 	struct hci_request req;
 	int err;
 
-	BT_DBG("%s handle %d", hdev->name, phy_handle);
+	BT_INFO("%s handle %d", hdev->name, phy_handle);
 
 	cp.phy_handle = phy_handle;
 	cp.max_len = cpu_to_le16(hdev->amp_assoc_size);
@@ -319,7 +319,7 @@ static void write_remote_amp_assoc_complete(struct hci_dev *hdev, u8 status,
 {
 	struct hci_rp_write_remote_amp_assoc *rp = (void *)skb->data;
 
-	BT_DBG("%s status 0x%2.2x phy_handle 0x%2.2x",
+	BT_INFO("%s status 0x%2.2x phy_handle 0x%2.2x",
 	       hdev->name, rp->status, rp->phy_handle);
 
 	if (rp->status)
@@ -343,7 +343,7 @@ static bool amp_write_rem_assoc_frag(struct hci_dev *hdev,
 		return false;
 
 	if (!ctrl->assoc_rem_len) {
-		BT_DBG("all fragments are written");
+		BT_INFO("all fragments are written");
 		ctrl->assoc_rem_len = ctrl->assoc_len;
 		ctrl->assoc_len_so_far = 0;
 
@@ -360,7 +360,7 @@ static bool amp_write_rem_assoc_frag(struct hci_dev *hdev,
 		return false;
 	}
 
-	BT_DBG("hcon %p ctrl %p frag_len %u assoc_len %u rem_len %u",
+	BT_INFO("hcon %p ctrl %p frag_len %u assoc_len %u rem_len %u",
 	       hcon, ctrl, frag_len, ctrl->assoc_len, ctrl->assoc_rem_len);
 
 	cp->phy_handle = hcon->handle;
@@ -386,7 +386,7 @@ void amp_write_rem_assoc_continue(struct hci_dev *hdev, u8 handle)
 {
 	struct hci_conn *hcon;
 
-	BT_DBG("%s phy handle 0x%2.2x", hdev->name, handle);
+	BT_INFO("%s phy handle 0x%2.2x", hdev->name, handle);
 
 	hcon = hci_conn_hash_lookup_handle(hdev, handle);
 	if (!hcon)
@@ -401,13 +401,13 @@ void amp_write_remote_assoc(struct hci_dev *hdev, u8 handle)
 {
 	struct hci_conn *hcon;
 
-	BT_DBG("%s phy handle 0x%2.2x", hdev->name, handle);
+	BT_INFO("%s phy handle 0x%2.2x", hdev->name, handle);
 
 	hcon = hci_conn_hash_lookup_handle(hdev, handle);
 	if (!hcon)
 		return;
 
-	BT_DBG("%s phy handle 0x%2.2x hcon %p", hdev->name, handle, hcon);
+	BT_INFO("%s phy handle 0x%2.2x hcon %p", hdev->name, handle, hcon);
 
 	amp_write_rem_assoc_frag(hdev, hcon);
 }
@@ -417,7 +417,7 @@ static void create_phylink_complete(struct hci_dev *hdev, u8 status,
 {
 	struct hci_cp_create_phy_link *cp;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	cp = hci_sent_cmd_data(hdev, HCI_OP_CREATE_PHY_LINK);
 	if (!cp)
@@ -446,12 +446,12 @@ void amp_create_phylink(struct hci_dev *hdev, struct amp_mgr *mgr,
 
 	cp.phy_handle = hcon->handle;
 
-	BT_DBG("%s hcon %p phy handle 0x%2.2x", hdev->name, hcon,
+	BT_INFO("%s hcon %p phy handle 0x%2.2x", hdev->name, hcon,
 	       hcon->handle);
 
 	if (phylink_gen_key(mgr->l2cap_conn->hcon, cp.key, &cp.key_len,
 			    &cp.key_type)) {
-		BT_DBG("Cannot create link key");
+		BT_INFO("Cannot create link key");
 		return;
 	}
 
@@ -465,7 +465,7 @@ static void accept_phylink_complete(struct hci_dev *hdev, u8 status,
 {
 	struct hci_cp_accept_phy_link *cp;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	if (status)
 		return;
@@ -485,12 +485,12 @@ void amp_accept_phylink(struct hci_dev *hdev, struct amp_mgr *mgr,
 
 	cp.phy_handle = hcon->handle;
 
-	BT_DBG("%s hcon %p phy handle 0x%2.2x", hdev->name, hcon,
+	BT_INFO("%s hcon %p phy handle 0x%2.2x", hdev->name, hcon,
 	       hcon->handle);
 
 	if (phylink_gen_key(mgr->l2cap_conn->hcon, cp.key, &cp.key_len,
 			    &cp.key_type)) {
-		BT_DBG("Cannot create link key");
+		BT_INFO("Cannot create link key");
 		return;
 	}
 
@@ -505,7 +505,7 @@ void amp_physical_cfm(struct hci_conn *bredr_hcon, struct hci_conn *hs_hcon)
 	struct amp_mgr *mgr = hs_hcon->amp_mgr;
 	struct l2cap_chan *bredr_chan;
 
-	BT_DBG("bredr_hcon %p hs_hcon %p mgr %p", bredr_hcon, hs_hcon, mgr);
+	BT_INFO("bredr_hcon %p hs_hcon %p mgr %p", bredr_hcon, hs_hcon, mgr);
 
 	if (!bredr_hdev || !mgr || !mgr->bredr_chan)
 		return;
@@ -533,7 +533,7 @@ void amp_create_logical_link(struct l2cap_chan *chan)
 	struct hci_cp_create_accept_logical_link cp;
 	struct hci_dev *hdev;
 
-	BT_DBG("chan %p hs_hcon %p dst %pMR", chan, hs_hcon,
+	BT_INFO("chan %p hs_hcon %p dst %pMR", chan, hs_hcon,
 	       &chan->conn->hcon->dst);
 
 	if (!hs_hcon)
@@ -575,7 +575,7 @@ void amp_disconnect_logical_link(struct hci_chan *hchan)
 	struct hci_cp_disconn_logical_link cp;
 
 	if (hcon->state != BT_CONNECTED) {
-		BT_DBG("hchan %p not connected", hchan);
+		BT_INFO("hchan %p not connected", hchan);
 		return;
 	}
 
@@ -585,7 +585,7 @@ void amp_disconnect_logical_link(struct hci_chan *hchan)
 
 void amp_destroy_logical_link(struct hci_chan *hchan, u8 reason)
 {
-	BT_DBG("hchan %p", hchan);
+	BT_INFO("hchan %p", hchan);
 
 	hci_chan_del(hchan);
 }
diff --git a/net/bluetooth/hci_conn.c b/net/bluetooth/hci_conn.c
index ee57fa20bac3..6aa7f9c2556c 100644
--- a/net/bluetooth/hci_conn.c
+++ b/net/bluetooth/hci_conn.c
@@ -141,7 +141,7 @@ static void le_scan_cleanup(struct work_struct *work)
 	struct hci_dev *hdev = conn->hdev;
 	struct hci_conn *c = NULL;
 
-	BT_DBG("%s hcon %p", hdev->name, conn);
+	BT_INFO("%s hcon %p", hdev->name, conn);
 
 	hci_dev_lock(hdev);
 
@@ -165,7 +165,7 @@ static void le_scan_cleanup(struct work_struct *work)
 
 static void hci_connect_le_scan_remove(struct hci_conn *conn)
 {
-	BT_DBG("%s hcon %p", conn->hdev->name, conn);
+	BT_INFO("%s hcon %p", conn->hdev->name, conn);
 
 	/* We can't call hci_conn_del/hci_conn_cleanup here since that
 	 * could deadlock with another hci_conn_del() call that's holding
@@ -191,7 +191,7 @@ static void hci_acl_create_connection(struct hci_conn *conn)
 	struct inquiry_entry *ie;
 	struct hci_cp_create_conn cp;
 
-	BT_DBG("hcon %p", conn);
+	BT_INFO("hcon %p", conn);
 
 	conn->state = BT_CONNECT;
 	conn->out = true;
@@ -230,7 +230,7 @@ static void hci_acl_create_connection(struct hci_conn *conn)
 
 int hci_disconnect(struct hci_conn *conn, __u8 reason)
 {
-	BT_DBG("hcon %p", conn);
+	BT_INFO("hcon %p", conn);
 
 	/* When we are master of an established connection and it enters
 	 * the disconnect timeout, then go ahead and try to read the
@@ -255,7 +255,7 @@ static void hci_add_sco(struct hci_conn *conn, __u16 handle)
 	struct hci_dev *hdev = conn->hdev;
 	struct hci_cp_add_sco cp;
 
-	BT_DBG("hcon %p", conn);
+	BT_INFO("hcon %p", conn);
 
 	conn->state = BT_CONNECT;
 	conn->out = true;
@@ -274,7 +274,7 @@ bool hci_setup_sync(struct hci_conn *conn, __u16 handle)
 	struct hci_cp_setup_sync_conn cp;
 	const struct sco_param *param;
 
-	BT_DBG("hcon %p", conn);
+	BT_INFO("hcon %p", conn);
 
 	conn->state = BT_CONNECT;
 	conn->out = true;
@@ -360,7 +360,7 @@ void hci_le_start_enc(struct hci_conn *conn, __le16 ediv, __le64 rand,
 	struct hci_dev *hdev = conn->hdev;
 	struct hci_cp_le_start_enc cp;
 
-	BT_DBG("hcon %p", conn);
+	BT_INFO("hcon %p", conn);
 
 	memset(&cp, 0, sizeof(cp));
 
@@ -380,7 +380,7 @@ void hci_sco_setup(struct hci_conn *conn, __u8 status)
 	if (!sco)
 		return;
 
-	BT_DBG("hcon %p", conn);
+	BT_INFO("hcon %p", conn);
 
 	if (!status) {
 		if (lmp_esco_capable(conn->hdev))
@@ -399,7 +399,7 @@ static void hci_conn_timeout(struct work_struct *work)
 					     disc_work.work);
 	int refcnt = atomic_read(&conn->refcnt);
 
-	BT_DBG("hcon %p state %s", conn, state_to_string(conn->state));
+	BT_INFO("hcon %p state %s", conn, state_to_string(conn->state));
 
 	WARN_ON(refcnt < 0);
 
@@ -430,7 +430,7 @@ static void hci_conn_idle(struct work_struct *work)
 					     idle_work.work);
 	struct hci_dev *hdev = conn->hdev;
 
-	BT_DBG("hcon %p mode %d", conn, conn->mode);
+	BT_INFO("hcon %p mode %d", conn, conn->mode);
 
 	if (!lmp_sniff_capable(hdev) || !lmp_sniff_capable(conn))
 		return;
@@ -473,7 +473,7 @@ static void le_conn_timeout(struct work_struct *work)
 					     le_conn_timeout.work);
 	struct hci_dev *hdev = conn->hdev;
 
-	BT_DBG("");
+	BT_INFO("");
 
 	/* We could end up here due to having done directed advertising,
 	 * so clean up the state if necessary. This should however only
@@ -496,7 +496,7 @@ struct hci_conn *hci_conn_add(struct hci_dev *hdev, int type, bdaddr_t *dst,
 {
 	struct hci_conn *conn;
 
-	BT_DBG("%s dst %pMR", hdev->name, dst);
+	BT_INFO("%s dst %pMR", hdev->name, dst);
 
 	conn = kzalloc(sizeof(*conn), GFP_KERNEL);
 	if (!conn)
@@ -573,7 +573,7 @@ int hci_conn_del(struct hci_conn *conn)
 {
 	struct hci_dev *hdev = conn->hdev;
 
-	BT_DBG("%s hcon %p handle %d", hdev->name, conn, conn->handle);
+	BT_INFO("%s hcon %p handle %d", hdev->name, conn, conn->handle);
 
 	cancel_delayed_work_sync(&conn->disc_work);
 	cancel_delayed_work_sync(&conn->auto_accept_work);
@@ -621,7 +621,7 @@ struct hci_dev *hci_get_route(bdaddr_t *dst, bdaddr_t *src, uint8_t src_type)
 	int use_src = bacmp(src, BDADDR_ANY);
 	struct hci_dev *hdev = NULL, *d;
 
-	BT_DBG("%pMR -> %pMR", src, dst);
+	BT_INFO("%pMR -> %pMR", src, dst);
 
 	read_lock(&hci_dev_list_lock);
 
@@ -1133,7 +1133,7 @@ static int hci_explicit_conn_params_set(struct hci_dev *hdev,
 
 	params->explicit_connect = true;
 
-	BT_DBG("addr %pMR (type %u) auto_connect %u", addr, addr_type,
+	BT_INFO("addr %pMR (type %u) auto_connect %u", addr, addr_type,
 	       params->auto_connect);
 
 	return 0;
@@ -1170,7 +1170,7 @@ struct hci_conn *hci_connect_le_scan(struct hci_dev *hdev, bdaddr_t *dst,
 		goto done;
 	}
 
-	BT_DBG("requesting refresh of dst_addr");
+	BT_INFO("requesting refresh of dst_addr");
 
 	conn = hci_conn_add(hdev, LE_LINK, dst, HCI_ROLE_MASTER);
 	if (!conn)
@@ -1272,7 +1272,7 @@ struct hci_conn *hci_connect_sco(struct hci_dev *hdev, int type, bdaddr_t *dst,
 /* Check link security requirement */
 int hci_conn_check_link_mode(struct hci_conn *conn)
 {
-	BT_DBG("hcon %p", conn);
+	BT_INFO("hcon %p", conn);
 
 	/* In Secure Connections Only mode, it is required that Secure
 	 * Connections is used and the link is encrypted with AES-CCM
@@ -1312,7 +1312,7 @@ int hci_conn_check_link_mode(struct hci_conn *conn)
 /* Authenticate remote device */
 static int hci_conn_auth(struct hci_conn *conn, __u8 sec_level, __u8 auth_type)
 {
-	BT_DBG("hcon %p", conn);
+	BT_INFO("hcon %p", conn);
 
 	if (conn->pending_sec_level > sec_level)
 		sec_level = conn->pending_sec_level;
@@ -1349,7 +1349,7 @@ static int hci_conn_auth(struct hci_conn *conn, __u8 sec_level, __u8 auth_type)
 /* Encrypt the the link */
 static void hci_conn_encrypt(struct hci_conn *conn)
 {
-	BT_DBG("hcon %p", conn);
+	BT_INFO("hcon %p", conn);
 
 	if (!test_and_set_bit(HCI_CONN_ENCRYPT_PEND, &conn->flags)) {
 		struct hci_cp_set_conn_encrypt cp;
@@ -1364,7 +1364,7 @@ static void hci_conn_encrypt(struct hci_conn *conn)
 int hci_conn_security(struct hci_conn *conn, __u8 sec_level, __u8 auth_type,
 		      bool initiator)
 {
-	BT_DBG("hcon %p", conn);
+	BT_INFO("hcon %p", conn);
 
 	if (conn->type == LE_LINK)
 		return smp_conn_security(conn, sec_level);
@@ -1441,7 +1441,7 @@ EXPORT_SYMBOL(hci_conn_security);
 /* Check secure link requirement */
 int hci_conn_check_secure(struct hci_conn *conn, __u8 sec_level)
 {
-	BT_DBG("hcon %p", conn);
+	BT_INFO("hcon %p", conn);
 
 	/* Accept if non-secure or higher security level is required */
 	if (sec_level != BT_SECURITY_HIGH && sec_level != BT_SECURITY_FIPS)
@@ -1460,7 +1460,7 @@ EXPORT_SYMBOL(hci_conn_check_secure);
 /* Switch role */
 int hci_conn_switch_role(struct hci_conn *conn, __u8 role)
 {
-	BT_DBG("hcon %p", conn);
+	BT_INFO("hcon %p", conn);
 
 	if (role == conn->role)
 		return 1;
@@ -1481,7 +1481,7 @@ void hci_conn_enter_active_mode(struct hci_conn *conn, __u8 force_active)
 {
 	struct hci_dev *hdev = conn->hdev;
 
-	BT_DBG("hcon %p mode %d", conn, conn->mode);
+	BT_INFO("hcon %p mode %d", conn, conn->mode);
 
 	if (conn->mode != HCI_CM_SNIFF)
 		goto timer;
@@ -1507,7 +1507,7 @@ void hci_conn_hash_flush(struct hci_dev *hdev)
 	struct hci_conn_hash *h = &hdev->conn_hash;
 	struct hci_conn *c, *n;
 
-	BT_DBG("hdev %s", hdev->name);
+	BT_INFO("hdev %s", hdev->name);
 
 	list_for_each_entry_safe(c, n, &h->list, list) {
 		c->state = BT_CLOSED;
@@ -1522,7 +1522,7 @@ void hci_conn_check_pending(struct hci_dev *hdev)
 {
 	struct hci_conn *conn;
 
-	BT_DBG("hdev %s", hdev->name);
+	BT_INFO("hdev %s", hdev->name);
 
 	hci_dev_lock(hdev);
 
@@ -1661,10 +1661,10 @@ struct hci_chan *hci_chan_create(struct hci_conn *conn)
 	struct hci_dev *hdev = conn->hdev;
 	struct hci_chan *chan;
 
-	BT_DBG("%s hcon %p", hdev->name, conn);
+	BT_INFO("%s hcon %p", hdev->name, conn);
 
 	if (test_bit(HCI_CONN_DROP, &conn->flags)) {
-		BT_DBG("Refusing to create new hci_chan");
+		BT_INFO("Refusing to create new hci_chan");
 		return NULL;
 	}
 
@@ -1686,7 +1686,7 @@ void hci_chan_del(struct hci_chan *chan)
 	struct hci_conn *conn = chan->conn;
 	struct hci_dev *hdev = conn->hdev;
 
-	BT_DBG("%s hcon %p chan %p", hdev->name, conn, chan);
+	BT_INFO("%s hcon %p chan %p", hdev->name, conn, chan);
 
 	list_del_rcu(&chan->list);
 
@@ -1705,7 +1705,7 @@ void hci_chan_list_flush(struct hci_conn *conn)
 {
 	struct hci_chan *chan, *n;
 
-	BT_DBG("hcon %p", conn);
+	BT_INFO("hcon %p", conn);
 
 	list_for_each_entry_safe(chan, n, &conn->chan_list, list)
 		hci_chan_del(chan);
diff --git a/net/bluetooth/hci_core.c b/net/bluetooth/hci_core.c
index 2edaa601df13..247b1ba4e49e 100644
--- a/net/bluetooth/hci_core.c
+++ b/net/bluetooth/hci_core.c
@@ -184,7 +184,7 @@ static void hci_debugfs_create_basic(struct hci_dev *hdev)
 
 static int hci_reset_req(struct hci_request *req, unsigned long opt)
 {
-	BT_DBG("%s %ld", req->hdev->name, opt);
+	BT_INFO("%s %ld", req->hdev->name, opt);
 
 	/* Reset device */
 	set_bit(HCI_RESET, &req->hdev->flags);
@@ -245,7 +245,8 @@ static int hci_init1_req(struct hci_request *req, unsigned long opt)
 {
 	struct hci_dev *hdev = req->hdev;
 
-	BT_DBG("%s %ld", hdev->name, opt);
+	BT_INFO("hci_init1_req enter");
+	BT_INFO("%s %ld", hdev->name, opt);
 
 	/* Reset */
 	if (!test_bit(HCI_QUIRK_RESET_ON_CLOSE, &hdev->quirks))
@@ -262,7 +263,8 @@ static int hci_init1_req(struct hci_request *req, unsigned long opt)
 		bt_dev_err(hdev, "Unknown device type %d", hdev->dev_type);
 		break;
 	}
-
+	
+	BT_INFO("hci_init1_req exit");
 	return 0;
 }
 
@@ -416,6 +418,8 @@ static int hci_init2_req(struct hci_request *req, unsigned long opt)
 {
 	struct hci_dev *hdev = req->hdev;
 
+	BT_INFO("hci_init2_req enter");
+ 
 	if (hdev->dev_type == HCI_AMP)
 		return amp_init2(req);
 
@@ -492,7 +496,8 @@ static int hci_init2_req(struct hci_request *req, unsigned long opt)
 		hci_req_add(req, HCI_OP_WRITE_AUTH_ENABLE, sizeof(enable),
 			    &enable);
 	}
-
+	
+	BT_INFO("hci_init2_req exit");
 	return 0;
 }
 
@@ -504,12 +509,13 @@ static void hci_setup_link_policy(struct hci_request *req)
 
 	if (lmp_rswitch_capable(hdev))
 		link_policy |= HCI_LP_RSWITCH;
-	if (lmp_hold_capable(hdev))
-		link_policy |= HCI_LP_HOLD;
+	//if (lmp_hold_capable(hdev))
+	//	link_policy |= HCI_LP_HOLD;//NOT support
 	if (lmp_sniff_capable(hdev))
 		link_policy |= HCI_LP_SNIFF;
-	if (lmp_park_capable(hdev))
-		link_policy |= HCI_LP_PARK;
+	//if (lmp_park_capable(hdev))
+	//	link_policy |= HCI_LP_PARK;//NOT support
+
 
 	cp.policy = cpu_to_le16(link_policy);
 	hci_req_add(req, HCI_OP_WRITE_DEF_LINK_POLICY, sizeof(cp), &cp);
@@ -586,6 +592,8 @@ static int hci_init3_req(struct hci_request *req, unsigned long opt)
 	struct hci_dev *hdev = req->hdev;
 	u8 p;
 
+	BT_INFO("hci_init3_req enter");
+
 	hci_setup_event_mask(req);
 
 	if (hdev->commands[6] & 0x20 &&
@@ -783,6 +791,7 @@ static int hci_init3_req(struct hci_request *req, unsigned long opt)
 			    sizeof(cp), &cp);
 	}
 
+	BT_INFO("hci_init3_req exit");
 	return 0;
 }
 
@@ -790,6 +799,8 @@ static int hci_init4_req(struct hci_request *req, unsigned long opt)
 {
 	struct hci_dev *hdev = req->hdev;
 
+	BT_INFO("hci_init4_req enter");
+
 	/* Some Broadcom based Bluetooth controllers do not support the
 	 * Delete Stored Link Key command. They are clearly indicating its
 	 * absence in the bit mask of supported commands.
@@ -858,6 +869,7 @@ static int hci_init4_req(struct hci_request *req, unsigned long opt)
 		hci_req_add(req, HCI_OP_LE_SET_DEFAULT_PHY, sizeof(cp), &cp);
 	}
 
+	BT_INFO("hci_init4_req exit");
 	return 0;
 }
 
@@ -922,7 +934,7 @@ static int hci_init0_req(struct hci_request *req, unsigned long opt)
 {
 	struct hci_dev *hdev = req->hdev;
 
-	BT_DBG("%s %ld", hdev->name, opt);
+	BT_INFO("%s %ld", hdev->name, opt);
 
 	/* Reset */
 	if (!test_bit(HCI_QUIRK_RESET_ON_CLOSE, &hdev->quirks))
@@ -959,7 +971,7 @@ static int hci_scan_req(struct hci_request *req, unsigned long opt)
 {
 	__u8 scan = opt;
 
-	BT_DBG("%s %x", req->hdev->name, scan);
+	BT_INFO("%s %x", req->hdev->name, scan);
 
 	/* Inquiry and Page scans */
 	hci_req_add(req, HCI_OP_WRITE_SCAN_ENABLE, 1, &scan);
@@ -970,7 +982,7 @@ static int hci_auth_req(struct hci_request *req, unsigned long opt)
 {
 	__u8 auth = opt;
 
-	BT_DBG("%s %x", req->hdev->name, auth);
+	BT_INFO("%s %x", req->hdev->name, auth);
 
 	/* Authentication */
 	hci_req_add(req, HCI_OP_WRITE_AUTH_ENABLE, 1, &auth);
@@ -981,7 +993,7 @@ static int hci_encrypt_req(struct hci_request *req, unsigned long opt)
 {
 	__u8 encrypt = opt;
 
-	BT_DBG("%s %x", req->hdev->name, encrypt);
+	BT_INFO("%s %x", req->hdev->name, encrypt);
 
 	/* Encryption */
 	hci_req_add(req, HCI_OP_WRITE_ENCRYPT_MODE, 1, &encrypt);
@@ -992,7 +1004,7 @@ static int hci_linkpol_req(struct hci_request *req, unsigned long opt)
 {
 	__le16 policy = cpu_to_le16(opt);
 
-	BT_DBG("%s %x", req->hdev->name, policy);
+	BT_INFO("%s %x", req->hdev->name, policy);
 
 	/* Default link policy */
 	hci_req_add(req, HCI_OP_WRITE_DEF_LINK_POLICY, 2, &policy);
@@ -1005,7 +1017,7 @@ struct hci_dev *hci_dev_get(int index)
 {
 	struct hci_dev *hdev = NULL, *d;
 
-	BT_DBG("%d", index);
+	BT_INFO("%d", index);
 
 	if (index < 0)
 		return NULL;
@@ -1041,7 +1053,7 @@ void hci_discovery_set_state(struct hci_dev *hdev, int state)
 {
 	int old_state = hdev->discovery.state;
 
-	BT_DBG("%s state %u -> %u", hdev->name, hdev->discovery.state, state);
+	BT_INFO("%s state %u -> %u", hdev->name, hdev->discovery.state, state);
 
 	if (old_state == state)
 		return;
@@ -1087,7 +1099,7 @@ struct inquiry_entry *hci_inquiry_cache_lookup(struct hci_dev *hdev,
 	struct discovery_state *cache = &hdev->discovery;
 	struct inquiry_entry *e;
 
-	BT_DBG("cache %p, %pMR", cache, bdaddr);
+	BT_INFO("cache %p, %pMR", cache, bdaddr);
 
 	list_for_each_entry(e, &cache->all, all) {
 		if (!bacmp(&e->data.bdaddr, bdaddr))
@@ -1103,7 +1115,7 @@ struct inquiry_entry *hci_inquiry_cache_lookup_unknown(struct hci_dev *hdev,
 	struct discovery_state *cache = &hdev->discovery;
 	struct inquiry_entry *e;
 
-	BT_DBG("cache %p, %pMR", cache, bdaddr);
+	BT_INFO("cache %p, %pMR", cache, bdaddr);
 
 	list_for_each_entry(e, &cache->unknown, list) {
 		if (!bacmp(&e->data.bdaddr, bdaddr))
@@ -1120,7 +1132,7 @@ struct inquiry_entry *hci_inquiry_cache_lookup_resolve(struct hci_dev *hdev,
 	struct discovery_state *cache = &hdev->discovery;
 	struct inquiry_entry *e;
 
-	BT_DBG("cache %p bdaddr %pMR state %d", cache, bdaddr, state);
+	BT_INFO("cache %p bdaddr %pMR state %d", cache, bdaddr, state);
 
 	list_for_each_entry(e, &cache->resolve, list) {
 		if (!bacmp(bdaddr, BDADDR_ANY) && e->name_state == state)
@@ -1158,7 +1170,7 @@ u32 hci_inquiry_cache_update(struct hci_dev *hdev, struct inquiry_data *data,
 	struct inquiry_entry *ie;
 	u32 flags = 0;
 
-	BT_DBG("cache %p, %pMR", cache, &data->bdaddr);
+	BT_INFO("cache %p, %pMR", cache, &data->bdaddr);
 
 	hci_remove_remote_oob_data(hdev, &data->bdaddr, BDADDR_BREDR);
 
@@ -1237,7 +1249,7 @@ static int inquiry_cache_dump(struct hci_dev *hdev, int num, __u8 *buf)
 		copied++;
 	}
 
-	BT_DBG("cache %p, copied %d", cache, copied);
+	BT_INFO("cache %p, copied %d", cache, copied);
 	return copied;
 }
 
@@ -1247,7 +1259,7 @@ static int hci_inq_req(struct hci_request *req, unsigned long opt)
 	struct hci_dev *hdev = req->hdev;
 	struct hci_cp_inquiry cp;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	if (test_bit(HCI_INQUIRY, &hdev->flags))
 		return 0;
@@ -1347,7 +1359,7 @@ int hci_inquiry(void __user *arg)
 	ir.num_rsp = inquiry_cache_dump(hdev, max_rsp, buf);
 	hci_dev_unlock(hdev);
 
-	BT_DBG("num_rsp %d", ir.num_rsp);
+	BT_INFO("num_rsp %d", ir.num_rsp);
 
 	if (!copy_to_user(ptr, &ir, sizeof(ir))) {
 		ptr += sizeof(ir);
@@ -1394,7 +1406,7 @@ static int hci_dev_do_open(struct hci_dev *hdev)
 {
 	int ret = 0;
 
-	BT_DBG("%s %p", hdev->name, hdev);
+	BT_INFO("%s %p", hdev->name, hdev);
 
 	hci_req_sync_lock(hdev);
 
@@ -1669,14 +1681,14 @@ static void hci_pend_le_actions_clear(struct hci_dev *hdev)
 		list_del_init(&p->action);
 	}
 
-	BT_DBG("All LE pending actions cleared");
+	BT_INFO("All LE pending actions cleared");
 }
 
 int hci_dev_do_close(struct hci_dev *hdev)
 {
 	bool auto_off;
 
-	BT_DBG("%s %p", hdev->name, hdev);
+	BT_INFO("%s %p", hdev->name, hdev);
 
 	if (!hci_dev_test_flag(hdev, HCI_UNREGISTER) &&
 	    !hci_dev_test_flag(hdev, HCI_USER_CHANNEL) &&
@@ -1826,7 +1838,7 @@ static int hci_dev_do_reset(struct hci_dev *hdev)
 {
 	int ret;
 
-	BT_DBG("%s %p", hdev->name, hdev);
+	BT_INFO("%s %p", hdev->name, hdev);
 
 	hci_req_sync_lock(hdev);
 
@@ -1917,7 +1929,7 @@ static void hci_update_scan_state(struct hci_dev *hdev, u8 scan)
 {
 	bool conn_changed, discov_changed;
 
-	BT_DBG("%s scan 0x%02x", hdev->name, scan);
+	BT_INFO("%s scan 0x%02x", hdev->name, scan);
 
 	if ((scan & SCAN_PAGE))
 		conn_changed = !hci_dev_test_and_set_flag(hdev,
@@ -2164,7 +2176,7 @@ static int hci_rfkill_set_block(void *data, bool blocked)
 {
 	struct hci_dev *hdev = data;
 
-	BT_DBG("%p name %s blocked %d", hdev, hdev->name, blocked);
+	BT_INFO("%p name %s blocked %d", hdev, hdev->name, blocked);
 
 	if (hci_dev_test_flag(hdev, HCI_USER_CHANNEL))
 		return -EBUSY;
@@ -2190,7 +2202,7 @@ static void hci_power_on(struct work_struct *work)
 	struct hci_dev *hdev = container_of(work, struct hci_dev, power_on);
 	int err;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	if (test_bit(HCI_UP, &hdev->flags) &&
 	    hci_dev_test_flag(hdev, HCI_MGMT) &&
@@ -2262,7 +2274,7 @@ static void hci_power_off(struct work_struct *work)
 	struct hci_dev *hdev = container_of(work, struct hci_dev,
 					    power_off.work);
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	hci_dev_do_close(hdev);
 }
@@ -2271,7 +2283,7 @@ static void hci_error_reset(struct work_struct *work)
 {
 	struct hci_dev *hdev = container_of(work, struct hci_dev, error_reset);
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	if (hdev->hw_error)
 		hdev->hw_error(hdev, hdev->hw_error_code);
@@ -2473,7 +2485,7 @@ struct link_key *hci_add_link_key(struct hci_dev *hdev, struct hci_conn *conn,
 		list_add_rcu(&key->list, &hdev->link_keys);
 	}
 
-	BT_DBG("%s key for %pMR type %u", hdev->name, bdaddr, type);
+	BT_INFO("%s key for %pMR type %u", hdev->name, bdaddr, type);
 
 	/* Some buggy controller combinations generate a changed
 	 * combination key for legacy pairing even when there's no
@@ -2561,7 +2573,7 @@ int hci_remove_link_key(struct hci_dev *hdev, bdaddr_t *bdaddr)
 	if (!key)
 		return -ENOENT;
 
-	BT_DBG("%s removing %pMR", hdev->name, bdaddr);
+	BT_INFO("%s removing %pMR", hdev->name, bdaddr);
 
 	list_del_rcu(&key->list);
 	kfree_rcu(key, rcu);
@@ -2578,7 +2590,7 @@ int hci_remove_ltk(struct hci_dev *hdev, bdaddr_t *bdaddr, u8 bdaddr_type)
 		if (bacmp(bdaddr, &k->bdaddr) || k->bdaddr_type != bdaddr_type)
 			continue;
 
-		BT_DBG("%s removing %pMR", hdev->name, bdaddr);
+		BT_INFO("%s removing %pMR", hdev->name, bdaddr);
 
 		list_del_rcu(&k->list);
 		kfree_rcu(k, rcu);
@@ -2596,7 +2608,7 @@ void hci_remove_irk(struct hci_dev *hdev, bdaddr_t *bdaddr, u8 addr_type)
 		if (bacmp(bdaddr, &k->bdaddr) || k->addr_type != addr_type)
 			continue;
 
-		BT_DBG("%s removing %pMR", hdev->name, bdaddr);
+		BT_INFO("%s removing %pMR", hdev->name, bdaddr);
 
 		list_del_rcu(&k->list);
 		kfree_rcu(k, rcu);
@@ -2686,7 +2698,7 @@ int hci_remove_remote_oob_data(struct hci_dev *hdev, bdaddr_t *bdaddr,
 	if (!data)
 		return -ENOENT;
 
-	BT_DBG("%s removing %pMR (%u)", hdev->name, bdaddr, bdaddr_type);
+	BT_INFO("%s removing %pMR (%u)", hdev->name, bdaddr, bdaddr_type);
 
 	list_del(&data->list);
 	kfree(data);
@@ -2745,7 +2757,7 @@ int hci_add_remote_oob_data(struct hci_dev *hdev, bdaddr_t *bdaddr,
 			data->present = 0x01;
 	}
 
-	BT_DBG("%s for %pMR", hdev->name, bdaddr);
+	BT_INFO("%s for %pMR", hdev->name, bdaddr);
 
 	return 0;
 }
@@ -2789,7 +2801,7 @@ int hci_remove_adv_instance(struct hci_dev *hdev, u8 instance)
 	if (!adv_instance)
 		return -ENOENT;
 
-	BT_DBG("%s removing %dMR", hdev->name, instance);
+	BT_INFO("%s removing %dMR", hdev->name, instance);
 
 	if (hdev->cur_adv_instance == instance) {
 		if (hdev->adv_instance_timeout) {
@@ -2842,7 +2854,7 @@ static void adv_instance_rpa_expired(struct work_struct *work)
 	struct adv_info *adv_instance = container_of(work, struct adv_info,
 						     rpa_expired_cb.work);
 
-	BT_DBG("");
+	BT_INFO("");
 
 	adv_instance->rpa_expired = true;
 }
@@ -2900,7 +2912,7 @@ int hci_add_adv_instance(struct hci_dev *hdev, u8 instance, u32 flags,
 	INIT_DELAYED_WORK(&adv_instance->rpa_expired_cb,
 			  adv_instance_rpa_expired);
 
-	BT_DBG("%s for %dMR", hdev->name, instance);
+	BT_INFO("%s for %dMR", hdev->name, instance);
 
 	return 0;
 }
@@ -3091,7 +3103,7 @@ struct hci_conn_params *hci_conn_params_add(struct hci_dev *hdev,
 	params->supervision_timeout = hdev->le_supv_timeout;
 	params->auto_connect = HCI_AUTO_CONN_DISABLED;
 
-	BT_DBG("addr %pMR (type %u)", addr, addr_type);
+	BT_INFO("addr %pMR (type %u)", addr, addr_type);
 
 	return params;
 }
@@ -3121,7 +3133,7 @@ void hci_conn_params_del(struct hci_dev *hdev, bdaddr_t *addr, u8 addr_type)
 
 	hci_update_background_scan(hdev);
 
-	BT_DBG("addr %pMR (type %u)", addr, addr_type);
+	BT_INFO("addr %pMR (type %u)", addr, addr_type);
 }
 
 /* This function requires the caller holds hdev->lock */
@@ -3145,7 +3157,7 @@ void hci_conn_params_clear_disabled(struct hci_dev *hdev)
 		kfree(params);
 	}
 
-	BT_DBG("All LE disabled connection parameters were removed");
+	BT_INFO("All LE disabled connection parameters were removed");
 }
 
 /* This function requires the caller holds hdev->lock */
@@ -3156,7 +3168,7 @@ static void hci_conn_params_clear_all(struct hci_dev *hdev)
 	list_for_each_entry_safe(params, tmp, &hdev->le_conn_params, list)
 		hci_conn_params_free(params);
 
-	BT_DBG("All LE connection parameters were removed");
+	BT_INFO("All LE connection parameters were removed");
 }
 
 /* Copy the Identity Address of the controller.
@@ -3319,7 +3331,7 @@ int hci_register_dev(struct hci_dev *hdev)
 	sprintf(hdev->name, "hci%d", id);
 	hdev->id = id;
 
-	BT_DBG("%p name %s bus %d", hdev, hdev->name, hdev->bus);
+	BT_INFO("%p name %s bus %d", hdev, hdev->name, hdev->bus);
 
 	hdev->workqueue = alloc_ordered_workqueue("%s", WQ_HIGHPRI, hdev->name);
 	if (!hdev->workqueue) {
@@ -3400,7 +3412,7 @@ EXPORT_SYMBOL(hci_register_dev);
 /* Unregister HCI device */
 void hci_unregister_dev(struct hci_dev *hdev)
 {
-	BT_DBG("%p name %s bus %d", hdev, hdev->name, hdev->bus);
+	BT_INFO("%p name %s bus %d", hdev, hdev->name, hdev->bus);
 
 	hci_dev_set_flag(hdev, HCI_UNREGISTER);
 
@@ -3570,7 +3582,7 @@ EXPORT_SYMBOL(hci_set_fw_info);
 
 int hci_register_cb(struct hci_cb *cb)
 {
-	BT_DBG("%p name %s", cb, cb->name);
+	BT_INFO("%p name %s", cb, cb->name);
 
 	mutex_lock(&hci_cb_list_lock);
 	list_add_tail(&cb->list, &hci_cb_list);
@@ -3582,7 +3594,7 @@ EXPORT_SYMBOL(hci_register_cb);
 
 int hci_unregister_cb(struct hci_cb *cb)
 {
-	BT_DBG("%p name %s", cb, cb->name);
+	BT_INFO("%p name %s", cb, cb->name);
 
 	mutex_lock(&hci_cb_list_lock);
 	list_del(&cb->list);
@@ -3596,7 +3608,7 @@ static void hci_send_frame(struct hci_dev *hdev, struct sk_buff *skb)
 {
 	int err;
 
-	BT_DBG("%s type %d len %d", hdev->name, hci_skb_pkt_type(skb),
+	BT_INFO("%s type %d len %d", hdev->name, hci_skb_pkt_type(skb),
 	       skb->len);
 
 	/* Time stamp */
@@ -3631,7 +3643,7 @@ int hci_send_cmd(struct hci_dev *hdev, __u16 opcode, __u32 plen,
 {
 	struct sk_buff *skb;
 
-	BT_DBG("%s opcode 0x%4.4x plen %d", hdev->name, opcode, plen);
+	BT_INFO("%s opcode 0x%4.4x plen %d", hdev->name, opcode, plen);
 
 	skb = hci_prepare_cmd(hdev, opcode, plen, param);
 	if (!skb) {
@@ -3694,7 +3706,7 @@ void *hci_sent_cmd_data(struct hci_dev *hdev, __u16 opcode)
 	if (hdr->opcode != cpu_to_le16(opcode))
 		return NULL;
 
-	BT_DBG("%s opcode 0x%4.4x", hdev->name, opcode);
+	BT_INFO("%s opcode 0x%4.4x", hdev->name, opcode);
 
 	return hdev->sent_cmd->data + HCI_COMMAND_HDR_SIZE;
 }
@@ -3758,12 +3770,12 @@ static void hci_queue_acl(struct hci_chan *chan, struct sk_buff_head *queue,
 	list = skb_shinfo(skb)->frag_list;
 	if (!list) {
 		/* Non fragmented */
-		BT_DBG("%s nonfrag skb %p len %d", hdev->name, skb, skb->len);
+		BT_INFO("%s nonfrag skb %p len %d", hdev->name, skb, skb->len);
 
 		skb_queue_tail(queue, skb);
 	} else {
 		/* Fragmented */
-		BT_DBG("%s frag %p len %d", hdev->name, skb, skb->len);
+		BT_INFO("%s frag %p len %d", hdev->name, skb, skb->len);
 
 		skb_shinfo(skb)->frag_list = NULL;
 
@@ -3784,7 +3796,7 @@ static void hci_queue_acl(struct hci_chan *chan, struct sk_buff_head *queue,
 			hci_skb_pkt_type(skb) = HCI_ACLDATA_PKT;
 			hci_add_acl_hdr(skb, conn->handle, flags);
 
-			BT_DBG("%s frag %p len %d", hdev->name, skb, skb->len);
+			BT_INFO("%s frag %p len %d", hdev->name, skb, skb->len);
 
 			__skb_queue_tail(queue, skb);
 		} while (list);
@@ -3797,7 +3809,7 @@ void hci_send_acl(struct hci_chan *chan, struct sk_buff *skb, __u16 flags)
 {
 	struct hci_dev *hdev = chan->conn->hdev;
 
-	BT_DBG("%s chan %p flags 0x%4.4x", hdev->name, chan, flags);
+	BT_INFO("%s chan %p flags 0x%4.4x", hdev->name, chan, flags);
 
 	hci_queue_acl(chan, &chan->data_q, skb, flags);
 
@@ -3810,7 +3822,7 @@ void hci_send_sco(struct hci_conn *conn, struct sk_buff *skb)
 	struct hci_dev *hdev = conn->hdev;
 	struct hci_sco_hdr hdr;
 
-	BT_DBG("%s len %d", hdev->name, skb->len);
+	BT_INFO("%s len %d", hdev->name, skb->len);
 
 	hdr.handle = cpu_to_le16(conn->handle);
 	hdr.dlen   = skb->len;
@@ -3884,7 +3896,7 @@ static struct hci_conn *hci_low_sent(struct hci_dev *hdev, __u8 type,
 	} else
 		*quote = 0;
 
-	BT_DBG("conn %p quote %d", conn, *quote);
+	BT_INFO("conn %p quote %d", conn, *quote);
 	return conn;
 }
 
@@ -3918,7 +3930,7 @@ static struct hci_chan *hci_chan_sent(struct hci_dev *hdev, __u8 type,
 	struct hci_conn *conn;
 	int cnt, q, conn_num = 0;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	rcu_read_lock();
 
@@ -3987,7 +3999,7 @@ static struct hci_chan *hci_chan_sent(struct hci_dev *hdev, __u8 type,
 
 	q = cnt / num;
 	*quote = q ? q : 1;
-	BT_DBG("chan %p quote %d", chan, *quote);
+	BT_INFO("chan %p quote %d", chan, *quote);
 	return chan;
 }
 
@@ -3997,7 +4009,7 @@ static void hci_prio_recalculate(struct hci_dev *hdev, __u8 type)
 	struct hci_conn *conn;
 	int num = 0;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	rcu_read_lock();
 
@@ -4029,7 +4041,7 @@ static void hci_prio_recalculate(struct hci_dev *hdev, __u8 type)
 
 			skb->priority = HCI_PRIO_MAX - 1;
 
-			BT_DBG("chan %p skb %p promoted to %d", chan, skb,
+			BT_INFO("chan %p skb %p promoted to %d", chan, skb,
 			       skb->priority);
 		}
 
@@ -4071,7 +4083,7 @@ static void hci_sched_acl_pkt(struct hci_dev *hdev)
 	       (chan = hci_chan_sent(hdev, ACL_LINK, &quote))) {
 		u32 priority = (skb_peek(&chan->data_q))->priority;
 		while (quote-- && (skb = skb_peek(&chan->data_q))) {
-			BT_DBG("chan %p skb %p len %d priority %u", chan, skb,
+			BT_INFO("chan %p skb %p len %d priority %u", chan, skb,
 			       skb->len, skb->priority);
 
 			/* Stop if priority has changed */
@@ -4106,7 +4118,7 @@ static void hci_sched_acl_blk(struct hci_dev *hdev)
 
 	__check_timeout(hdev, cnt);
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	if (hdev->dev_type == HCI_AMP)
 		type = AMP_LINK;
@@ -4119,7 +4131,7 @@ static void hci_sched_acl_blk(struct hci_dev *hdev)
 		while (quote > 0 && (skb = skb_peek(&chan->data_q))) {
 			int blocks;
 
-			BT_DBG("chan %p skb %p len %d priority %u", chan, skb,
+			BT_INFO("chan %p skb %p len %d priority %u", chan, skb,
 			       skb->len, skb->priority);
 
 			/* Stop if priority has changed */
@@ -4152,7 +4164,7 @@ static void hci_sched_acl_blk(struct hci_dev *hdev)
 
 static void hci_sched_acl(struct hci_dev *hdev)
 {
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	/* No ACL link over BR/EDR controller */
 	if (!hci_conn_num(hdev, ACL_LINK) && hdev->dev_type == HCI_PRIMARY)
@@ -4180,14 +4192,14 @@ static void hci_sched_sco(struct hci_dev *hdev)
 	struct sk_buff *skb;
 	int quote;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	if (!hci_conn_num(hdev, SCO_LINK))
 		return;
 
 	while (hdev->sco_cnt && (conn = hci_low_sent(hdev, SCO_LINK, &quote))) {
 		while (quote-- && (skb = skb_dequeue(&conn->data_q))) {
-			BT_DBG("skb %p len %d", skb, skb->len);
+			BT_INFO("skb %p len %d", skb, skb->len);
 			hci_send_frame(hdev, skb);
 
 			conn->sent++;
@@ -4203,7 +4215,7 @@ static void hci_sched_esco(struct hci_dev *hdev)
 	struct sk_buff *skb;
 	int quote;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	if (!hci_conn_num(hdev, ESCO_LINK))
 		return;
@@ -4211,7 +4223,7 @@ static void hci_sched_esco(struct hci_dev *hdev)
 	while (hdev->sco_cnt && (conn = hci_low_sent(hdev, ESCO_LINK,
 						     &quote))) {
 		while (quote-- && (skb = skb_dequeue(&conn->data_q))) {
-			BT_DBG("skb %p len %d", skb, skb->len);
+			BT_INFO("skb %p len %d", skb, skb->len);
 			hci_send_frame(hdev, skb);
 
 			conn->sent++;
@@ -4227,7 +4239,7 @@ static void hci_sched_le(struct hci_dev *hdev)
 	struct sk_buff *skb;
 	int quote, cnt, tmp;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	if (!hci_conn_num(hdev, LE_LINK))
 		return;
@@ -4245,7 +4257,7 @@ static void hci_sched_le(struct hci_dev *hdev)
 	while (cnt && (chan = hci_chan_sent(hdev, LE_LINK, &quote))) {
 		u32 priority = (skb_peek(&chan->data_q))->priority;
 		while (quote-- && (skb = skb_peek(&chan->data_q))) {
-			BT_DBG("chan %p skb %p len %d priority %u", chan, skb,
+			BT_INFO("chan %p skb %p len %d priority %u", chan, skb,
 			       skb->len, skb->priority);
 
 			/* Stop if priority has changed */
@@ -4277,7 +4289,7 @@ static void hci_tx_work(struct work_struct *work)
 	struct hci_dev *hdev = container_of(work, struct hci_dev, tx_work);
 	struct sk_buff *skb;
 
-	BT_DBG("%s acl %d sco %d le %d", hdev->name, hdev->acl_cnt,
+	BT_INFO("%s acl %d sco %d le %d", hdev->name, hdev->acl_cnt,
 	       hdev->sco_cnt, hdev->le_cnt);
 
 	if (!hci_dev_test_flag(hdev, HCI_USER_CHANNEL)) {
@@ -4308,7 +4320,7 @@ static void hci_acldata_packet(struct hci_dev *hdev, struct sk_buff *skb)
 	flags  = hci_flags(handle);
 	handle = hci_handle(handle);
 
-	BT_DBG("%s len %d handle 0x%4.4x flags 0x%4.4x", hdev->name, skb->len,
+	BT_INFO("%s len %d handle 0x%4.4x flags 0x%4.4x", hdev->name, skb->len,
 	       handle, flags);
 
 	hdev->stat.acl_rx++;
@@ -4342,7 +4354,7 @@ static void hci_scodata_packet(struct hci_dev *hdev, struct sk_buff *skb)
 
 	handle = __le16_to_cpu(hdr->handle);
 
-	BT_DBG("%s len %d handle 0x%4.4x", hdev->name, skb->len, handle);
+	BT_INFO("%s len %d handle 0x%4.4x", hdev->name, skb->len, handle);
 
 	hdev->stat.sco_rx++;
 
@@ -4402,7 +4414,7 @@ void hci_req_cmd_complete(struct hci_dev *hdev, u16 opcode, u8 status,
 	struct sk_buff *skb;
 	unsigned long flags;
 
-	BT_DBG("opcode 0x%04x status 0x%02x", opcode, status);
+	BT_INFO("opcode 0x%04x status 0x%02x", opcode, status);
 
 	/* If the completed command doesn't match the last one that was
 	 * sent we need to do special handling of it.
@@ -4465,7 +4477,7 @@ static void hci_rx_work(struct work_struct *work)
 	struct hci_dev *hdev = container_of(work, struct hci_dev, rx_work);
 	struct sk_buff *skb;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	while ((skb = skb_dequeue(&hdev->rx_q))) {
 		/* Send copy to monitor */
@@ -4501,17 +4513,17 @@ static void hci_rx_work(struct work_struct *work)
 		/* Process frame */
 		switch (hci_skb_pkt_type(skb)) {
 		case HCI_EVENT_PKT:
-			BT_DBG("%s Event packet", hdev->name);
+			BT_INFO("%s Event packet", hdev->name);
 			hci_event_packet(hdev, skb);
 			break;
 
 		case HCI_ACLDATA_PKT:
-			BT_DBG("%s ACL data packet", hdev->name);
+			BT_INFO("%s ACL data packet", hdev->name);
 			hci_acldata_packet(hdev, skb);
 			break;
 
 		case HCI_SCODATA_PKT:
-			BT_DBG("%s SCO data packet", hdev->name);
+			BT_INFO("%s SCO data packet", hdev->name);
 			hci_scodata_packet(hdev, skb);
 			break;
 
@@ -4527,7 +4539,7 @@ static void hci_cmd_work(struct work_struct *work)
 	struct hci_dev *hdev = container_of(work, struct hci_dev, cmd_work);
 	struct sk_buff *skb;
 
-	BT_DBG("%s cmd_cnt %d cmd queued %d", hdev->name,
+	BT_INFO("%s cmd_cnt %d cmd queued %d", hdev->name,
 	       atomic_read(&hdev->cmd_cnt), skb_queue_len(&hdev->cmd_q));
 
 	/* Send queued commands */
diff --git a/net/bluetooth/hci_event.c b/net/bluetooth/hci_event.c
index 082a262ab49c..13821ef38b68 100644
--- a/net/bluetooth/hci_event.c
+++ b/net/bluetooth/hci_event.c
@@ -46,7 +46,7 @@ static void hci_cc_inquiry_cancel(struct hci_dev *hdev, struct sk_buff *skb,
 {
 	__u8 status = *((__u8 *) skb->data);
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	/* It is possible that we receive Inquiry Complete event right
 	 * before we receive Inquiry Cancel Command Complete event, in
@@ -85,7 +85,7 @@ static void hci_cc_periodic_inq(struct hci_dev *hdev, struct sk_buff *skb)
 {
 	__u8 status = *((__u8 *) skb->data);
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	if (status)
 		return;
@@ -97,7 +97,7 @@ static void hci_cc_exit_periodic_inq(struct hci_dev *hdev, struct sk_buff *skb)
 {
 	__u8 status = *((__u8 *) skb->data);
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	if (status)
 		return;
@@ -110,7 +110,7 @@ static void hci_cc_exit_periodic_inq(struct hci_dev *hdev, struct sk_buff *skb)
 static void hci_cc_remote_name_req_cancel(struct hci_dev *hdev,
 					  struct sk_buff *skb)
 {
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 }
 
 static void hci_cc_role_discovery(struct hci_dev *hdev, struct sk_buff *skb)
@@ -118,7 +118,7 @@ static void hci_cc_role_discovery(struct hci_dev *hdev, struct sk_buff *skb)
 	struct hci_rp_role_discovery *rp = (void *) skb->data;
 	struct hci_conn *conn;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	if (rp->status)
 		return;
@@ -137,7 +137,7 @@ static void hci_cc_read_link_policy(struct hci_dev *hdev, struct sk_buff *skb)
 	struct hci_rp_read_link_policy *rp = (void *) skb->data;
 	struct hci_conn *conn;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	if (rp->status)
 		return;
@@ -157,7 +157,7 @@ static void hci_cc_write_link_policy(struct hci_dev *hdev, struct sk_buff *skb)
 	struct hci_conn *conn;
 	void *sent;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	if (rp->status)
 		return;
@@ -180,7 +180,7 @@ static void hci_cc_read_def_link_policy(struct hci_dev *hdev,
 {
 	struct hci_rp_read_def_link_policy *rp = (void *) skb->data;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	if (rp->status)
 		return;
@@ -194,7 +194,7 @@ static void hci_cc_write_def_link_policy(struct hci_dev *hdev,
 	__u8 status = *((__u8 *) skb->data);
 	void *sent;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	if (status)
 		return;
@@ -210,7 +210,7 @@ static void hci_cc_reset(struct hci_dev *hdev, struct sk_buff *skb)
 {
 	__u8 status = *((__u8 *) skb->data);
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	clear_bit(HCI_RESET, &hdev->flags);
 
@@ -245,7 +245,7 @@ static void hci_cc_read_stored_link_key(struct hci_dev *hdev,
 	struct hci_rp_read_stored_link_key *rp = (void *)skb->data;
 	struct hci_cp_read_stored_link_key *sent;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	sent = hci_sent_cmd_data(hdev, HCI_OP_READ_STORED_LINK_KEY);
 	if (!sent)
@@ -262,7 +262,7 @@ static void hci_cc_delete_stored_link_key(struct hci_dev *hdev,
 {
 	struct hci_rp_delete_stored_link_key *rp = (void *)skb->data;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	if (rp->status)
 		return;
@@ -278,7 +278,7 @@ static void hci_cc_write_local_name(struct hci_dev *hdev, struct sk_buff *skb)
 	__u8 status = *((__u8 *) skb->data);
 	void *sent;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	sent = hci_sent_cmd_data(hdev, HCI_OP_WRITE_LOCAL_NAME);
 	if (!sent)
@@ -298,7 +298,7 @@ static void hci_cc_read_local_name(struct hci_dev *hdev, struct sk_buff *skb)
 {
 	struct hci_rp_read_local_name *rp = (void *) skb->data;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	if (rp->status)
 		return;
@@ -313,7 +313,7 @@ static void hci_cc_write_auth_enable(struct hci_dev *hdev, struct sk_buff *skb)
 	__u8 status = *((__u8 *) skb->data);
 	void *sent;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	sent = hci_sent_cmd_data(hdev, HCI_OP_WRITE_AUTH_ENABLE);
 	if (!sent)
@@ -342,7 +342,7 @@ static void hci_cc_write_encrypt_mode(struct hci_dev *hdev, struct sk_buff *skb)
 	__u8 param;
 	void *sent;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	if (status)
 		return;
@@ -365,7 +365,7 @@ static void hci_cc_write_scan_enable(struct hci_dev *hdev, struct sk_buff *skb)
 	__u8 param;
 	void *sent;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	sent = hci_sent_cmd_data(hdev, HCI_OP_WRITE_SCAN_ENABLE);
 	if (!sent)
@@ -398,14 +398,14 @@ static void hci_cc_read_class_of_dev(struct hci_dev *hdev, struct sk_buff *skb)
 {
 	struct hci_rp_read_class_of_dev *rp = (void *) skb->data;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	if (rp->status)
 		return;
 
 	memcpy(hdev->dev_class, rp->dev_class, 3);
 
-	BT_DBG("%s class 0x%.2x%.2x%.2x", hdev->name,
+	BT_INFO("%s class 0x%.2x%.2x%.2x", hdev->name,
 	       hdev->dev_class[2], hdev->dev_class[1], hdev->dev_class[0]);
 }
 
@@ -414,7 +414,7 @@ static void hci_cc_write_class_of_dev(struct hci_dev *hdev, struct sk_buff *skb)
 	__u8 status = *((__u8 *) skb->data);
 	void *sent;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	sent = hci_sent_cmd_data(hdev, HCI_OP_WRITE_CLASS_OF_DEV);
 	if (!sent)
@@ -436,7 +436,7 @@ static void hci_cc_read_voice_setting(struct hci_dev *hdev, struct sk_buff *skb)
 	struct hci_rp_read_voice_setting *rp = (void *) skb->data;
 	__u16 setting;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	if (rp->status)
 		return;
@@ -448,7 +448,7 @@ static void hci_cc_read_voice_setting(struct hci_dev *hdev, struct sk_buff *skb)
 
 	hdev->voice_setting = setting;
 
-	BT_DBG("%s voice setting 0x%4.4x", hdev->name, setting);
+	BT_INFO("%s voice setting 0x%4.4x", hdev->name, setting);
 
 	if (hdev->notify)
 		hdev->notify(hdev, HCI_NOTIFY_VOICE_SETTING);
@@ -461,7 +461,7 @@ static void hci_cc_write_voice_setting(struct hci_dev *hdev,
 	__u16 setting;
 	void *sent;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	if (status)
 		return;
@@ -477,7 +477,7 @@ static void hci_cc_write_voice_setting(struct hci_dev *hdev,
 
 	hdev->voice_setting = setting;
 
-	BT_DBG("%s voice setting 0x%4.4x", hdev->name, setting);
+	BT_INFO("%s voice setting 0x%4.4x", hdev->name, setting);
 
 	if (hdev->notify)
 		hdev->notify(hdev, HCI_NOTIFY_VOICE_SETTING);
@@ -488,14 +488,14 @@ static void hci_cc_read_num_supported_iac(struct hci_dev *hdev,
 {
 	struct hci_rp_read_num_supported_iac *rp = (void *) skb->data;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	if (rp->status)
 		return;
 
 	hdev->num_iac = rp->num_iac;
 
-	BT_DBG("%s num iac %d", hdev->name, hdev->num_iac);
+	BT_INFO("%s num iac %d", hdev->name, hdev->num_iac);
 }
 
 static void hci_cc_write_ssp_mode(struct hci_dev *hdev, struct sk_buff *skb)
@@ -503,7 +503,7 @@ static void hci_cc_write_ssp_mode(struct hci_dev *hdev, struct sk_buff *skb)
 	__u8 status = *((__u8 *) skb->data);
 	struct hci_cp_write_ssp_mode *sent;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	sent = hci_sent_cmd_data(hdev, HCI_OP_WRITE_SSP_MODE);
 	if (!sent)
@@ -535,7 +535,7 @@ static void hci_cc_write_sc_support(struct hci_dev *hdev, struct sk_buff *skb)
 	u8 status = *((u8 *) skb->data);
 	struct hci_cp_write_sc_support *sent;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	sent = hci_sent_cmd_data(hdev, HCI_OP_WRITE_SC_SUPPORT);
 	if (!sent)
@@ -564,7 +564,7 @@ static void hci_cc_read_local_version(struct hci_dev *hdev, struct sk_buff *skb)
 {
 	struct hci_rp_read_local_version *rp = (void *) skb->data;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	if (rp->status)
 		return;
@@ -584,7 +584,7 @@ static void hci_cc_read_local_commands(struct hci_dev *hdev,
 {
 	struct hci_rp_read_local_commands *rp = (void *) skb->data;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	if (rp->status)
 		return;
@@ -600,7 +600,7 @@ static void hci_cc_read_auth_payload_timeout(struct hci_dev *hdev,
 	struct hci_rp_read_auth_payload_to *rp = (void *)skb->data;
 	struct hci_conn *conn;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	if (rp->status)
 		return;
@@ -621,7 +621,7 @@ static void hci_cc_write_auth_payload_timeout(struct hci_dev *hdev,
 	struct hci_conn *conn;
 	void *sent;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	if (rp->status)
 		return;
@@ -644,7 +644,7 @@ static void hci_cc_read_local_features(struct hci_dev *hdev,
 {
 	struct hci_rp_read_local_features *rp = (void *) skb->data;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	if (rp->status)
 		return;
@@ -694,7 +694,7 @@ static void hci_cc_read_local_ext_features(struct hci_dev *hdev,
 {
 	struct hci_rp_read_local_ext_features *rp = (void *) skb->data;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	if (rp->status)
 		return;
@@ -711,7 +711,7 @@ static void hci_cc_read_flow_control_mode(struct hci_dev *hdev,
 {
 	struct hci_rp_read_flow_control_mode *rp = (void *) skb->data;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	if (rp->status)
 		return;
@@ -723,7 +723,7 @@ static void hci_cc_read_buffer_size(struct hci_dev *hdev, struct sk_buff *skb)
 {
 	struct hci_rp_read_buffer_size *rp = (void *) skb->data;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	if (rp->status)
 		return;
@@ -741,7 +741,7 @@ static void hci_cc_read_buffer_size(struct hci_dev *hdev, struct sk_buff *skb)
 	hdev->acl_cnt = hdev->acl_pkts;
 	hdev->sco_cnt = hdev->sco_pkts;
 
-	BT_DBG("%s acl mtu %d:%d sco mtu %d:%d", hdev->name, hdev->acl_mtu,
+	BT_INFO("%s acl mtu %d:%d sco mtu %d:%d", hdev->name, hdev->acl_mtu,
 	       hdev->acl_pkts, hdev->sco_mtu, hdev->sco_pkts);
 }
 
@@ -749,7 +749,7 @@ static void hci_cc_read_bd_addr(struct hci_dev *hdev, struct sk_buff *skb)
 {
 	struct hci_rp_read_bd_addr *rp = (void *) skb->data;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	if (rp->status)
 		return;
@@ -766,7 +766,7 @@ static void hci_cc_read_page_scan_activity(struct hci_dev *hdev,
 {
 	struct hci_rp_read_page_scan_activity *rp = (void *) skb->data;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	if (rp->status)
 		return;
@@ -783,7 +783,7 @@ static void hci_cc_write_page_scan_activity(struct hci_dev *hdev,
 	u8 status = *((u8 *) skb->data);
 	struct hci_cp_write_page_scan_activity *sent;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	if (status)
 		return;
@@ -801,7 +801,7 @@ static void hci_cc_read_page_scan_type(struct hci_dev *hdev,
 {
 	struct hci_rp_read_page_scan_type *rp = (void *) skb->data;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	if (rp->status)
 		return;
@@ -816,7 +816,7 @@ static void hci_cc_write_page_scan_type(struct hci_dev *hdev,
 	u8 status = *((u8 *) skb->data);
 	u8 *type;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	if (status)
 		return;
@@ -831,7 +831,7 @@ static void hci_cc_read_data_block_size(struct hci_dev *hdev,
 {
 	struct hci_rp_read_data_block_size *rp = (void *) skb->data;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	if (rp->status)
 		return;
@@ -842,7 +842,7 @@ static void hci_cc_read_data_block_size(struct hci_dev *hdev,
 
 	hdev->block_cnt = hdev->num_blocks;
 
-	BT_DBG("%s blk mtu %d cnt %d len %d", hdev->name, hdev->block_mtu,
+	BT_INFO("%s blk mtu %d cnt %d len %d", hdev->name, hdev->block_mtu,
 	       hdev->block_cnt, hdev->block_len);
 }
 
@@ -852,7 +852,7 @@ static void hci_cc_read_clock(struct hci_dev *hdev, struct sk_buff *skb)
 	struct hci_cp_read_clock *cp;
 	struct hci_conn *conn;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	if (skb->len < sizeof(*rp))
 		return;
@@ -886,7 +886,7 @@ static void hci_cc_read_local_amp_info(struct hci_dev *hdev,
 {
 	struct hci_rp_read_local_amp_info *rp = (void *) skb->data;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	if (rp->status)
 		return;
@@ -908,7 +908,7 @@ static void hci_cc_read_inq_rsp_tx_power(struct hci_dev *hdev,
 {
 	struct hci_rp_read_inq_rsp_tx_power *rp = (void *) skb->data;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	if (rp->status)
 		return;
@@ -922,7 +922,7 @@ static void hci_cc_pin_code_reply(struct hci_dev *hdev, struct sk_buff *skb)
 	struct hci_cp_pin_code_reply *cp;
 	struct hci_conn *conn;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	hci_dev_lock(hdev);
 
@@ -948,7 +948,7 @@ static void hci_cc_pin_code_neg_reply(struct hci_dev *hdev, struct sk_buff *skb)
 {
 	struct hci_rp_pin_code_neg_reply *rp = (void *) skb->data;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	hci_dev_lock(hdev);
 
@@ -964,7 +964,7 @@ static void hci_cc_le_read_buffer_size(struct hci_dev *hdev,
 {
 	struct hci_rp_le_read_buffer_size *rp = (void *) skb->data;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	if (rp->status)
 		return;
@@ -974,7 +974,7 @@ static void hci_cc_le_read_buffer_size(struct hci_dev *hdev,
 
 	hdev->le_cnt = hdev->le_pkts;
 
-	BT_DBG("%s le mtu %d:%d", hdev->name, hdev->le_mtu, hdev->le_pkts);
+	BT_INFO("%s le mtu %d:%d", hdev->name, hdev->le_mtu, hdev->le_pkts);
 }
 
 static void hci_cc_le_read_local_features(struct hci_dev *hdev,
@@ -982,7 +982,7 @@ static void hci_cc_le_read_local_features(struct hci_dev *hdev,
 {
 	struct hci_rp_le_read_local_features *rp = (void *) skb->data;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	if (rp->status)
 		return;
@@ -995,7 +995,7 @@ static void hci_cc_le_read_adv_tx_power(struct hci_dev *hdev,
 {
 	struct hci_rp_le_read_adv_tx_power *rp = (void *) skb->data;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	if (rp->status)
 		return;
@@ -1007,7 +1007,7 @@ static void hci_cc_user_confirm_reply(struct hci_dev *hdev, struct sk_buff *skb)
 {
 	struct hci_rp_user_confirm_reply *rp = (void *) skb->data;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	hci_dev_lock(hdev);
 
@@ -1023,7 +1023,7 @@ static void hci_cc_user_confirm_neg_reply(struct hci_dev *hdev,
 {
 	struct hci_rp_user_confirm_reply *rp = (void *) skb->data;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	hci_dev_lock(hdev);
 
@@ -1038,7 +1038,7 @@ static void hci_cc_user_passkey_reply(struct hci_dev *hdev, struct sk_buff *skb)
 {
 	struct hci_rp_user_confirm_reply *rp = (void *) skb->data;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	hci_dev_lock(hdev);
 
@@ -1054,7 +1054,7 @@ static void hci_cc_user_passkey_neg_reply(struct hci_dev *hdev,
 {
 	struct hci_rp_user_confirm_reply *rp = (void *) skb->data;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	hci_dev_lock(hdev);
 
@@ -1070,7 +1070,7 @@ static void hci_cc_read_local_oob_data(struct hci_dev *hdev,
 {
 	struct hci_rp_read_local_oob_data *rp = (void *) skb->data;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 }
 
 static void hci_cc_read_local_oob_ext_data(struct hci_dev *hdev,
@@ -1078,7 +1078,7 @@ static void hci_cc_read_local_oob_ext_data(struct hci_dev *hdev,
 {
 	struct hci_rp_read_local_oob_ext_data *rp = (void *) skb->data;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 }
 
 static void hci_cc_le_set_random_addr(struct hci_dev *hdev, struct sk_buff *skb)
@@ -1086,7 +1086,7 @@ static void hci_cc_le_set_random_addr(struct hci_dev *hdev, struct sk_buff *skb)
 	__u8 status = *((__u8 *) skb->data);
 	bdaddr_t *sent;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	if (status)
 		return;
@@ -1107,7 +1107,7 @@ static void hci_cc_le_set_default_phy(struct hci_dev *hdev, struct sk_buff *skb)
 	__u8 status = *((__u8 *) skb->data);
 	struct hci_cp_le_set_default_phy *cp;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	if (status)
 		return;
@@ -1157,7 +1157,7 @@ static void hci_cc_le_set_adv_enable(struct hci_dev *hdev, struct sk_buff *skb)
 {
 	__u8 *sent, status = *((__u8 *) skb->data);
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	if (status)
 		return;
@@ -1194,7 +1194,7 @@ static void hci_cc_le_set_ext_adv_enable(struct hci_dev *hdev,
 	struct hci_cp_le_set_ext_adv_enable *cp;
 	__u8 status = *((__u8 *) skb->data);
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	if (status)
 		return;
@@ -1227,7 +1227,7 @@ static void hci_cc_le_set_scan_param(struct hci_dev *hdev, struct sk_buff *skb)
 	struct hci_cp_le_set_scan_param *cp;
 	__u8 status = *((__u8 *) skb->data);
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	if (status)
 		return;
@@ -1250,7 +1250,7 @@ static void hci_cc_le_set_ext_scan_param(struct hci_dev *hdev,
 	__u8 status = *((__u8 *) skb->data);
 	struct hci_cp_le_scan_phy_params *phy_param;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	if (status)
 		return;
@@ -1363,7 +1363,7 @@ static void hci_cc_le_set_scan_enable(struct hci_dev *hdev,
 	struct hci_cp_le_set_scan_enable *cp;
 	__u8 status = *((__u8 *) skb->data);
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	if (status)
 		return;
@@ -1381,7 +1381,7 @@ static void hci_cc_le_set_ext_scan_enable(struct hci_dev *hdev,
 	struct hci_cp_le_set_ext_scan_enable *cp;
 	__u8 status = *((__u8 *) skb->data);
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	if (status)
 		return;
@@ -1398,7 +1398,7 @@ static void hci_cc_le_read_num_adv_sets(struct hci_dev *hdev,
 {
 	struct hci_rp_le_read_num_supported_adv_sets *rp = (void *) skb->data;
 
-	BT_DBG("%s status 0x%2.2x No of Adv sets %u", hdev->name, rp->status,
+	BT_INFO("%s status 0x%2.2x No of Adv sets %u", hdev->name, rp->status,
 	       rp->num_of_sets);
 
 	if (rp->status)
@@ -1412,7 +1412,7 @@ static void hci_cc_le_read_white_list_size(struct hci_dev *hdev,
 {
 	struct hci_rp_le_read_white_list_size *rp = (void *) skb->data;
 
-	BT_DBG("%s status 0x%2.2x size %u", hdev->name, rp->status, rp->size);
+	BT_INFO("%s status 0x%2.2x size %u", hdev->name, rp->status, rp->size);
 
 	if (rp->status)
 		return;
@@ -1425,7 +1425,7 @@ static void hci_cc_le_clear_white_list(struct hci_dev *hdev,
 {
 	__u8 status = *((__u8 *) skb->data);
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	if (status)
 		return;
@@ -1439,7 +1439,7 @@ static void hci_cc_le_add_to_white_list(struct hci_dev *hdev,
 	struct hci_cp_le_add_to_white_list *sent;
 	__u8 status = *((__u8 *) skb->data);
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	if (status)
 		return;
@@ -1458,7 +1458,7 @@ static void hci_cc_le_del_from_white_list(struct hci_dev *hdev,
 	struct hci_cp_le_del_from_white_list *sent;
 	__u8 status = *((__u8 *) skb->data);
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	if (status)
 		return;
@@ -1476,7 +1476,7 @@ static void hci_cc_le_read_supported_states(struct hci_dev *hdev,
 {
 	struct hci_rp_le_read_supported_states *rp = (void *) skb->data;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	if (rp->status)
 		return;
@@ -1489,7 +1489,7 @@ static void hci_cc_le_read_def_data_len(struct hci_dev *hdev,
 {
 	struct hci_rp_le_read_def_data_len *rp = (void *) skb->data;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	if (rp->status)
 		return;
@@ -1504,7 +1504,7 @@ static void hci_cc_le_write_def_data_len(struct hci_dev *hdev,
 	struct hci_cp_le_write_def_data_len *sent;
 	__u8 status = *((__u8 *) skb->data);
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	if (status)
 		return;
@@ -1523,7 +1523,7 @@ static void hci_cc_le_add_to_resolv_list(struct hci_dev *hdev,
 	struct hci_cp_le_add_to_resolv_list *sent;
 	__u8 status = *((__u8 *) skb->data);
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	if (status)
 		return;
@@ -1543,7 +1543,7 @@ static void hci_cc_le_del_from_resolv_list(struct hci_dev *hdev,
 	struct hci_cp_le_del_from_resolv_list *sent;
 	__u8 status = *((__u8 *) skb->data);
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	if (status)
 		return;
@@ -1561,7 +1561,7 @@ static void hci_cc_le_clear_resolv_list(struct hci_dev *hdev,
 {
 	__u8 status = *((__u8 *) skb->data);
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	if (status)
 		return;
@@ -1574,7 +1574,7 @@ static void hci_cc_le_read_resolv_list_size(struct hci_dev *hdev,
 {
 	struct hci_rp_le_read_resolv_list_size *rp = (void *) skb->data;
 
-	BT_DBG("%s status 0x%2.2x size %u", hdev->name, rp->status, rp->size);
+	BT_INFO("%s status 0x%2.2x size %u", hdev->name, rp->status, rp->size);
 
 	if (rp->status)
 		return;
@@ -1587,7 +1587,7 @@ static void hci_cc_le_set_addr_resolution_enable(struct hci_dev *hdev,
 {
 	__u8 *sent, status = *((__u8 *) skb->data);
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	if (status)
 		return;
@@ -1611,7 +1611,7 @@ static void hci_cc_le_read_max_data_len(struct hci_dev *hdev,
 {
 	struct hci_rp_le_read_max_data_len *rp = (void *) skb->data;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	if (rp->status)
 		return;
@@ -1628,7 +1628,7 @@ static void hci_cc_write_le_host_supported(struct hci_dev *hdev,
 	struct hci_cp_write_le_host_supported *sent;
 	__u8 status = *((__u8 *) skb->data);
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	if (status)
 		return;
@@ -1661,7 +1661,7 @@ static void hci_cc_set_adv_param(struct hci_dev *hdev, struct sk_buff *skb)
 	struct hci_cp_le_set_adv_param *cp;
 	u8 status = *((u8 *) skb->data);
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	if (status)
 		return;
@@ -1681,7 +1681,7 @@ static void hci_cc_set_ext_adv_param(struct hci_dev *hdev, struct sk_buff *skb)
 	struct hci_cp_le_set_ext_adv_params *cp;
 	struct adv_info *adv_instance;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	if (rp->status)
 		return;
@@ -1711,7 +1711,7 @@ static void hci_cc_read_rssi(struct hci_dev *hdev, struct sk_buff *skb)
 	struct hci_rp_read_rssi *rp = (void *) skb->data;
 	struct hci_conn *conn;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	if (rp->status)
 		return;
@@ -1731,7 +1731,7 @@ static void hci_cc_read_tx_power(struct hci_dev *hdev, struct sk_buff *skb)
 	struct hci_rp_read_tx_power *rp = (void *) skb->data;
 	struct hci_conn *conn;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, rp->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, rp->status);
 
 	if (rp->status)
 		return;
@@ -1764,7 +1764,7 @@ static void hci_cc_write_ssp_debug_mode(struct hci_dev *hdev, struct sk_buff *sk
 	u8 status = *((u8 *) skb->data);
 	u8 *mode;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	if (status)
 		return;
@@ -1776,7 +1776,7 @@ static void hci_cc_write_ssp_debug_mode(struct hci_dev *hdev, struct sk_buff *sk
 
 static void hci_cs_inquiry(struct hci_dev *hdev, __u8 status)
 {
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	if (status) {
 		hci_conn_check_pending(hdev);
@@ -1791,7 +1791,7 @@ static void hci_cs_create_conn(struct hci_dev *hdev, __u8 status)
 	struct hci_cp_create_conn *cp;
 	struct hci_conn *conn;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	cp = hci_sent_cmd_data(hdev, HCI_OP_CREATE_CONN);
 	if (!cp)
@@ -1801,7 +1801,7 @@ static void hci_cs_create_conn(struct hci_dev *hdev, __u8 status)
 
 	conn = hci_conn_hash_lookup_ba(hdev, ACL_LINK, &cp->bdaddr);
 
-	BT_DBG("%s bdaddr %pMR hcon %p", hdev->name, &cp->bdaddr, conn);
+	BT_INFO("%s bdaddr %pMR hcon %p", hdev->name, &cp->bdaddr, conn);
 
 	if (status) {
 		if (conn && conn->state == BT_CONNECT) {
@@ -1830,7 +1830,7 @@ static void hci_cs_add_sco(struct hci_dev *hdev, __u8 status)
 	struct hci_conn *acl, *sco;
 	__u16 handle;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	if (!status)
 		return;
@@ -1841,7 +1841,7 @@ static void hci_cs_add_sco(struct hci_dev *hdev, __u8 status)
 
 	handle = __le16_to_cpu(cp->handle);
 
-	BT_DBG("%s handle 0x%4.4x", hdev->name, handle);
+	BT_INFO("%s handle 0x%4.4x", hdev->name, handle);
 
 	hci_dev_lock(hdev);
 
@@ -1864,7 +1864,7 @@ static void hci_cs_auth_requested(struct hci_dev *hdev, __u8 status)
 	struct hci_cp_auth_requested *cp;
 	struct hci_conn *conn;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	if (!status)
 		return;
@@ -1891,7 +1891,7 @@ static void hci_cs_set_conn_encrypt(struct hci_dev *hdev, __u8 status)
 	struct hci_cp_set_conn_encrypt *cp;
 	struct hci_conn *conn;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	if (!status)
 		return;
@@ -2024,7 +2024,7 @@ static void hci_cs_remote_name_req(struct hci_dev *hdev, __u8 status)
 	struct hci_cp_remote_name_req *cp;
 	struct hci_conn *conn;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	/* If successful wait for the name req complete event before
 	 * checking for the need to do authentication */
@@ -2067,7 +2067,7 @@ static void hci_cs_read_remote_features(struct hci_dev *hdev, __u8 status)
 	struct hci_cp_read_remote_features *cp;
 	struct hci_conn *conn;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	if (!status)
 		return;
@@ -2094,7 +2094,7 @@ static void hci_cs_read_remote_ext_features(struct hci_dev *hdev, __u8 status)
 	struct hci_cp_read_remote_ext_features *cp;
 	struct hci_conn *conn;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	if (!status)
 		return;
@@ -2122,7 +2122,7 @@ static void hci_cs_setup_sync_conn(struct hci_dev *hdev, __u8 status)
 	struct hci_conn *acl, *sco;
 	__u16 handle;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	if (!status)
 		return;
@@ -2133,7 +2133,7 @@ static void hci_cs_setup_sync_conn(struct hci_dev *hdev, __u8 status)
 
 	handle = __le16_to_cpu(cp->handle);
 
-	BT_DBG("%s handle 0x%4.4x", hdev->name, handle);
+	BT_INFO("%s handle 0x%4.4x", hdev->name, handle);
 
 	hci_dev_lock(hdev);
 
@@ -2156,7 +2156,7 @@ static void hci_cs_sniff_mode(struct hci_dev *hdev, __u8 status)
 	struct hci_cp_sniff_mode *cp;
 	struct hci_conn *conn;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	if (!status)
 		return;
@@ -2183,7 +2183,7 @@ static void hci_cs_exit_sniff_mode(struct hci_dev *hdev, __u8 status)
 	struct hci_cp_exit_sniff_mode *cp;
 	struct hci_conn *conn;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	if (!status)
 		return;
@@ -2266,7 +2266,7 @@ static void hci_cs_le_create_conn(struct hci_dev *hdev, u8 status)
 {
 	struct hci_cp_le_create_conn *cp;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	/* All connection failure handling is taken care of by the
 	 * hci_le_conn_failed function which is triggered by the HCI
@@ -2291,7 +2291,7 @@ static void hci_cs_le_ext_create_conn(struct hci_dev *hdev, u8 status)
 {
 	struct hci_cp_le_ext_create_conn *cp;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	/* All connection failure handling is taken care of by the
 	 * hci_le_conn_failed function which is triggered by the HCI
@@ -2317,7 +2317,7 @@ static void hci_cs_le_read_remote_features(struct hci_dev *hdev, u8 status)
 	struct hci_cp_le_read_remote_features *cp;
 	struct hci_conn *conn;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	if (!status)
 		return;
@@ -2344,7 +2344,7 @@ static void hci_cs_le_start_enc(struct hci_dev *hdev, u8 status)
 	struct hci_cp_le_start_enc *cp;
 	struct hci_conn *conn;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	if (!status)
 		return;
@@ -2374,7 +2374,7 @@ static void hci_cs_switch_role(struct hci_dev *hdev, u8 status)
 	struct hci_cp_switch_role *cp;
 	struct hci_conn *conn;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	if (!status)
 		return;
@@ -2398,7 +2398,7 @@ static void hci_inquiry_complete_evt(struct hci_dev *hdev, struct sk_buff *skb)
 	struct discovery_state *discov = &hdev->discovery;
 	struct inquiry_entry *e;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, status);
 
 	hci_conn_check_pending(hdev);
 
@@ -2457,7 +2457,7 @@ static void hci_inquiry_result_evt(struct hci_dev *hdev, struct sk_buff *skb)
 	struct inquiry_info *info = (void *) (skb->data + 1);
 	int num_rsp = *((__u8 *) skb->data);
 
-	BT_DBG("%s num_rsp %d", hdev->name, num_rsp);
+	BT_INFO("%s num_rsp %d", hdev->name, num_rsp);
 
 	if (!num_rsp || skb->len < num_rsp * sizeof(*info) + 1)
 		return;
@@ -2494,7 +2494,7 @@ static void hci_conn_complete_evt(struct hci_dev *hdev, struct sk_buff *skb)
 	struct hci_ev_conn_complete *ev = (void *) skb->data;
 	struct hci_conn *conn;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	hci_dev_lock(hdev);
 
@@ -2591,7 +2591,7 @@ static void hci_conn_request_evt(struct hci_dev *hdev, struct sk_buff *skb)
 	struct hci_conn *conn;
 	__u8 flags = 0;
 
-	BT_DBG("%s bdaddr %pMR type 0x%x", hdev->name, &ev->bdaddr,
+	BT_INFO("%s bdaddr %pMR type 0x%x", hdev->name, &ev->bdaddr,
 	       ev->link_type);
 
 	mask |= hci_proto_connect_ind(hdev, &ev->bdaddr, ev->link_type,
@@ -2703,7 +2703,7 @@ static void hci_disconn_complete_evt(struct hci_dev *hdev, struct sk_buff *skb)
 	bool mgmt_connected;
 	u8 type;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, ev->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, ev->status);
 
 	hci_dev_lock(hdev);
 
@@ -2783,7 +2783,7 @@ static void hci_auth_complete_evt(struct hci_dev *hdev, struct sk_buff *skb)
 	struct hci_ev_auth_complete *ev = (void *) skb->data;
 	struct hci_conn *conn;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, ev->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, ev->status);
 
 	hci_dev_lock(hdev);
 
@@ -2853,7 +2853,7 @@ static void hci_remote_name_evt(struct hci_dev *hdev, struct sk_buff *skb)
 	struct hci_ev_remote_name *ev = (void *) skb->data;
 	struct hci_conn *conn;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	hci_conn_check_pending(hdev);
 
@@ -2897,7 +2897,7 @@ static void read_enc_key_size_complete(struct hci_dev *hdev, u8 status,
 	struct hci_conn *conn;
 	u16 handle;
 
-	BT_DBG("%s status 0x%02x", hdev->name, status);
+	BT_INFO("%s status 0x%02x", hdev->name, status);
 
 	if (!skb || skb->len < sizeof(*rp)) {
 		bt_dev_err(hdev, "invalid read key size response");
@@ -2936,7 +2936,7 @@ static void hci_encrypt_change_evt(struct hci_dev *hdev, struct sk_buff *skb)
 	struct hci_ev_encrypt_change *ev = (void *) skb->data;
 	struct hci_conn *conn;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, ev->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, ev->status);
 
 	hci_dev_lock(hdev);
 
@@ -3051,7 +3051,7 @@ static void hci_change_link_key_complete_evt(struct hci_dev *hdev,
 	struct hci_ev_change_link_key_complete *ev = (void *) skb->data;
 	struct hci_conn *conn;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, ev->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, ev->status);
 
 	hci_dev_lock(hdev);
 
@@ -3074,7 +3074,7 @@ static void hci_remote_features_evt(struct hci_dev *hdev,
 	struct hci_ev_remote_features *ev = (void *) skb->data;
 	struct hci_conn *conn;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, ev->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, ev->status);
 
 	hci_dev_lock(hdev);
 
@@ -3455,7 +3455,7 @@ static void hci_cmd_complete_evt(struct hci_dev *hdev, struct sk_buff *skb,
 		break;
 
 	default:
-		BT_DBG("%s opcode 0x%4.4x", hdev->name, *opcode);
+		BT_INFO("%s opcode 0x%4.4x", hdev->name, *opcode);
 		break;
 	}
 
@@ -3560,7 +3560,7 @@ static void hci_cmd_status_evt(struct hci_dev *hdev, struct sk_buff *skb,
 		break;
 
 	default:
-		BT_DBG("%s opcode 0x%4.4x", hdev->name, *opcode);
+		BT_INFO("%s opcode 0x%4.4x", hdev->name, *opcode);
 		break;
 	}
 
@@ -3605,7 +3605,7 @@ static void hci_role_change_evt(struct hci_dev *hdev, struct sk_buff *skb)
 	struct hci_ev_role_change *ev = (void *) skb->data;
 	struct hci_conn *conn;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, ev->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, ev->status);
 
 	hci_dev_lock(hdev);
 
@@ -3634,11 +3634,11 @@ static void hci_num_comp_pkts_evt(struct hci_dev *hdev, struct sk_buff *skb)
 
 	if (skb->len < sizeof(*ev) ||
 	    skb->len < struct_size(ev, handles, ev->num_hndl)) {
-		BT_DBG("%s bad parameters", hdev->name);
+		BT_INFO("%s bad parameters", hdev->name);
 		return;
 	}
 
-	BT_DBG("%s num_hndl %d", hdev->name, ev->num_hndl);
+	BT_INFO("%s num_hndl %d", hdev->name, ev->num_hndl);
 
 	for (i = 0; i < ev->num_hndl; i++) {
 		struct hci_comp_pkts_info *info = &ev->handles[i];
@@ -3722,11 +3722,11 @@ static void hci_num_comp_blocks_evt(struct hci_dev *hdev, struct sk_buff *skb)
 
 	if (skb->len < sizeof(*ev) ||
 	    skb->len < struct_size(ev, handles, ev->num_hndl)) {
-		BT_DBG("%s bad parameters", hdev->name);
+		BT_INFO("%s bad parameters", hdev->name);
 		return;
 	}
 
-	BT_DBG("%s num_blocks %d num_hndl %d", hdev->name, ev->num_blocks,
+	BT_INFO("%s num_blocks %d num_hndl %d", hdev->name, ev->num_blocks,
 	       ev->num_hndl);
 
 	for (i = 0; i < ev->num_hndl; i++) {
@@ -3766,7 +3766,7 @@ static void hci_mode_change_evt(struct hci_dev *hdev, struct sk_buff *skb)
 	struct hci_ev_mode_change *ev = (void *) skb->data;
 	struct hci_conn *conn;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, ev->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, ev->status);
 
 	hci_dev_lock(hdev);
 
@@ -3794,7 +3794,7 @@ static void hci_pin_code_request_evt(struct hci_dev *hdev, struct sk_buff *skb)
 	struct hci_ev_pin_code_req *ev = (void *) skb->data;
 	struct hci_conn *conn;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	hci_dev_lock(hdev);
 
@@ -3866,7 +3866,7 @@ static void hci_link_key_request_evt(struct hci_dev *hdev, struct sk_buff *skb)
 	struct hci_conn *conn;
 	struct link_key *key;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	if (!hci_dev_test_flag(hdev, HCI_MGMT))
 		return;
@@ -3875,12 +3875,12 @@ static void hci_link_key_request_evt(struct hci_dev *hdev, struct sk_buff *skb)
 
 	key = hci_find_link_key(hdev, &ev->bdaddr);
 	if (!key) {
-		BT_DBG("%s link key not found for %pMR", hdev->name,
+		BT_INFO("%s link key not found for %pMR", hdev->name,
 		       &ev->bdaddr);
 		goto not_found;
 	}
 
-	BT_DBG("%s found key type %u for %pMR", hdev->name, key->type,
+	BT_INFO("%s found key type %u for %pMR", hdev->name, key->type,
 	       &ev->bdaddr);
 
 	conn = hci_conn_hash_lookup_ba(hdev, ACL_LINK, &ev->bdaddr);
@@ -3890,14 +3890,14 @@ static void hci_link_key_request_evt(struct hci_dev *hdev, struct sk_buff *skb)
 		if ((key->type == HCI_LK_UNAUTH_COMBINATION_P192 ||
 		     key->type == HCI_LK_UNAUTH_COMBINATION_P256) &&
 		    conn->auth_type != 0xff && (conn->auth_type & 0x01)) {
-			BT_DBG("%s ignoring unauthenticated key", hdev->name);
+			BT_INFO("%s ignoring unauthenticated key", hdev->name);
 			goto not_found;
 		}
 
 		if (key->type == HCI_LK_COMBINATION && key->pin_len < 16 &&
 		    (conn->pending_sec_level == BT_SECURITY_HIGH ||
 		     conn->pending_sec_level == BT_SECURITY_FIPS)) {
-			BT_DBG("%s ignoring key unauthenticated for high security",
+			BT_INFO("%s ignoring key unauthenticated for high security",
 			       hdev->name);
 			goto not_found;
 		}
@@ -3927,7 +3927,7 @@ static void hci_link_key_notify_evt(struct hci_dev *hdev, struct sk_buff *skb)
 	bool persistent;
 	u8 pin_len = 0;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	hci_dev_lock(hdev);
 
@@ -3984,7 +3984,7 @@ static void hci_clock_offset_evt(struct hci_dev *hdev, struct sk_buff *skb)
 	struct hci_ev_clock_offset *ev = (void *) skb->data;
 	struct hci_conn *conn;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, ev->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, ev->status);
 
 	hci_dev_lock(hdev);
 
@@ -4007,7 +4007,7 @@ static void hci_pkt_type_change_evt(struct hci_dev *hdev, struct sk_buff *skb)
 	struct hci_ev_pkt_type_change *ev = (void *) skb->data;
 	struct hci_conn *conn;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, ev->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, ev->status);
 
 	hci_dev_lock(hdev);
 
@@ -4023,7 +4023,7 @@ static void hci_pscan_rep_mode_evt(struct hci_dev *hdev, struct sk_buff *skb)
 	struct hci_ev_pscan_rep_mode *ev = (void *) skb->data;
 	struct inquiry_entry *ie;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	hci_dev_lock(hdev);
 
@@ -4042,7 +4042,7 @@ static void hci_inquiry_result_with_rssi_evt(struct hci_dev *hdev,
 	struct inquiry_data data;
 	int num_rsp = *((__u8 *) skb->data);
 
-	BT_DBG("%s num_rsp %d", hdev->name, num_rsp);
+	BT_INFO("%s num_rsp %d", hdev->name, num_rsp);
 
 	if (!num_rsp)
 		return;
@@ -4113,7 +4113,7 @@ static void hci_remote_ext_features_evt(struct hci_dev *hdev,
 	struct hci_ev_remote_ext_features *ev = (void *) skb->data;
 	struct hci_conn *conn;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	hci_dev_lock(hdev);
 
@@ -4177,7 +4177,7 @@ static void hci_sync_conn_complete_evt(struct hci_dev *hdev,
 	struct hci_ev_sync_conn_complete *ev = (void *) skb->data;
 	struct hci_conn *conn;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, ev->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, ev->status);
 
 	hci_dev_lock(hdev);
 
@@ -4279,7 +4279,7 @@ static void hci_extended_inquiry_result_evt(struct hci_dev *hdev,
 	int num_rsp = *((__u8 *) skb->data);
 	size_t eir_len;
 
-	BT_DBG("%s num_rsp %d", hdev->name, num_rsp);
+	BT_INFO("%s num_rsp %d", hdev->name, num_rsp);
 
 	if (!num_rsp || skb->len < num_rsp * sizeof(*info) + 1)
 		return;
@@ -4327,7 +4327,7 @@ static void hci_key_refresh_complete_evt(struct hci_dev *hdev,
 	struct hci_ev_key_refresh_complete *ev = (void *) skb->data;
 	struct hci_conn *conn;
 
-	BT_DBG("%s status 0x%2.2x handle 0x%4.4x", hdev->name, ev->status,
+	BT_INFO("%s status 0x%2.2x handle 0x%4.4x", hdev->name, ev->status,
 	       __le16_to_cpu(ev->handle));
 
 	hci_dev_lock(hdev);
@@ -4436,7 +4436,7 @@ static void hci_io_capa_request_evt(struct hci_dev *hdev, struct sk_buff *skb)
 	struct hci_ev_io_capa_request *ev = (void *) skb->data;
 	struct hci_conn *conn;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	hci_dev_lock(hdev);
 
@@ -4505,7 +4505,7 @@ static void hci_io_capa_reply_evt(struct hci_dev *hdev, struct sk_buff *skb)
 	struct hci_ev_io_capa_reply *ev = (void *) skb->data;
 	struct hci_conn *conn;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	hci_dev_lock(hdev);
 
@@ -4527,7 +4527,7 @@ static void hci_user_confirm_request_evt(struct hci_dev *hdev,
 	int loc_mitm, rem_mitm, confirm_hint = 0;
 	struct hci_conn *conn;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	hci_dev_lock(hdev);
 
@@ -4548,7 +4548,7 @@ static void hci_user_confirm_request_evt(struct hci_dev *hdev,
 	 */
 	if (conn->pending_sec_level > BT_SECURITY_MEDIUM &&
 	    conn->remote_cap == HCI_IO_NO_INPUT_OUTPUT) {
-		BT_DBG("Rejecting request: remote device can't provide MITM");
+		BT_INFO("Rejecting request: remote device can't provide MITM");
 		hci_send_cmd(hdev, HCI_OP_USER_CONFIRM_NEG_REPLY,
 			     sizeof(ev->bdaddr), &ev->bdaddr);
 		goto unlock;
@@ -4567,12 +4567,12 @@ static void hci_user_confirm_request_evt(struct hci_dev *hdev,
 		if (!test_bit(HCI_CONN_AUTH_PEND, &conn->flags) &&
 		    conn->io_capability != HCI_IO_NO_INPUT_OUTPUT &&
 		    (loc_mitm || rem_mitm)) {
-			BT_DBG("Confirming auto-accept as acceptor");
+			BT_INFO("Confirming auto-accept as acceptor");
 			confirm_hint = 1;
 			goto confirm;
 		}
 
-		BT_DBG("Auto-accept of user confirmation with %ums delay",
+		BT_INFO("Auto-accept of user confirmation with %ums delay",
 		       hdev->auto_accept_delay);
 
 		if (hdev->auto_accept_delay > 0) {
@@ -4600,7 +4600,7 @@ static void hci_user_passkey_request_evt(struct hci_dev *hdev,
 {
 	struct hci_ev_user_passkey_req *ev = (void *) skb->data;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	if (hci_dev_test_flag(hdev, HCI_MGMT))
 		mgmt_user_passkey_request(hdev, &ev->bdaddr, ACL_LINK, 0);
@@ -4612,7 +4612,7 @@ static void hci_user_passkey_notify_evt(struct hci_dev *hdev,
 	struct hci_ev_user_passkey_notify *ev = (void *) skb->data;
 	struct hci_conn *conn;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	conn = hci_conn_hash_lookup_ba(hdev, ACL_LINK, &ev->bdaddr);
 	if (!conn)
@@ -4632,7 +4632,7 @@ static void hci_keypress_notify_evt(struct hci_dev *hdev, struct sk_buff *skb)
 	struct hci_ev_keypress_notify *ev = (void *) skb->data;
 	struct hci_conn *conn;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	conn = hci_conn_hash_lookup_ba(hdev, ACL_LINK, &ev->bdaddr);
 	if (!conn)
@@ -4671,7 +4671,7 @@ static void hci_simple_pair_complete_evt(struct hci_dev *hdev,
 	struct hci_ev_simple_pair_complete *ev = (void *) skb->data;
 	struct hci_conn *conn;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	hci_dev_lock(hdev);
 
@@ -4703,7 +4703,7 @@ static void hci_remote_host_features_evt(struct hci_dev *hdev,
 	struct inquiry_entry *ie;
 	struct hci_conn *conn;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	hci_dev_lock(hdev);
 
@@ -4724,7 +4724,7 @@ static void hci_remote_oob_data_request_evt(struct hci_dev *hdev,
 	struct hci_ev_remote_oob_data_request *ev = (void *) skb->data;
 	struct oob_data *data;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	hci_dev_lock(hdev);
 
@@ -4778,7 +4778,7 @@ static void hci_chan_selected_evt(struct hci_dev *hdev, struct sk_buff *skb)
 	struct hci_ev_channel_selected *ev = (void *)skb->data;
 	struct hci_conn *hcon;
 
-	BT_DBG("%s handle 0x%2.2x", hdev->name, ev->phy_handle);
+	BT_INFO("%s handle 0x%2.2x", hdev->name, ev->phy_handle);
 
 	skb_pull(skb, sizeof(*ev));
 
@@ -4795,7 +4795,7 @@ static void hci_phy_link_complete_evt(struct hci_dev *hdev,
 	struct hci_ev_phy_link_complete *ev = (void *) skb->data;
 	struct hci_conn *hcon, *bredr_hcon;
 
-	BT_DBG("%s handle 0x%2.2x status 0x%2.2x", hdev->name, ev->phy_handle,
+	BT_INFO("%s handle 0x%2.2x status 0x%2.2x", hdev->name, ev->phy_handle,
 	       ev->status);
 
 	hci_dev_lock(hdev);
@@ -4841,7 +4841,7 @@ static void hci_loglink_complete_evt(struct hci_dev *hdev, struct sk_buff *skb)
 	struct hci_chan *hchan;
 	struct amp_mgr *mgr;
 
-	BT_DBG("%s log_handle 0x%4.4x phy_handle 0x%2.2x status 0x%2.2x",
+	BT_INFO("%s log_handle 0x%4.4x phy_handle 0x%2.2x status 0x%2.2x",
 	       hdev->name, le16_to_cpu(ev->handle), ev->phy_handle,
 	       ev->status);
 
@@ -4857,7 +4857,7 @@ static void hci_loglink_complete_evt(struct hci_dev *hdev, struct sk_buff *skb)
 	hchan->handle = le16_to_cpu(ev->handle);
 	hchan->amp = true;
 
-	BT_DBG("hcon %p mgr %p hchan %p", hcon, hcon->amp_mgr, hchan);
+	BT_INFO("hcon %p mgr %p hchan %p", hcon, hcon->amp_mgr, hchan);
 
 	mgr = hcon->amp_mgr;
 	if (mgr && mgr->bredr_chan) {
@@ -4879,7 +4879,7 @@ static void hci_disconn_loglink_complete_evt(struct hci_dev *hdev,
 	struct hci_ev_disconn_logical_link_complete *ev = (void *) skb->data;
 	struct hci_chan *hchan;
 
-	BT_DBG("%s log handle 0x%4.4x status 0x%2.2x", hdev->name,
+	BT_INFO("%s log handle 0x%4.4x status 0x%2.2x", hdev->name,
 	       le16_to_cpu(ev->handle), ev->status);
 
 	if (ev->status)
@@ -4903,7 +4903,7 @@ static void hci_disconn_phylink_complete_evt(struct hci_dev *hdev,
 	struct hci_ev_disconn_phy_link_complete *ev = (void *) skb->data;
 	struct hci_conn *hcon;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, ev->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, ev->status);
 
 	if (ev->status)
 		return;
@@ -5116,7 +5116,7 @@ static void hci_le_conn_complete_evt(struct hci_dev *hdev, struct sk_buff *skb)
 {
 	struct hci_ev_le_conn_complete *ev = (void *) skb->data;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, ev->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, ev->status);
 
 	le_conn_complete_evt(hdev, ev->status, &ev->bdaddr, ev->bdaddr_type,
 			     NULL, ev->role, le16_to_cpu(ev->handle),
@@ -5130,7 +5130,7 @@ static void hci_le_enh_conn_complete_evt(struct hci_dev *hdev,
 {
 	struct hci_ev_le_enh_conn_complete *ev = (void *) skb->data;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, ev->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, ev->status);
 
 	le_conn_complete_evt(hdev, ev->status, &ev->bdaddr, ev->bdaddr_type,
 			     &ev->local_rpa, ev->role, le16_to_cpu(ev->handle),
@@ -5144,7 +5144,7 @@ static void hci_le_ext_adv_term_evt(struct hci_dev *hdev, struct sk_buff *skb)
 	struct hci_evt_le_ext_adv_set_term *ev = (void *) skb->data;
 	struct hci_conn *conn;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, ev->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, ev->status);
 
 	if (ev->status) {
 		struct adv_info *adv;
@@ -5185,7 +5185,7 @@ static void hci_le_conn_update_complete_evt(struct hci_dev *hdev,
 	struct hci_ev_le_conn_update_complete *ev = (void *) skb->data;
 	struct hci_conn *conn;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, ev->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, ev->status);
 
 	if (ev->status)
 		return;
@@ -5284,7 +5284,7 @@ static struct hci_conn *check_pending_le_conn(struct hci_dev *hdev,
 		 */
 		break;
 	default:
-		BT_DBG("Failed to connect: err %ld", PTR_ERR(conn));
+		BT_INFO("Failed to connect: err %ld", PTR_ERR(conn));
 		return NULL;
 	}
 
@@ -5606,7 +5606,7 @@ static void hci_le_remote_feat_complete_evt(struct hci_dev *hdev,
 	struct hci_ev_le_remote_feat_complete *ev = (void *)skb->data;
 	struct hci_conn *conn;
 
-	BT_DBG("%s status 0x%2.2x", hdev->name, ev->status);
+	BT_INFO("%s status 0x%2.2x", hdev->name, ev->status);
 
 	hci_dev_lock(hdev);
 
@@ -5650,7 +5650,7 @@ static void hci_le_ltk_request_evt(struct hci_dev *hdev, struct sk_buff *skb)
 	struct hci_conn *conn;
 	struct smp_ltk *ltk;
 
-	BT_DBG("%s handle 0x%4.4x", hdev->name, __le16_to_cpu(ev->handle));
+	BT_INFO("%s handle 0x%4.4x", hdev->name, __le16_to_cpu(ev->handle));
 
 	hci_dev_lock(hdev);
 
@@ -5892,7 +5892,7 @@ static bool hci_get_cmd_complete(struct hci_dev *hdev, u16 opcode,
 	skb_pull(skb, sizeof(*ev));
 
 	if (opcode != __le16_to_cpu(ev->opcode)) {
-		BT_DBG("opcode doesn't match (0x%2.2x != 0x%2.2x)", opcode,
+		BT_INFO("opcode doesn't match (0x%2.2x != 0x%2.2x)", opcode,
 		       __le16_to_cpu(ev->opcode));
 		return false;
 	}
@@ -6111,7 +6111,7 @@ void hci_event_packet(struct hci_dev *hdev, struct sk_buff *skb)
 		break;
 
 	default:
-		BT_DBG("%s event 0x%2.2x", hdev->name, event);
+		BT_INFO("%s event 0x%2.2x", hdev->name, event);
 		break;
 	}
 
diff --git a/net/bluetooth/hci_request.c b/net/bluetooth/hci_request.c
index 7f3f4ea56d44..d202264724a7 100644
--- a/net/bluetooth/hci_request.c
+++ b/net/bluetooth/hci_request.c
@@ -58,7 +58,7 @@ static int req_run(struct hci_request *req, hci_req_complete_t complete,
 	struct sk_buff *skb;
 	unsigned long flags;
 
-	BT_DBG("length %u", skb_queue_len(&req->cmd_q));
+	BT_INFO("length %u", skb_queue_len(&req->cmd_q));
 
 	/* If an error occurred during request building, remove all HCI
 	 * commands queued on the HCI request queue.
@@ -102,7 +102,7 @@ int hci_req_run_skb(struct hci_request *req, hci_req_complete_skb_t complete)
 static void hci_req_sync_complete(struct hci_dev *hdev, u8 result, u16 opcode,
 				  struct sk_buff *skb)
 {
-	BT_DBG("%s result 0x%2.2x", hdev->name, result);
+	BT_INFO("%s result 0x%2.2x", hdev->name, result);
 
 	if (hdev->req_status == HCI_REQ_PEND) {
 		hdev->req_result = result;
@@ -115,7 +115,7 @@ static void hci_req_sync_complete(struct hci_dev *hdev, u8 result, u16 opcode,
 
 void hci_req_sync_cancel(struct hci_dev *hdev, int err)
 {
-	BT_DBG("%s err 0x%2.2x", hdev->name, err);
+	BT_INFO("%s err 0x%2.2x", hdev->name, err);
 
 	if (hdev->req_status == HCI_REQ_PEND) {
 		hdev->req_result = err;
@@ -131,7 +131,7 @@ struct sk_buff *__hci_cmd_sync_ev(struct hci_dev *hdev, u16 opcode, u32 plen,
 	struct sk_buff *skb;
 	int err = 0;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	hci_req_init(&req, hdev);
 
@@ -167,7 +167,7 @@ struct sk_buff *__hci_cmd_sync_ev(struct hci_dev *hdev, u16 opcode, u32 plen,
 	skb = hdev->req_skb;
 	hdev->req_skb = NULL;
 
-	BT_DBG("%s end: err %d", hdev->name, err);
+	BT_INFO("%s end: err %d", hdev->name, err);
 
 	if (err < 0) {
 		kfree_skb(skb);
@@ -196,7 +196,7 @@ int __hci_req_sync(struct hci_dev *hdev, int (*func)(struct hci_request *req,
 	struct hci_request req;
 	int err = 0;
 
-	BT_DBG("%s start", hdev->name);
+	BT_INFO("%s start", hdev->name);
 
 	hci_req_init(&req, hdev);
 
@@ -260,7 +260,7 @@ int __hci_req_sync(struct hci_dev *hdev, int (*func)(struct hci_request *req,
 	hdev->req_skb = NULL;
 	hdev->req_status = hdev->req_result = 0;
 
-	BT_DBG("%s end: err %d", hdev->name, err);
+	BT_INFO("%s end: err %d", hdev->name, err);
 
 	return err;
 }
@@ -304,7 +304,7 @@ struct sk_buff *hci_prepare_cmd(struct hci_dev *hdev, u16 opcode, u32 plen,
 	if (plen)
 		skb_put_data(skb, param, plen);
 
-	BT_DBG("skb len %d", skb->len);
+	BT_INFO("skb len %d", skb->len);
 
 	hci_skb_pkt_type(skb) = HCI_COMMAND_PKT;
 	hci_skb_opcode(skb) = opcode;
@@ -319,7 +319,7 @@ void hci_req_add_ev(struct hci_request *req, u16 opcode, u32 plen,
 	struct hci_dev *hdev = req->hdev;
 	struct sk_buff *skb;
 
-	BT_DBG("%s opcode 0x%4.4x plen %d", hdev->name, opcode, plen);
+	BT_INFO("%s opcode 0x%4.4x plen %d", hdev->name, opcode, plen);
 
 	/* If an error occurred during request building, there is no point in
 	 * queueing the HCI command. We can simply return.
@@ -432,7 +432,7 @@ static void __hci_update_background_scan(struct hci_request *req)
 
 		hci_req_add_le_scan_disable(req);
 
-		BT_DBG("%s stopping background scanning", hdev->name);
+		BT_INFO("%s stopping background scanning", hdev->name);
 	} else {
 		/* If there is at least one pending LE connection, we should
 		 * keep the background scan running.
@@ -453,7 +453,7 @@ static void __hci_update_background_scan(struct hci_request *req)
 
 		hci_req_add_le_passive_scan(req);
 
-		BT_DBG("%s starting background scanning", hdev->name);
+		BT_INFO("%s starting background scanning", hdev->name);
 	}
 }
 
@@ -1413,7 +1413,7 @@ int hci_req_update_adv_data(struct hci_dev *hdev, u8 instance)
 
 static void adv_enable_complete(struct hci_dev *hdev, u8 status, u16 opcode)
 {
-	BT_DBG("%s status %u", hdev->name, status);
+	BT_INFO("%s status %u", hdev->name, status);
 }
 
 void hci_req_reenable_advertising(struct hci_dev *hdev)
@@ -1450,7 +1450,7 @@ static void adv_timeout_expire(struct work_struct *work)
 	struct hci_request req;
 	u8 instance;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	hci_dev_lock(hdev);
 
@@ -1891,7 +1891,7 @@ static void set_random_addr(struct hci_request *req, bdaddr_t *rpa)
 	 */
 	if (hci_dev_test_flag(hdev, HCI_LE_ADV) ||
 	    hci_lookup_le_connect(hdev)) {
-		BT_DBG("Deferring random address update");
+		BT_INFO("Deferring random address update");
 		hci_dev_set_flag(hdev, HCI_RPA_EXPIRED);
 		return;
 	}
@@ -2107,7 +2107,7 @@ void __hci_req_update_class(struct hci_request *req)
 	struct hci_dev *hdev = req->hdev;
 	u8 cod[3];
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	if (!hdev_is_powered(hdev))
 		return;
@@ -2276,7 +2276,7 @@ void __hci_abort_conn(struct hci_request *req, struct hci_conn *conn,
 static void abort_conn_complete(struct hci_dev *hdev, u8 status, u16 opcode)
 {
 	if (status)
-		BT_DBG("Failed to abort connection: status 0x%2.2x", status);
+		BT_INFO("Failed to abort connection: status 0x%2.2x", status);
 }
 
 int hci_abort_conn(struct hci_conn *conn, u8 reason)
@@ -2339,7 +2339,7 @@ static int bredr_inquiry(struct hci_request *req, unsigned long opt)
 	const u8 liac[3] = { 0x00, 0x8b, 0x9e };
 	struct hci_cp_inquiry cp;
 
-	BT_DBG("%s", req->hdev->name);
+	BT_INFO("%s", req->hdev->name);
 
 	hci_dev_lock(req->hdev);
 	hci_inquiry_cache_flush(req->hdev);
@@ -2365,7 +2365,7 @@ static void le_scan_disable_work(struct work_struct *work)
 					    le_scan_disable.work);
 	u8 status;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	if (!hci_dev_test_flag(hdev, HCI_LE_SCAN))
 		return;
@@ -2456,7 +2456,7 @@ static void le_scan_restart_work(struct work_struct *work)
 	unsigned long timeout, duration, scan_start, now;
 	u8 status;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	hci_req_sync(hdev, le_scan_restart, 0, HCI_CMD_TIMEOUT, &status);
 	if (status) {
@@ -2506,7 +2506,7 @@ static int active_scan(struct hci_request *req, unsigned long opt)
 	u8 own_addr_type;
 	int err;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	if (hci_dev_test_flag(hdev, HCI_LE_ADV)) {
 		hci_dev_lock(hdev);
@@ -2550,7 +2550,7 @@ static int interleaved_discov(struct hci_request *req, unsigned long opt)
 {
 	int err;
 
-	BT_DBG("%s", req->hdev->name);
+	BT_INFO("%s", req->hdev->name);
 
 	err = active_scan(req, opt);
 	if (err)
@@ -2563,7 +2563,7 @@ static void start_discovery(struct hci_dev *hdev, u8 *status)
 {
 	unsigned long timeout;
 
-	BT_DBG("%s type %u", hdev->name, hdev->discovery.type);
+	BT_INFO("%s type %u", hdev->name, hdev->discovery.type);
 
 	switch (hdev->discovery.type) {
 	case DISCOV_TYPE_BREDR:
@@ -2611,7 +2611,7 @@ static void start_discovery(struct hci_dev *hdev, u8 *status)
 	if (*status)
 		return;
 
-	BT_DBG("%s timeout %u ms", hdev->name, jiffies_to_msecs(timeout));
+	BT_INFO("%s timeout %u ms", hdev->name, jiffies_to_msecs(timeout));
 
 	/* When service discovery is used and the controller has a
 	 * strict duplicate filter, it is important to remember the
@@ -2636,7 +2636,7 @@ bool hci_req_stop_discovery(struct hci_request *req)
 	struct inquiry_entry *e;
 	bool ret = false;
 
-	BT_DBG("%s state %u", hdev->name, hdev->discovery.state);
+	BT_INFO("%s state %u", hdev->name, hdev->discovery.state);
 
 	if (d->state == DISCOVERY_FINDING || d->state == DISCOVERY_STOPPING) {
 		if (test_bit(HCI_INQUIRY, &hdev->flags))
@@ -2716,7 +2716,7 @@ static void discov_off(struct work_struct *work)
 	struct hci_dev *hdev = container_of(work, struct hci_dev,
 					    discov_off.work);
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	hci_dev_lock(hdev);
 
diff --git a/net/bluetooth/hci_sock.c b/net/bluetooth/hci_sock.c
index befab857a39b..96944841c446 100644
--- a/net/bluetooth/hci_sock.c
+++ b/net/bluetooth/hci_sock.c
@@ -204,7 +204,7 @@ void hci_send_to_sock(struct hci_dev *hdev, struct sk_buff *skb)
 	struct sock *sk;
 	struct sk_buff *skb_copy = NULL;
 
-	BT_DBG("hdev %p len %d", hdev, skb->len);
+	BT_INFO("hdev %p len %d", hdev, skb->len);
 
 	read_lock(&hci_sk_list.lock);
 
@@ -267,7 +267,7 @@ static void __hci_send_to_channel(unsigned short channel, struct sk_buff *skb,
 {
 	struct sock *sk;
 
-	BT_DBG("channel %u len %d", channel, skb->len);
+	BT_INFO("channel %u len %d", channel, skb->len);
 
 	sk_for_each(sk, &hci_sk_list.head) {
 		struct sk_buff *nskb;
@@ -314,7 +314,7 @@ void hci_send_to_monitor(struct hci_dev *hdev, struct sk_buff *skb)
 	if (!atomic_read(&monitor_promisc))
 		return;
 
-	BT_DBG("hdev %p len %d", hdev, skb->len);
+	BT_INFO("hdev %p len %d", hdev, skb->len);
 
 	switch (hci_skb_pkt_type(skb)) {
 	case HCI_COMMAND_PKT:
@@ -737,7 +737,7 @@ static void hci_si_event(struct hci_dev *hdev, int type, int dlen, void *data)
 
 void hci_sock_dev_event(struct hci_dev *hdev, int event)
 {
-	BT_DBG("hdev %s event %d", hdev->name, event);
+	BT_INFO("hdev %s event %d", hdev->name, event);
 
 	if (atomic_read(&monitor_promisc)) {
 		struct sk_buff *skb;
@@ -831,7 +831,7 @@ static int hci_sock_release(struct socket *sock)
 	struct hci_dev *hdev;
 	struct sk_buff *skb;
 
-	BT_DBG("sock %p sk %p", sock, sk);
+	BT_INFO("sock %p sk %p", sock, sk);
 
 	if (!sk)
 		return 0;
@@ -975,7 +975,7 @@ static int hci_sock_ioctl(struct socket *sock, unsigned int cmd,
 	struct sock *sk = sock->sk;
 	int err;
 
-	BT_DBG("cmd %x arg %lx", cmd, arg);
+	BT_INFO("cmd %x arg %lx", cmd, arg);
 
 	lock_sock(sk);
 
@@ -1071,7 +1071,7 @@ static int hci_sock_bind(struct socket *sock, struct sockaddr *addr,
 	struct sk_buff *skb;
 	int len, err = 0;
 
-	BT_DBG("sock %p sk %p", sock, sk);
+	BT_INFO("sock %p sk %p", sock, sk);
 
 	if (!addr)
 		return -EINVAL;
@@ -1366,7 +1366,7 @@ static int hci_sock_getname(struct socket *sock, struct sockaddr *addr,
 	struct hci_dev *hdev;
 	int err = 0;
 
-	BT_DBG("sock %p sk %p", sock, sk);
+	BT_INFO("sock %p sk %p", sock, sk);
 
 	if (peer)
 		return -EOPNOTSUPP;
@@ -1435,7 +1435,7 @@ static int hci_sock_recvmsg(struct socket *sock, struct msghdr *msg,
 	int copied, err;
 	unsigned int skblen;
 
-	BT_DBG("sock %p, sk %p", sock, sk);
+	BT_INFO("sock %p, sk %p", sock, sk);
 
 	if (flags & MSG_OOB)
 		return -EOPNOTSUPP;
@@ -1494,7 +1494,7 @@ static int hci_mgmt_cmd(struct hci_mgmt_chan *chan, struct sock *sk,
 	bool var_len, no_hdev;
 	int err;
 
-	BT_DBG("got %zu bytes", msglen);
+	BT_INFO("got %zu bytes", msglen);
 
 	if (msglen < sizeof(*hdr))
 		return -EINVAL;
@@ -1533,7 +1533,7 @@ static int hci_mgmt_cmd(struct hci_mgmt_chan *chan, struct sock *sk,
 
 	if (opcode >= chan->handler_count ||
 	    chan->handlers[opcode].func == NULL) {
-		BT_DBG("Unknown op %u", opcode);
+		BT_INFO("Unknown op %u", opcode);
 		err = mgmt_cmd_status(sk, index, opcode,
 				      MGMT_STATUS_UNKNOWN_COMMAND);
 		goto done;
@@ -1699,7 +1699,7 @@ static int hci_sock_sendmsg(struct socket *sock, struct msghdr *msg,
 	struct sk_buff *skb;
 	int err;
 
-	BT_DBG("sock %p sk %p", sock, sk);
+	BT_INFO("sock %p sk %p", sock, sk);
 
 	if (msg->msg_flags & MSG_OOB)
 		return -EOPNOTSUPP;
@@ -1837,7 +1837,7 @@ static int hci_sock_setsockopt(struct socket *sock, int level, int optname,
 	struct sock *sk = sock->sk;
 	int err = 0, opt = 0;
 
-	BT_DBG("sk %p, opt %d", sk, optname);
+	BT_INFO("sk %p, opt %d", sk, optname);
 
 	if (level != SOL_HCI)
 		return -ENOPROTOOPT;
@@ -1923,7 +1923,7 @@ static int hci_sock_getsockopt(struct socket *sock, int level, int optname,
 	struct sock *sk = sock->sk;
 	int len, opt, err = 0;
 
-	BT_DBG("sk %p, opt %d", sk, optname);
+	BT_INFO("sk %p, opt %d", sk, optname);
 
 	if (level != SOL_HCI)
 		return -ENOPROTOOPT;
@@ -2016,7 +2016,7 @@ static int hci_sock_create(struct net *net, struct socket *sock, int protocol,
 {
 	struct sock *sk;
 
-	BT_DBG("sock %p", sock);
+	BT_INFO("sock %p", sock);
 
 	if (sock->type != SOCK_RAW)
 		return -ESOCKTNOSUPPORT;
diff --git a/net/bluetooth/hci_sysfs.c b/net/bluetooth/hci_sysfs.c
index b69d88b88d2e..9897d7306998 100644
--- a/net/bluetooth/hci_sysfs.c
+++ b/net/bluetooth/hci_sysfs.c
@@ -33,7 +33,7 @@ void hci_conn_init_sysfs(struct hci_conn *conn)
 {
 	struct hci_dev *hdev = conn->hdev;
 
-	BT_DBG("conn %p", conn);
+	BT_INFO("conn %p", conn);
 
 	conn->dev.type = &bt_link;
 	conn->dev.class = bt_class;
@@ -46,7 +46,7 @@ void hci_conn_add_sysfs(struct hci_conn *conn)
 {
 	struct hci_dev *hdev = conn->hdev;
 
-	BT_DBG("conn %p", conn);
+	BT_INFO("conn %p", conn);
 
 	dev_set_name(&conn->dev, "%s:%d", hdev->name, conn->handle);
 
diff --git a/net/bluetooth/l2cap_core.c b/net/bluetooth/l2cap_core.c
index 959a16b13303..6fe34001c6ad 100644
--- a/net/bluetooth/l2cap_core.c
+++ b/net/bluetooth/l2cap_core.c
@@ -265,7 +265,7 @@ static u16 l2cap_alloc_cid(struct l2cap_conn *conn)
 
 static void l2cap_state_change(struct l2cap_chan *chan, int state)
 {
-	BT_DBG("chan %p %s -> %s", chan, state_to_string(chan->state),
+	BT_INFO("chan %p %s -> %s", chan, state_to_string(chan->state),
 	       state_to_string(state));
 
 	chan->state = state;
@@ -416,7 +416,7 @@ static void l2cap_chan_timeout(struct work_struct *work)
 	struct l2cap_conn *conn = chan->conn;
 	int reason;
 
-	BT_DBG("chan %p state %s", chan, state_to_string(chan->state));
+	BT_INFO("chan %p state %s", chan, state_to_string(chan->state));
 
 	mutex_lock(&conn->chan_lock);
 	/* __set_chan_timer() calls l2cap_chan_hold(chan) while scheduling
@@ -470,7 +470,7 @@ struct l2cap_chan *l2cap_chan_create(void)
 	/* This flag is cleared in l2cap_chan_ready() */
 	set_bit(CONF_NOT_COMPLETE, &chan->conf_state);
 
-	BT_DBG("chan %p", chan);
+	BT_INFO("chan %p", chan);
 
 	return chan;
 }
@@ -480,7 +480,7 @@ static void l2cap_chan_destroy(struct kref *kref)
 {
 	struct l2cap_chan *chan = container_of(kref, struct l2cap_chan, kref);
 
-	BT_DBG("chan %p", chan);
+	BT_INFO("chan %p", chan);
 
 	write_lock(&chan_list_lock);
 	list_del(&chan->global_l);
@@ -491,14 +491,14 @@ static void l2cap_chan_destroy(struct kref *kref)
 
 void l2cap_chan_hold(struct l2cap_chan *c)
 {
-	BT_DBG("chan %p orig refcnt %d", c, kref_read(&c->kref));
+	BT_INFO("chan %p orig refcnt %d", c, kref_read(&c->kref));
 
 	kref_get(&c->kref);
 }
 
 void l2cap_chan_put(struct l2cap_chan *c)
 {
-	BT_DBG("chan %p orig refcnt %d", c, kref_read(&c->kref));
+	BT_INFO("chan %p orig refcnt %d", c, kref_read(&c->kref));
 
 	kref_put(&c->kref, l2cap_chan_destroy);
 }
@@ -541,7 +541,7 @@ static void l2cap_le_flowctl_init(struct l2cap_chan *chan, u16 tx_credits)
 
 void __l2cap_chan_add(struct l2cap_conn *conn, struct l2cap_chan *chan)
 {
-	BT_DBG("conn %p, psm 0x%2.2x, dcid 0x%4.4x", conn,
+	BT_INFO("conn %p, psm 0x%2.2x, dcid 0x%4.4x", conn,
 	       __le16_to_cpu(chan->psm), chan->dcid);
 
 	conn->disc_reason = HCI_ERROR_REMOTE_USER_TERM;
@@ -604,7 +604,7 @@ void l2cap_chan_del(struct l2cap_chan *chan, int err)
 
 	__clear_chan_timer(chan);
 
-	BT_DBG("chan %p, conn %p, err %d, state %s", chan, conn, err,
+	BT_INFO("chan %p, conn %p, err %d, state %s", chan, conn, err,
 	       state_to_string(chan->state));
 
 	chan->ops->teardown(chan, err);
@@ -633,7 +633,7 @@ void l2cap_chan_del(struct l2cap_chan *chan, int err)
 	if (chan->hs_hchan) {
 		struct hci_chan *hs_hchan = chan->hs_hchan;
 
-		BT_DBG("chan %p disconnect hs_hchan %p", chan, hs_hchan);
+		BT_INFO("chan %p disconnect hs_hchan %p", chan, hs_hchan);
 		amp_disconnect_logical_link(hs_hchan);
 	}
 
@@ -736,7 +736,7 @@ void l2cap_chan_close(struct l2cap_chan *chan, int reason)
 {
 	struct l2cap_conn *conn = chan->conn;
 
-	BT_DBG("chan %p state %s", chan, state_to_string(chan->state));
+	BT_INFO("chan %p state %s", chan, state_to_string(chan->state));
 
 	switch (chan->state) {
 	case BT_LISTEN:
@@ -869,7 +869,7 @@ static void l2cap_send_cmd(struct l2cap_conn *conn, u8 ident, u8 code, u16 len,
 	struct sk_buff *skb = l2cap_build_cmd(conn, code, ident, len, data);
 	u8 flags;
 
-	BT_DBG("code 0x%2.2x", code);
+	BT_INFO("code 0x%2.2x", code);
 
 	if (!skb)
 		return;
@@ -899,7 +899,7 @@ static void l2cap_do_send(struct l2cap_chan *chan, struct sk_buff *skb)
 	struct hci_conn *hcon = chan->conn->hcon;
 	u16 flags;
 
-	BT_DBG("chan %p, skb %p len %d priority %u", chan, skb, skb->len,
+	BT_INFO("chan %p, skb %p len %d priority %u", chan, skb, skb->len,
 	       skb->priority);
 
 	if (chan->hs_hcon && !__chan_is_moving(chan)) {
@@ -1086,7 +1086,7 @@ static void l2cap_send_sframe(struct l2cap_chan *chan,
 	struct sk_buff *skb;
 	u32 control_field;
 
-	BT_DBG("chan %p, control %p", chan, control);
+	BT_INFO("chan %p, control %p", chan, control);
 
 	if (!control->sframe)
 		return;
@@ -1108,7 +1108,7 @@ static void l2cap_send_sframe(struct l2cap_chan *chan,
 		__clear_ack_timer(chan);
 	}
 
-	BT_DBG("reqseq %d, final %d, poll %d, super %d", control->reqseq,
+	BT_INFO("reqseq %d, final %d, poll %d, super %d", control->reqseq,
 	       control->final, control->poll, control->super);
 
 	if (test_bit(FLAG_EXT_CTRL, &chan->flags))
@@ -1125,7 +1125,7 @@ static void l2cap_send_rr_or_rnr(struct l2cap_chan *chan, bool poll)
 {
 	struct l2cap_ctrl control;
 
-	BT_DBG("chan %p, poll %d", chan, poll);
+	BT_INFO("chan %p, poll %d", chan, poll);
 
 	memset(&control, 0, sizeof(control));
 	control.sframe = 1;
@@ -1214,7 +1214,7 @@ static void l2cap_move_setup(struct l2cap_chan *chan)
 {
 	struct sk_buff *skb;
 
-	BT_DBG("chan %p", chan);
+	BT_INFO("chan %p", chan);
 
 	if (chan->mode != L2CAP_MODE_ERTM)
 		return;
@@ -1248,7 +1248,7 @@ static void l2cap_move_setup(struct l2cap_chan *chan)
 static void l2cap_move_done(struct l2cap_chan *chan)
 {
 	u8 move_role = chan->move_role;
-	BT_DBG("chan %p", chan);
+	BT_INFO("chan %p", chan);
 
 	chan->move_state = L2CAP_MOVE_STABLE;
 	chan->move_role = L2CAP_MOVE_ROLE_NONE;
@@ -1329,7 +1329,7 @@ static void l2cap_le_start(struct l2cap_chan *chan)
 static void l2cap_start_connection(struct l2cap_chan *chan)
 {
 	if (__amp_capable(chan)) {
-		BT_DBG("chan %p AMP capable: discover AMPs", chan);
+		BT_INFO("chan %p AMP capable: discover AMPs", chan);
 		a2mp_discover_amp(chan);
 	} else if (chan->conn->hcon->type == LE_LINK) {
 		l2cap_le_start(chan);
@@ -1446,7 +1446,7 @@ static void l2cap_conn_start(struct l2cap_conn *conn)
 {
 	struct l2cap_chan *chan, *tmp;
 
-	BT_DBG("conn %p", conn);
+	BT_INFO("conn %p", conn);
 
 	mutex_lock(&conn->chan_lock);
 
@@ -1527,7 +1527,7 @@ static void l2cap_le_conn_ready(struct l2cap_conn *conn)
 	struct hci_conn *hcon = conn->hcon;
 	struct hci_dev *hdev = hcon->hdev;
 
-	BT_DBG("%s conn %p", hdev->name, conn);
+	BT_INFO("%s conn %p", hdev->name, conn);
 
 	/* For outgoing pairing which doesn't necessarily have an
 	 * associated socket (e.g. mgmt_pair_device).
@@ -1560,7 +1560,7 @@ static void l2cap_conn_ready(struct l2cap_conn *conn)
 	struct l2cap_chan *chan;
 	struct hci_conn *hcon = conn->hcon;
 
-	BT_DBG("conn %p", conn);
+	BT_INFO("conn %p", conn);
 
 	if (hcon->type == ACL_LINK)
 		l2cap_request_info(conn);
@@ -1601,7 +1601,7 @@ static void l2cap_conn_unreliable(struct l2cap_conn *conn, int err)
 {
 	struct l2cap_chan *chan;
 
-	BT_DBG("conn %p", conn);
+	BT_INFO("conn %p", conn);
 
 	mutex_lock(&conn->chan_lock);
 
@@ -1711,7 +1711,7 @@ static void l2cap_conn_del(struct hci_conn *hcon, int err)
 	if (!conn)
 		return;
 
-	BT_DBG("hcon %p conn %p, err %d", hcon, conn, err);
+	BT_INFO("hcon %p conn %p, err %d", hcon, conn, err);
 
 	kfree_skb(conn->rx_skb);
 
@@ -1839,7 +1839,7 @@ static void l2cap_monitor_timeout(struct work_struct *work)
 	struct l2cap_chan *chan = container_of(work, struct l2cap_chan,
 					       monitor_timer.work);
 
-	BT_DBG("chan %p", chan);
+	BT_INFO("chan %p", chan);
 
 	l2cap_chan_lock(chan);
 
@@ -1860,7 +1860,7 @@ static void l2cap_retrans_timeout(struct work_struct *work)
 	struct l2cap_chan *chan = container_of(work, struct l2cap_chan,
 					       retrans_timer.work);
 
-	BT_DBG("chan %p", chan);
+	BT_INFO("chan %p", chan);
 
 	l2cap_chan_lock(chan);
 
@@ -1881,7 +1881,7 @@ static void l2cap_streaming_send(struct l2cap_chan *chan,
 	struct sk_buff *skb;
 	struct l2cap_ctrl *control;
 
-	BT_DBG("chan %p, skbs %p", chan, skbs);
+	BT_INFO("chan %p, skbs %p", chan, skbs);
 
 	if (__chan_is_moving(chan))
 		return;
@@ -1907,7 +1907,7 @@ static void l2cap_streaming_send(struct l2cap_chan *chan,
 
 		l2cap_do_send(chan, skb);
 
-		BT_DBG("Sent txseq %u", control->txseq);
+		BT_INFO("Sent txseq %u", control->txseq);
 
 		chan->next_tx_seq = __next_seq(chan, chan->next_tx_seq);
 		chan->frames_sent++;
@@ -1920,7 +1920,7 @@ static int l2cap_ertm_send(struct l2cap_chan *chan)
 	struct l2cap_ctrl *control;
 	int sent = 0;
 
-	BT_DBG("chan %p", chan);
+	BT_INFO("chan %p", chan);
 
 	if (chan->state != BT_CONNECTED)
 		return -ENOTCONN;
@@ -1975,10 +1975,10 @@ static int l2cap_ertm_send(struct l2cap_chan *chan)
 			chan->tx_send_head = skb_queue_next(&chan->tx_q, skb);
 
 		l2cap_do_send(chan, tx_skb);
-		BT_DBG("Sent txseq %u", control->txseq);
+		BT_INFO("Sent txseq %u", control->txseq);
 	}
 
-	BT_DBG("Sent %d, %u unacked, %u in ERTM queue", sent,
+	BT_INFO("Sent %d, %u unacked, %u in ERTM queue", sent,
 	       chan->unacked_frames, skb_queue_len(&chan->tx_q));
 
 	return sent;
@@ -1991,7 +1991,7 @@ static void l2cap_ertm_resend(struct l2cap_chan *chan)
 	struct sk_buff *tx_skb;
 	u16 seq;
 
-	BT_DBG("chan %p", chan);
+	BT_INFO("chan %p", chan);
 
 	if (test_bit(CONN_REMOTE_BUSY, &chan->conn_state))
 		return;
@@ -2004,7 +2004,7 @@ static void l2cap_ertm_resend(struct l2cap_chan *chan)
 
 		skb = l2cap_ertm_seq_in_queue(&chan->tx_q, seq);
 		if (!skb) {
-			BT_DBG("Error: Can't retransmit seq %d, frame missing",
+			BT_INFO("Error: Can't retransmit seq %d, frame missing",
 			       seq);
 			continue;
 		}
@@ -2014,7 +2014,7 @@ static void l2cap_ertm_resend(struct l2cap_chan *chan)
 
 		if (chan->max_tx != 0 &&
 		    bt_cb(skb)->l2cap.retries > chan->max_tx) {
-			BT_DBG("Retry limit exceeded (%d)", chan->max_tx);
+			BT_INFO("Retry limit exceeded (%d)", chan->max_tx);
 			l2cap_send_disconn_req(chan, ECONNRESET);
 			l2cap_seq_list_clear(&chan->retrans_list);
 			break;
@@ -2059,7 +2059,7 @@ static void l2cap_ertm_resend(struct l2cap_chan *chan)
 
 		l2cap_do_send(chan, tx_skb);
 
-		BT_DBG("Resent txseq %d", control.txseq);
+		BT_INFO("Resent txseq %d", control.txseq);
 
 		chan->last_acked_seq = chan->buffer_seq;
 	}
@@ -2068,7 +2068,7 @@ static void l2cap_ertm_resend(struct l2cap_chan *chan)
 static void l2cap_retransmit(struct l2cap_chan *chan,
 			     struct l2cap_ctrl *control)
 {
-	BT_DBG("chan %p, control %p", chan, control);
+	BT_INFO("chan %p, control %p", chan, control);
 
 	l2cap_seq_list_append(&chan->retrans_list, control->reqseq);
 	l2cap_ertm_resend(chan);
@@ -2079,7 +2079,7 @@ static void l2cap_retransmit_all(struct l2cap_chan *chan,
 {
 	struct sk_buff *skb;
 
-	BT_DBG("chan %p, control %p", chan, control);
+	BT_INFO("chan %p, control %p", chan, control);
 
 	if (control->poll)
 		set_bit(CONN_SEND_FBIT, &chan->conn_state);
@@ -2115,7 +2115,7 @@ static void l2cap_send_ack(struct l2cap_chan *chan)
 					 chan->last_acked_seq);
 	int threshold;
 
-	BT_DBG("chan %p last_acked_seq %d buffer_seq %d",
+	BT_INFO("chan %p last_acked_seq %d buffer_seq %d",
 	       chan, chan->last_acked_seq, chan->buffer_seq);
 
 	memset(&control, 0, sizeof(control));
@@ -2142,7 +2142,7 @@ static void l2cap_send_ack(struct l2cap_chan *chan)
 		threshold += threshold << 1;
 		threshold >>= 2;
 
-		BT_DBG("frames_to_ack %u, threshold %d", frames_to_ack,
+		BT_INFO("frames_to_ack %u, threshold %d", frames_to_ack,
 		       threshold);
 
 		if (frames_to_ack >= threshold) {
@@ -2210,7 +2210,7 @@ static struct sk_buff *l2cap_create_connless_pdu(struct l2cap_chan *chan,
 	int err, count, hlen = L2CAP_HDR_SIZE + L2CAP_PSMLEN_SIZE;
 	struct l2cap_hdr *lh;
 
-	BT_DBG("chan %p psm 0x%2.2x len %zu", chan,
+	BT_INFO("chan %p psm 0x%2.2x len %zu", chan,
 	       __le16_to_cpu(chan->psm), len);
 
 	count = min_t(unsigned int, (conn->mtu - hlen), len);
@@ -2242,7 +2242,7 @@ static struct sk_buff *l2cap_create_basic_pdu(struct l2cap_chan *chan,
 	int err, count;
 	struct l2cap_hdr *lh;
 
-	BT_DBG("chan %p len %zu", chan, len);
+	BT_INFO("chan %p len %zu", chan, len);
 
 	count = min_t(unsigned int, (conn->mtu - L2CAP_HDR_SIZE), len);
 
@@ -2273,7 +2273,7 @@ static struct sk_buff *l2cap_create_iframe_pdu(struct l2cap_chan *chan,
 	int err, count, hlen;
 	struct l2cap_hdr *lh;
 
-	BT_DBG("chan %p len %zu", chan, len);
+	BT_INFO("chan %p len %zu", chan, len);
 
 	if (!conn)
 		return ERR_PTR(-ENOTCONN);
@@ -2327,7 +2327,7 @@ static int l2cap_segment_sdu(struct l2cap_chan *chan,
 	size_t pdu_len;
 	u8 sar;
 
-	BT_DBG("chan %p, msg %p, len %zu", chan, msg, len);
+	BT_INFO("chan %p, msg %p, len %zu", chan, msg, len);
 
 	/* It is critical that ERTM PDUs fit in a single HCI fragment,
 	 * so fragmented skbs are not used.  The HCI layer's handling
@@ -2394,7 +2394,7 @@ static struct sk_buff *l2cap_create_le_flowctl_pdu(struct l2cap_chan *chan,
 	int err, count, hlen;
 	struct l2cap_hdr *lh;
 
-	BT_DBG("chan %p len %zu", chan, len);
+	BT_INFO("chan %p len %zu", chan, len);
 
 	if (!conn)
 		return ERR_PTR(-ENOTCONN);
@@ -2436,7 +2436,7 @@ static int l2cap_segment_le_sdu(struct l2cap_chan *chan,
 	size_t pdu_len;
 	u16 sdu_len;
 
-	BT_DBG("chan %p, msg %p, len %zu", chan, msg, len);
+	BT_INFO("chan %p, msg %p, len %zu", chan, msg, len);
 
 	sdu_len = len;
 	pdu_len = chan->remote_mps - L2CAP_SDULEN_SIZE;
@@ -2468,7 +2468,7 @@ static void l2cap_le_flowctl_send(struct l2cap_chan *chan)
 {
 	int sent = 0;
 
-	BT_DBG("chan %p", chan);
+	BT_INFO("chan %p", chan);
 
 	while (chan->tx_credits && !skb_queue_empty(&chan->tx_q)) {
 		l2cap_do_send(chan, skb_dequeue(&chan->tx_q));
@@ -2476,7 +2476,7 @@ static void l2cap_le_flowctl_send(struct l2cap_chan *chan)
 		sent++;
 	}
 
-	BT_DBG("Sent %d credits %u queued %u", sent, chan->tx_credits,
+	BT_INFO("Sent %d credits %u queued %u", sent, chan->tx_credits,
 	       skb_queue_len(&chan->tx_q));
 }
 
@@ -2599,7 +2599,7 @@ int l2cap_chan_send(struct l2cap_chan *chan, struct msghdr *msg, size_t len)
 		break;
 
 	default:
-		BT_DBG("bad state %1.1x", chan->mode);
+		BT_INFO("bad state %1.1x", chan->mode);
 		err = -EBADFD;
 	}
 
@@ -2612,7 +2612,7 @@ static void l2cap_send_srej(struct l2cap_chan *chan, u16 txseq)
 	struct l2cap_ctrl control;
 	u16 seq;
 
-	BT_DBG("chan %p, txseq %u", chan, txseq);
+	BT_INFO("chan %p, txseq %u", chan, txseq);
 
 	memset(&control, 0, sizeof(control));
 	control.sframe = 1;
@@ -2634,7 +2634,7 @@ static void l2cap_send_srej_tail(struct l2cap_chan *chan)
 {
 	struct l2cap_ctrl control;
 
-	BT_DBG("chan %p", chan);
+	BT_INFO("chan %p", chan);
 
 	if (chan->srej_list.tail == L2CAP_SEQ_LIST_CLEAR)
 		return;
@@ -2652,7 +2652,7 @@ static void l2cap_send_srej_list(struct l2cap_chan *chan, u16 txseq)
 	u16 initial_head;
 	u16 seq;
 
-	BT_DBG("chan %p, txseq %u", chan, txseq);
+	BT_INFO("chan %p, txseq %u", chan, txseq);
 
 	memset(&control, 0, sizeof(control));
 	control.sframe = 1;
@@ -2677,12 +2677,12 @@ static void l2cap_process_reqseq(struct l2cap_chan *chan, u16 reqseq)
 	struct sk_buff *acked_skb;
 	u16 ackseq;
 
-	BT_DBG("chan %p, reqseq %u", chan, reqseq);
+	BT_INFO("chan %p, reqseq %u", chan, reqseq);
 
 	if (chan->unacked_frames == 0 || reqseq == chan->expected_ack_seq)
 		return;
 
-	BT_DBG("expected_ack_seq %u, unacked_frames %u",
+	BT_INFO("expected_ack_seq %u, unacked_frames %u",
 	       chan->expected_ack_seq, chan->unacked_frames);
 
 	for (ackseq = chan->expected_ack_seq; ackseq != reqseq;
@@ -2701,12 +2701,12 @@ static void l2cap_process_reqseq(struct l2cap_chan *chan, u16 reqseq)
 	if (chan->unacked_frames == 0)
 		__clear_retrans_timer(chan);
 
-	BT_DBG("unacked_frames %u", chan->unacked_frames);
+	BT_INFO("unacked_frames %u", chan->unacked_frames);
 }
 
 static void l2cap_abort_rx_srej_sent(struct l2cap_chan *chan)
 {
-	BT_DBG("chan %p", chan);
+	BT_INFO("chan %p", chan);
 
 	chan->expected_tx_seq = chan->buffer_seq;
 	l2cap_seq_list_clear(&chan->srej_list);
@@ -2718,7 +2718,7 @@ static void l2cap_tx_state_xmit(struct l2cap_chan *chan,
 				struct l2cap_ctrl *control,
 				struct sk_buff_head *skbs, u8 event)
 {
-	BT_DBG("chan %p, control %p, skbs %p, event %d", chan, control, skbs,
+	BT_INFO("chan %p, control %p, skbs %p, event %d", chan, control, skbs,
 	       event);
 
 	switch (event) {
@@ -2730,7 +2730,7 @@ static void l2cap_tx_state_xmit(struct l2cap_chan *chan,
 		l2cap_ertm_send(chan);
 		break;
 	case L2CAP_EV_LOCAL_BUSY_DETECTED:
-		BT_DBG("Enter LOCAL_BUSY");
+		BT_INFO("Enter LOCAL_BUSY");
 		set_bit(CONN_LOCAL_BUSY, &chan->conn_state);
 
 		if (chan->rx_state == L2CAP_RX_STATE_SREJ_SENT) {
@@ -2744,7 +2744,7 @@ static void l2cap_tx_state_xmit(struct l2cap_chan *chan,
 
 		break;
 	case L2CAP_EV_LOCAL_BUSY_CLEAR:
-		BT_DBG("Exit LOCAL_BUSY");
+		BT_INFO("Exit LOCAL_BUSY");
 		clear_bit(CONN_LOCAL_BUSY, &chan->conn_state);
 
 		if (test_bit(CONN_RNR_SENT, &chan->conn_state)) {
@@ -2790,7 +2790,7 @@ static void l2cap_tx_state_wait_f(struct l2cap_chan *chan,
 				  struct l2cap_ctrl *control,
 				  struct sk_buff_head *skbs, u8 event)
 {
-	BT_DBG("chan %p, control %p, skbs %p, event %d", chan, control, skbs,
+	BT_INFO("chan %p, control %p, skbs %p, event %d", chan, control, skbs,
 	       event);
 
 	switch (event) {
@@ -2801,7 +2801,7 @@ static void l2cap_tx_state_wait_f(struct l2cap_chan *chan,
 		skb_queue_splice_tail_init(skbs, &chan->tx_q);
 		break;
 	case L2CAP_EV_LOCAL_BUSY_DETECTED:
-		BT_DBG("Enter LOCAL_BUSY");
+		BT_INFO("Enter LOCAL_BUSY");
 		set_bit(CONN_LOCAL_BUSY, &chan->conn_state);
 
 		if (chan->rx_state == L2CAP_RX_STATE_SREJ_SENT) {
@@ -2815,7 +2815,7 @@ static void l2cap_tx_state_wait_f(struct l2cap_chan *chan,
 
 		break;
 	case L2CAP_EV_LOCAL_BUSY_CLEAR:
-		BT_DBG("Exit LOCAL_BUSY");
+		BT_INFO("Exit LOCAL_BUSY");
 		clear_bit(CONN_LOCAL_BUSY, &chan->conn_state);
 
 		if (test_bit(CONN_RNR_SENT, &chan->conn_state)) {
@@ -2844,7 +2844,7 @@ static void l2cap_tx_state_wait_f(struct l2cap_chan *chan,
 				__set_retrans_timer(chan);
 			chan->retry_count = 0;
 			chan->tx_state = L2CAP_TX_STATE_XMIT;
-			BT_DBG("recv fbit tx_state 0x2.2%x", chan->tx_state);
+			BT_INFO("recv fbit tx_state 0x2.2%x", chan->tx_state);
 		}
 		break;
 	case L2CAP_EV_EXPLICIT_POLL:
@@ -2867,7 +2867,7 @@ static void l2cap_tx_state_wait_f(struct l2cap_chan *chan,
 static void l2cap_tx(struct l2cap_chan *chan, struct l2cap_ctrl *control,
 		     struct sk_buff_head *skbs, u8 event)
 {
-	BT_DBG("chan %p, control %p, skbs %p, event %d, state %d",
+	BT_INFO("chan %p, control %p, skbs %p, event %d, state %d",
 	       chan, control, skbs, event, chan->tx_state);
 
 	switch (chan->tx_state) {
@@ -2886,14 +2886,14 @@ static void l2cap_tx(struct l2cap_chan *chan, struct l2cap_ctrl *control,
 static void l2cap_pass_to_tx(struct l2cap_chan *chan,
 			     struct l2cap_ctrl *control)
 {
-	BT_DBG("chan %p, control %p", chan, control);
+	BT_INFO("chan %p, control %p", chan, control);
 	l2cap_tx(chan, control, NULL, L2CAP_EV_RECV_REQSEQ_AND_FBIT);
 }
 
 static void l2cap_pass_to_tx_fbit(struct l2cap_chan *chan,
 				  struct l2cap_ctrl *control)
 {
-	BT_DBG("chan %p, control %p", chan, control);
+	BT_INFO("chan %p, control %p", chan, control);
 	l2cap_tx(chan, control, NULL, L2CAP_EV_RECV_FBIT);
 }
 
@@ -2903,7 +2903,7 @@ static void l2cap_raw_recv(struct l2cap_conn *conn, struct sk_buff *skb)
 	struct sk_buff *nskb;
 	struct l2cap_chan *chan;
 
-	BT_DBG("conn %p", conn);
+	BT_INFO("conn %p", conn);
 
 	mutex_lock(&conn->chan_lock);
 
@@ -2934,7 +2934,7 @@ static struct sk_buff *l2cap_build_cmd(struct l2cap_conn *conn, u8 code,
 	struct l2cap_hdr *lh;
 	int len, count;
 
-	BT_DBG("conn %p, code 0x%2.2x, ident 0x%2.2x, len %u",
+	BT_INFO("conn %p, code 0x%2.2x, ident 0x%2.2x, len %u",
 	       conn, code, ident, dlen);
 
 	if (conn->mtu < L2CAP_HDR_SIZE + L2CAP_CMD_HDR_SIZE)
@@ -3022,7 +3022,7 @@ static inline int l2cap_get_conf_opt(void **ptr, int *type, int *olen,
 		break;
 	}
 
-	BT_DBG("type 0x%2.2x len %u val 0x%lx", *type, opt->len, *val);
+	BT_INFO("type 0x%2.2x len %u val 0x%lx", *type, opt->len, *val);
 	return len;
 }
 
@@ -3030,7 +3030,7 @@ static void l2cap_add_conf_opt(void **ptr, u8 type, u8 len, unsigned long val, s
 {
 	struct l2cap_conf_opt *opt = *ptr;
 
-	BT_DBG("type 0x%2.2x len %u val 0x%lx", type, len, val);
+	BT_INFO("type 0x%2.2x len %u val 0x%lx", type, len, val);
 
 	if (size < L2CAP_CONF_OPT_SIZE + len)
 		return;
@@ -3096,7 +3096,7 @@ static void l2cap_ack_timeout(struct work_struct *work)
 					       ack_timer.work);
 	u16 frames_to_ack;
 
-	BT_DBG("chan %p", chan);
+	BT_INFO("chan %p", chan);
 
 	l2cap_chan_lock(chan);
 
@@ -3241,7 +3241,7 @@ static int l2cap_build_conf_req(struct l2cap_chan *chan, void *data, size_t data
 	void *endptr = data + data_size;
 	u16 size;
 
-	BT_DBG("chan %p", chan);
+	BT_INFO("chan %p", chan);
 
 	if (chan->num_conf_req || chan->num_conf_rsp)
 		goto done;
@@ -3371,7 +3371,7 @@ static int l2cap_parse_conf_req(struct l2cap_chan *chan, void *data, size_t data
 	u16 result = L2CAP_CONF_SUCCESS;
 	u16 size;
 
-	BT_DBG("chan %p", chan);
+	BT_INFO("chan %p", chan);
 
 	while (len >= L2CAP_CONF_OPT_SIZE) {
 		len -= l2cap_get_conf_opt(&req, &type, &olen, &val);
@@ -3591,7 +3591,7 @@ static int l2cap_parse_conf_rsp(struct l2cap_chan *chan, void *rsp, int len,
 	struct l2cap_conf_rfc rfc = { .mode = L2CAP_MODE_BASIC };
 	struct l2cap_conf_efs efs;
 
-	BT_DBG("chan %p, rsp %p, len %d, req %p", chan, rsp, len, data);
+	BT_INFO("chan %p, rsp %p, len %d, req %p", chan, rsp, len, data);
 
 	while (len >= L2CAP_CONF_OPT_SIZE) {
 		len -= l2cap_get_conf_opt(&rsp, &type, &olen, &val);
@@ -3704,7 +3704,7 @@ static int l2cap_build_conf_rsp(struct l2cap_chan *chan, void *data,
 	struct l2cap_conf_rsp *rsp = data;
 	void *ptr = rsp->data;
 
-	BT_DBG("chan %p", chan);
+	BT_INFO("chan %p", chan);
 
 	rsp->scid   = cpu_to_le16(chan->dcid);
 	rsp->result = cpu_to_le16(result);
@@ -3718,7 +3718,7 @@ void __l2cap_le_connect_rsp_defer(struct l2cap_chan *chan)
 	struct l2cap_le_conn_rsp rsp;
 	struct l2cap_conn *conn = chan->conn;
 
-	BT_DBG("chan %p", chan);
+	BT_INFO("chan %p", chan);
 
 	rsp.dcid    = cpu_to_le16(chan->scid);
 	rsp.mtu     = cpu_to_le16(chan->imtu);
@@ -3747,7 +3747,7 @@ void __l2cap_connect_rsp_defer(struct l2cap_chan *chan)
 	else
 		rsp_code = L2CAP_CONN_RSP;
 
-	BT_DBG("chan %p rsp_code %u", chan, rsp_code);
+	BT_INFO("chan %p rsp_code %u", chan, rsp_code);
 
 	l2cap_send_cmd(conn, chan->ident, rsp_code, sizeof(rsp), &rsp);
 
@@ -3775,7 +3775,7 @@ static void l2cap_conf_rfc_get(struct l2cap_chan *chan, void *rsp, int len)
 		.txwin_size = min_t(u16, chan->ack_win, L2CAP_DEFAULT_TX_WINDOW),
 	};
 
-	BT_DBG("chan %p, rsp %p, len %d", chan, rsp, len);
+	BT_INFO("chan %p, rsp %p, len %d", chan, rsp, len);
 
 	if ((chan->mode != L2CAP_MODE_ERTM) && (chan->mode != L2CAP_MODE_STREAMING))
 		return;
@@ -3852,7 +3852,7 @@ static struct l2cap_chan *l2cap_connect(struct l2cap_conn *conn,
 	u16 dcid = 0, scid = __le16_to_cpu(req->scid);
 	__le16 psm = req->psm;
 
-	BT_DBG("psm 0x%2.2x scid 0x%4.4x", __le16_to_cpu(psm), scid);
+	BT_INFO("psm 0x%2.2x scid 0x%4.4x", __le16_to_cpu(psm), scid);
 
 	/* Check if we have socket listening on psm */
 	pchan = l2cap_global_chan_by_psm(BT_LISTEN, psm, &conn->hcon->src,
@@ -4020,7 +4020,7 @@ static int l2cap_connect_create_rsp(struct l2cap_conn *conn,
 	result = __le16_to_cpu(rsp->result);
 	status = __le16_to_cpu(rsp->status);
 
-	BT_DBG("dcid 0x%4.4x scid 0x%4.4x result 0x%2.2x status 0x%2.2x",
+	BT_INFO("dcid 0x%4.4x scid 0x%4.4x result 0x%2.2x status 0x%2.2x",
 	       dcid, scid, result, status);
 
 	mutex_lock(&conn->chan_lock);
@@ -4091,7 +4091,7 @@ static void l2cap_send_efs_conf_rsp(struct l2cap_chan *chan, void *data,
 {
 	struct l2cap_conn *conn = chan->conn;
 
-	BT_DBG("conn %p chan %p ident %d flags 0x%4.4x", conn, chan, ident,
+	BT_INFO("conn %p chan %p ident %d flags 0x%4.4x", conn, chan, ident,
 	       flags);
 
 	clear_bit(CONF_LOC_CONF_PEND, &chan->conf_state);
@@ -4130,7 +4130,7 @@ static inline int l2cap_config_req(struct l2cap_conn *conn,
 	dcid  = __le16_to_cpu(req->dcid);
 	flags = __le16_to_cpu(req->flags);
 
-	BT_DBG("dcid 0x%4.4x flags 0x%2.2x", dcid, flags);
+	BT_INFO("dcid 0x%4.4x flags 0x%2.2x", dcid, flags);
 
 	chan = l2cap_get_chan_by_scid(conn, dcid);
 	if (!chan) {
@@ -4241,7 +4241,7 @@ static inline int l2cap_config_rsp(struct l2cap_conn *conn,
 	flags  = __le16_to_cpu(rsp->flags);
 	result = __le16_to_cpu(rsp->result);
 
-	BT_DBG("scid 0x%4.4x flags 0x%2.2x result 0x%2.2x len %d", scid, flags,
+	BT_INFO("scid 0x%4.4x flags 0x%2.2x result 0x%2.2x len %d", scid, flags,
 	       result, len);
 
 	chan = l2cap_get_chan_by_scid(conn, scid);
@@ -4352,7 +4352,7 @@ static inline int l2cap_disconnect_req(struct l2cap_conn *conn,
 	scid = __le16_to_cpu(req->scid);
 	dcid = __le16_to_cpu(req->dcid);
 
-	BT_DBG("scid 0x%4.4x dcid 0x%4.4x", scid, dcid);
+	BT_INFO("scid 0x%4.4x dcid 0x%4.4x", scid, dcid);
 
 	mutex_lock(&conn->chan_lock);
 
@@ -4398,7 +4398,7 @@ static inline int l2cap_disconnect_rsp(struct l2cap_conn *conn,
 	scid = __le16_to_cpu(rsp->scid);
 	dcid = __le16_to_cpu(rsp->dcid);
 
-	BT_DBG("dcid 0x%4.4x scid 0x%4.4x", dcid, scid);
+	BT_INFO("dcid 0x%4.4x scid 0x%4.4x", dcid, scid);
 
 	mutex_lock(&conn->chan_lock);
 
@@ -4442,7 +4442,7 @@ static inline int l2cap_information_req(struct l2cap_conn *conn,
 
 	type = __le16_to_cpu(req->type);
 
-	BT_DBG("type 0x%4.4x", type);
+	BT_INFO("type 0x%4.4x", type);
 
 	if (type == L2CAP_IT_FEAT_MASK) {
 		u8 buf[8];
@@ -4494,7 +4494,7 @@ static inline int l2cap_information_rsp(struct l2cap_conn *conn,
 	type   = __le16_to_cpu(rsp->type);
 	result = __le16_to_cpu(rsp->result);
 
-	BT_DBG("type 0x%4.4x result 0x%2.2x", type, result);
+	BT_INFO("type 0x%4.4x result 0x%2.2x", type, result);
 
 	/* L2CAP Info req/rsp are unbound to channels, add extra checks */
 	if (cmd->ident != conn->info_ident ||
@@ -4563,7 +4563,7 @@ static int l2cap_create_channel_req(struct l2cap_conn *conn,
 	psm = le16_to_cpu(req->psm);
 	scid = le16_to_cpu(req->scid);
 
-	BT_DBG("psm 0x%2.2x, scid 0x%4.4x, amp_id %d", psm, scid, req->amp_id);
+	BT_INFO("psm 0x%2.2x, scid 0x%4.4x, amp_id %d", psm, scid, req->amp_id);
 
 	/* For controller id 0 make BR/EDR connection */
 	if (req->amp_id == AMP_ID_BREDR) {
@@ -4597,7 +4597,7 @@ static int l2cap_create_channel_req(struct l2cap_conn *conn,
 			return 0;
 		}
 
-		BT_DBG("mgr %p bredr_chan %p hs_hcon %p", mgr, chan, hs_hcon);
+		BT_INFO("mgr %p bredr_chan %p hs_hcon %p", mgr, chan, hs_hcon);
 
 		mgr->bredr_chan = chan;
 		chan->hs_hcon = hs_hcon;
@@ -4626,7 +4626,7 @@ static void l2cap_send_move_chan_req(struct l2cap_chan *chan, u8 dest_amp_id)
 	struct l2cap_move_chan_req req;
 	u8 ident;
 
-	BT_DBG("chan %p, dest_amp_id %d", chan, dest_amp_id);
+	BT_INFO("chan %p, dest_amp_id %d", chan, dest_amp_id);
 
 	ident = l2cap_get_ident(chan->conn);
 	chan->ident = ident;
@@ -4644,7 +4644,7 @@ static void l2cap_send_move_chan_rsp(struct l2cap_chan *chan, u16 result)
 {
 	struct l2cap_move_chan_rsp rsp;
 
-	BT_DBG("chan %p, result 0x%4.4x", chan, result);
+	BT_INFO("chan %p, result 0x%4.4x", chan, result);
 
 	rsp.icid = cpu_to_le16(chan->dcid);
 	rsp.result = cpu_to_le16(result);
@@ -4657,7 +4657,7 @@ static void l2cap_send_move_chan_cfm(struct l2cap_chan *chan, u16 result)
 {
 	struct l2cap_move_chan_cfm cfm;
 
-	BT_DBG("chan %p, result 0x%4.4x", chan, result);
+	BT_INFO("chan %p, result 0x%4.4x", chan, result);
 
 	chan->ident = l2cap_get_ident(chan->conn);
 
@@ -4674,7 +4674,7 @@ static void l2cap_send_move_chan_cfm_icid(struct l2cap_conn *conn, u16 icid)
 {
 	struct l2cap_move_chan_cfm cfm;
 
-	BT_DBG("conn %p, icid 0x%4.4x", conn, icid);
+	BT_INFO("conn %p, icid 0x%4.4x", conn, icid);
 
 	cfm.icid = cpu_to_le16(icid);
 	cfm.result = cpu_to_le16(L2CAP_MC_UNCONFIRMED);
@@ -4688,7 +4688,7 @@ static void l2cap_send_move_chan_cfm_rsp(struct l2cap_conn *conn, u8 ident,
 {
 	struct l2cap_move_chan_cfm_rsp rsp;
 
-	BT_DBG("icid 0x%4.4x", icid);
+	BT_INFO("icid 0x%4.4x", icid);
 
 	rsp.icid = cpu_to_le16(icid);
 	l2cap_send_cmd(conn, ident, L2CAP_MOVE_CHAN_CFM_RSP, sizeof(rsp), &rsp);
@@ -4762,7 +4762,7 @@ static void l2cap_logical_finish_move(struct l2cap_chan *chan,
 	chan->hs_hcon = hchan->conn;
 	chan->hs_hcon->l2cap_data = chan->conn;
 
-	BT_DBG("move_state %d", chan->move_state);
+	BT_INFO("move_state %d", chan->move_state);
 
 	switch (chan->move_state) {
 	case L2CAP_MOVE_WAIT_LOGICAL_COMP:
@@ -4794,7 +4794,7 @@ static void l2cap_logical_finish_move(struct l2cap_chan *chan,
 void l2cap_logical_cfm(struct l2cap_chan *chan, struct hci_chan *hchan,
 		       u8 status)
 {
-	BT_DBG("chan %p, hchan %p, status %d", chan, hchan, status);
+	BT_INFO("chan %p, hchan %p, status %d", chan, hchan, status);
 
 	if (status) {
 		l2cap_logical_fail(chan);
@@ -4813,7 +4813,7 @@ void l2cap_logical_cfm(struct l2cap_chan *chan, struct hci_chan *hchan,
 
 void l2cap_move_start(struct l2cap_chan *chan)
 {
-	BT_DBG("chan %p", chan);
+	BT_INFO("chan %p", chan);
 
 	if (chan->local_amp_id == AMP_ID_BREDR) {
 		if (chan->chan_policy != BT_CHANNEL_POLICY_AMP_PREFERRED)
@@ -4833,7 +4833,7 @@ void l2cap_move_start(struct l2cap_chan *chan)
 static void l2cap_do_create(struct l2cap_chan *chan, int result,
 			    u8 local_amp_id, u8 remote_amp_id)
 {
-	BT_DBG("chan %p state %s %u -> %u", chan, state_to_string(chan->state),
+	BT_INFO("chan %p state %s %u -> %u", chan, state_to_string(chan->state),
 	       local_amp_id, remote_amp_id);
 
 	chan->fcs = L2CAP_FCS_NONE;
@@ -4942,7 +4942,7 @@ void __l2cap_physical_cfm(struct l2cap_chan *chan, int result)
 	u8 local_amp_id = chan->local_amp_id;
 	u8 remote_amp_id = chan->remote_amp_id;
 
-	BT_DBG("chan %p, result %d, local_amp_id %d, remote_amp_id %d",
+	BT_INFO("chan %p, result %d, local_amp_id %d, remote_amp_id %d",
 	       chan, result, local_amp_id, remote_amp_id);
 
 	if (chan->state == BT_DISCONN || chan->state == BT_CLOSED)
@@ -4983,7 +4983,7 @@ static inline int l2cap_move_channel_req(struct l2cap_conn *conn,
 
 	icid = le16_to_cpu(req->icid);
 
-	BT_DBG("icid 0x%4.4x, dest_amp_id %d", icid, req->dest_amp_id);
+	BT_INFO("icid 0x%4.4x, dest_amp_id %d", icid, req->dest_amp_id);
 
 	if (!(conn->local_fixed_chan & L2CAP_FC_A2MP))
 		return -EINVAL;
@@ -5198,7 +5198,7 @@ static int l2cap_move_channel_rsp(struct l2cap_conn *conn,
 	icid = le16_to_cpu(rsp->icid);
 	result = le16_to_cpu(rsp->result);
 
-	BT_DBG("icid 0x%4.4x, result 0x%4.4x", icid, result);
+	BT_INFO("icid 0x%4.4x, result 0x%4.4x", icid, result);
 
 	if (result == L2CAP_MR_SUCCESS || result == L2CAP_MR_PEND)
 		l2cap_move_continue(conn, icid, result);
@@ -5222,7 +5222,7 @@ static int l2cap_move_channel_confirm(struct l2cap_conn *conn,
 	icid = le16_to_cpu(cfm->icid);
 	result = le16_to_cpu(cfm->result);
 
-	BT_DBG("icid 0x%4.4x, result 0x%4.4x", icid, result);
+	BT_INFO("icid 0x%4.4x, result 0x%4.4x", icid, result);
 
 	chan = l2cap_get_chan_by_dcid(conn, icid);
 	if (!chan) {
@@ -5263,7 +5263,7 @@ static inline int l2cap_move_channel_confirm_rsp(struct l2cap_conn *conn,
 
 	icid = le16_to_cpu(rsp->icid);
 
-	BT_DBG("icid 0x%4.4x", icid);
+	BT_INFO("icid 0x%4.4x", icid);
 
 	chan = l2cap_get_chan_by_scid(conn, icid);
 	if (!chan)
@@ -5307,7 +5307,7 @@ static inline int l2cap_conn_param_update_req(struct l2cap_conn *conn,
 	latency		= __le16_to_cpu(req->latency);
 	to_multiplier	= __le16_to_cpu(req->to_multiplier);
 
-	BT_DBG("min 0x%4.4x max 0x%4.4x latency: 0x%4.4x Timeout: 0x%4.4x",
+	BT_INFO("min 0x%4.4x max 0x%4.4x latency: 0x%4.4x Timeout: 0x%4.4x",
 	       min, max, latency, to_multiplier);
 
 	memset(&rsp, 0, sizeof(rsp));
@@ -5359,7 +5359,7 @@ static int l2cap_le_connect_rsp(struct l2cap_conn *conn,
 					   dcid > L2CAP_CID_LE_DYN_END))
 		return -EPROTO;
 
-	BT_DBG("dcid 0x%4.4x mtu %u mps %u credits %u result 0x%2.2x",
+	BT_INFO("dcid 0x%4.4x mtu %u mps %u credits %u result 0x%2.2x",
 	       dcid, mtu, mps, credits, result);
 
 	mutex_lock(&conn->chan_lock);
@@ -5526,7 +5526,7 @@ static int l2cap_le_connect_req(struct l2cap_conn *conn,
 	if (mtu < 23 || mps < 23)
 		return -EPROTO;
 
-	BT_DBG("psm 0x%2.2x scid 0x%4.4x mtu %u mps %u", __le16_to_cpu(psm),
+	BT_INFO("psm 0x%2.2x scid 0x%4.4x mtu %u mps %u", __le16_to_cpu(psm),
 	       scid, mtu, mps);
 
 	/* Check if we have socket listening on psm */
@@ -5643,7 +5643,7 @@ static inline int l2cap_le_credits(struct l2cap_conn *conn,
 	cid	= __le16_to_cpu(pkt->cid);
 	credits	= __le16_to_cpu(pkt->credits);
 
-	BT_DBG("cid 0x%4.4x credits 0x%4.4x", cid, credits);
+	BT_INFO("cid 0x%4.4x credits 0x%4.4x", cid, credits);
 
 	chan = l2cap_get_chan_by_dcid(conn, cid);
 	if (!chan)
@@ -5765,10 +5765,10 @@ static inline void l2cap_le_sig_channel(struct l2cap_conn *conn,
 
 	len = le16_to_cpu(cmd->len);
 
-	BT_DBG("code 0x%2.2x len %d id 0x%2.2x", cmd->code, len, cmd->ident);
+	BT_INFO("code 0x%2.2x len %d id 0x%2.2x", cmd->code, len, cmd->ident);
 
 	if (len != skb->len || !cmd->ident) {
-		BT_DBG("corrupted command");
+		BT_INFO("corrupted command");
 		goto drop;
 	}
 
@@ -5809,11 +5809,11 @@ static inline void l2cap_sig_channel(struct l2cap_conn *conn,
 
 		cmd_len = le16_to_cpu(cmd.len);
 
-		BT_DBG("code 0x%2.2x len %d id 0x%2.2x", cmd.code, cmd_len,
+		BT_INFO("code 0x%2.2x len %d id 0x%2.2x", cmd.code, cmd_len,
 		       cmd.ident);
 
 		if (cmd_len > len || !cmd.ident) {
-			BT_DBG("corrupted command");
+			BT_INFO("corrupted command");
 			break;
 		}
 
@@ -5861,7 +5861,7 @@ static void l2cap_send_i_or_rr_or_rnr(struct l2cap_chan *chan)
 {
 	struct l2cap_ctrl control;
 
-	BT_DBG("chan %p", chan);
+	BT_INFO("chan %p", chan);
 
 	memset(&control, 0, sizeof(control));
 	control.sframe = 1;
@@ -6019,11 +6019,11 @@ static int l2cap_rx_queued_iframes(struct l2cap_chan *chan)
 	 * until a gap is encountered.
 	 */
 
-	BT_DBG("chan %p", chan);
+	BT_INFO("chan %p", chan);
 
 	while (!test_bit(CONN_LOCAL_BUSY, &chan->conn_state)) {
 		struct sk_buff *skb;
-		BT_DBG("Searching for skb with txseq %d (queue len %d)",
+		BT_INFO("Searching for skb with txseq %d (queue len %d)",
 		       chan->buffer_seq, skb_queue_len(&chan->srej_q));
 
 		skb = l2cap_ertm_seq_in_queue(&chan->srej_q, chan->buffer_seq);
@@ -6051,10 +6051,10 @@ static void l2cap_handle_srej(struct l2cap_chan *chan,
 {
 	struct sk_buff *skb;
 
-	BT_DBG("chan %p, control %p", chan, control);
+	BT_INFO("chan %p, control %p", chan, control);
 
 	if (control->reqseq == chan->next_tx_seq) {
-		BT_DBG("Invalid reqseq %d, disconnecting", control->reqseq);
+		BT_INFO("Invalid reqseq %d, disconnecting", control->reqseq);
 		l2cap_send_disconn_req(chan, ECONNRESET);
 		return;
 	}
@@ -6062,13 +6062,13 @@ static void l2cap_handle_srej(struct l2cap_chan *chan,
 	skb = l2cap_ertm_seq_in_queue(&chan->tx_q, control->reqseq);
 
 	if (skb == NULL) {
-		BT_DBG("Seq %d not available for retransmission",
+		BT_INFO("Seq %d not available for retransmission",
 		       control->reqseq);
 		return;
 	}
 
 	if (chan->max_tx != 0 && bt_cb(skb)->l2cap.retries >= chan->max_tx) {
-		BT_DBG("Retry limit exceeded (%d)", chan->max_tx);
+		BT_INFO("Retry limit exceeded (%d)", chan->max_tx);
 		l2cap_send_disconn_req(chan, ECONNRESET);
 		return;
 	}
@@ -6109,10 +6109,10 @@ static void l2cap_handle_rej(struct l2cap_chan *chan,
 {
 	struct sk_buff *skb;
 
-	BT_DBG("chan %p, control %p", chan, control);
+	BT_INFO("chan %p, control %p", chan, control);
 
 	if (control->reqseq == chan->next_tx_seq) {
-		BT_DBG("Invalid reqseq %d, disconnecting", control->reqseq);
+		BT_INFO("Invalid reqseq %d, disconnecting", control->reqseq);
 		l2cap_send_disconn_req(chan, ECONNRESET);
 		return;
 	}
@@ -6121,7 +6121,7 @@ static void l2cap_handle_rej(struct l2cap_chan *chan,
 
 	if (chan->max_tx && skb &&
 	    bt_cb(skb)->l2cap.retries >= chan->max_tx) {
-		BT_DBG("Retry limit exceeded (%d)", chan->max_tx);
+		BT_INFO("Retry limit exceeded (%d)", chan->max_tx);
 		l2cap_send_disconn_req(chan, ECONNRESET);
 		return;
 	}
@@ -6143,9 +6143,9 @@ static void l2cap_handle_rej(struct l2cap_chan *chan,
 
 static u8 l2cap_classify_txseq(struct l2cap_chan *chan, u16 txseq)
 {
-	BT_DBG("chan %p, txseq %d", chan, txseq);
+	BT_INFO("chan %p, txseq %d", chan, txseq);
 
-	BT_DBG("last_acked_seq %d, expected_tx_seq %d", chan->last_acked_seq,
+	BT_INFO("last_acked_seq %d, expected_tx_seq %d", chan->last_acked_seq,
 	       chan->expected_tx_seq);
 
 	if (chan->rx_state == L2CAP_RX_STATE_SREJ_SENT) {
@@ -6155,26 +6155,26 @@ static u8 l2cap_classify_txseq(struct l2cap_chan *chan, u16 txseq)
 			 * invalid packets.
 			 */
 			if (chan->tx_win <= ((chan->tx_win_max + 1) >> 1)) {
-				BT_DBG("Invalid/Ignore - after SREJ");
+				BT_INFO("Invalid/Ignore - after SREJ");
 				return L2CAP_TXSEQ_INVALID_IGNORE;
 			} else {
-				BT_DBG("Invalid - in window after SREJ sent");
+				BT_INFO("Invalid - in window after SREJ sent");
 				return L2CAP_TXSEQ_INVALID;
 			}
 		}
 
 		if (chan->srej_list.head == txseq) {
-			BT_DBG("Expected SREJ");
+			BT_INFO("Expected SREJ");
 			return L2CAP_TXSEQ_EXPECTED_SREJ;
 		}
 
 		if (l2cap_ertm_seq_in_queue(&chan->srej_q, txseq)) {
-			BT_DBG("Duplicate SREJ - txseq already stored");
+			BT_INFO("Duplicate SREJ - txseq already stored");
 			return L2CAP_TXSEQ_DUPLICATE_SREJ;
 		}
 
 		if (l2cap_seq_list_contains(&chan->srej_list, txseq)) {
-			BT_DBG("Unexpected SREJ - not requested");
+			BT_INFO("Unexpected SREJ - not requested");
 			return L2CAP_TXSEQ_UNEXPECTED_SREJ;
 		}
 	}
@@ -6182,17 +6182,17 @@ static u8 l2cap_classify_txseq(struct l2cap_chan *chan, u16 txseq)
 	if (chan->expected_tx_seq == txseq) {
 		if (__seq_offset(chan, txseq, chan->last_acked_seq) >=
 		    chan->tx_win) {
-			BT_DBG("Invalid - txseq outside tx window");
+			BT_INFO("Invalid - txseq outside tx window");
 			return L2CAP_TXSEQ_INVALID;
 		} else {
-			BT_DBG("Expected");
+			BT_INFO("Expected");
 			return L2CAP_TXSEQ_EXPECTED;
 		}
 	}
 
 	if (__seq_offset(chan, txseq, chan->last_acked_seq) <
 	    __seq_offset(chan, chan->expected_tx_seq, chan->last_acked_seq)) {
-		BT_DBG("Duplicate - expected_tx_seq later than txseq");
+		BT_INFO("Duplicate - expected_tx_seq later than txseq");
 		return L2CAP_TXSEQ_DUPLICATE;
 	}
 
@@ -6215,14 +6215,14 @@ static u8 l2cap_classify_txseq(struct l2cap_chan *chan, u16 txseq)
 		 */
 
 		if (chan->tx_win <= ((chan->tx_win_max + 1) >> 1)) {
-			BT_DBG("Invalid/Ignore - txseq outside tx window");
+			BT_INFO("Invalid/Ignore - txseq outside tx window");
 			return L2CAP_TXSEQ_INVALID_IGNORE;
 		} else {
-			BT_DBG("Invalid - txseq outside tx window");
+			BT_INFO("Invalid - txseq outside tx window");
 			return L2CAP_TXSEQ_INVALID;
 		}
 	} else {
-		BT_DBG("Unexpected - txseq indicates missing frames");
+		BT_INFO("Unexpected - txseq indicates missing frames");
 		return L2CAP_TXSEQ_UNEXPECTED;
 	}
 }
@@ -6234,7 +6234,7 @@ static int l2cap_rx_state_recv(struct l2cap_chan *chan,
 	int err = 0;
 	bool skb_in_use = false;
 
-	BT_DBG("chan %p, control %p, skb %p, event %d", chan, control, skb,
+	BT_INFO("chan %p, control %p, skb %p, event %d", chan, control, skb,
 	       event);
 
 	switch (event) {
@@ -6244,7 +6244,7 @@ static int l2cap_rx_state_recv(struct l2cap_chan *chan,
 			l2cap_pass_to_tx(chan, control);
 
 			if (test_bit(CONN_LOCAL_BUSY, &chan->conn_state)) {
-				BT_DBG("Busy, discarding expected seq %d",
+				BT_INFO("Busy, discarding expected seq %d",
 				       control->txseq);
 				break;
 			}
@@ -6279,7 +6279,7 @@ static int l2cap_rx_state_recv(struct l2cap_chan *chan,
 			 * when local busy is exited.
 			 */
 			if (test_bit(CONN_LOCAL_BUSY, &chan->conn_state)) {
-				BT_DBG("Busy, discarding unexpected seq %d",
+				BT_INFO("Busy, discarding unexpected seq %d",
 				       control->txseq);
 				break;
 			}
@@ -6290,7 +6290,7 @@ static int l2cap_rx_state_recv(struct l2cap_chan *chan,
 			 */
 			skb_queue_tail(&chan->srej_q, skb);
 			skb_in_use = true;
-			BT_DBG("Queued %p (queue len %d)", skb,
+			BT_INFO("Queued %p (queue len %d)", skb,
 			       skb_queue_len(&chan->srej_q));
 
 			clear_bit(CONN_SREJ_ACT, &chan->conn_state);
@@ -6354,7 +6354,7 @@ static int l2cap_rx_state_recv(struct l2cap_chan *chan,
 	}
 
 	if (skb && !skb_in_use) {
-		BT_DBG("Freeing %p", skb);
+		BT_INFO("Freeing %p", skb);
 		kfree_skb(skb);
 	}
 
@@ -6369,7 +6369,7 @@ static int l2cap_rx_state_srej_sent(struct l2cap_chan *chan,
 	u16 txseq = control->txseq;
 	bool skb_in_use = false;
 
-	BT_DBG("chan %p, control %p, skb %p, event %d", chan, control, skb,
+	BT_INFO("chan %p, control %p, skb %p, event %d", chan, control, skb,
 	       event);
 
 	switch (event) {
@@ -6380,7 +6380,7 @@ static int l2cap_rx_state_srej_sent(struct l2cap_chan *chan,
 			l2cap_pass_to_tx(chan, control);
 			skb_queue_tail(&chan->srej_q, skb);
 			skb_in_use = true;
-			BT_DBG("Queued %p (queue len %d)", skb,
+			BT_INFO("Queued %p (queue len %d)", skb,
 			       skb_queue_len(&chan->srej_q));
 
 			chan->expected_tx_seq = __next_seq(chan, txseq);
@@ -6391,7 +6391,7 @@ static int l2cap_rx_state_srej_sent(struct l2cap_chan *chan,
 			l2cap_pass_to_tx(chan, control);
 			skb_queue_tail(&chan->srej_q, skb);
 			skb_in_use = true;
-			BT_DBG("Queued %p (queue len %d)", skb,
+			BT_INFO("Queued %p (queue len %d)", skb,
 			       skb_queue_len(&chan->srej_q));
 
 			err = l2cap_rx_queued_iframes(chan);
@@ -6406,7 +6406,7 @@ static int l2cap_rx_state_srej_sent(struct l2cap_chan *chan,
 			 */
 			skb_queue_tail(&chan->srej_q, skb);
 			skb_in_use = true;
-			BT_DBG("Queued %p (queue len %d)", skb,
+			BT_INFO("Queued %p (queue len %d)", skb,
 			       skb_queue_len(&chan->srej_q));
 
 			l2cap_pass_to_tx(chan, control);
@@ -6420,7 +6420,7 @@ static int l2cap_rx_state_srej_sent(struct l2cap_chan *chan,
 			 */
 			skb_queue_tail(&chan->srej_q, skb);
 			skb_in_use = true;
-			BT_DBG("Queued %p (queue len %d)", skb,
+			BT_INFO("Queued %p (queue len %d)", skb,
 			       skb_queue_len(&chan->srej_q));
 
 			l2cap_pass_to_tx(chan, control);
@@ -6497,7 +6497,7 @@ static int l2cap_rx_state_srej_sent(struct l2cap_chan *chan,
 	}
 
 	if (skb && !skb_in_use) {
-		BT_DBG("Freeing %p", skb);
+		BT_INFO("Freeing %p", skb);
 		kfree_skb(skb);
 	}
 
@@ -6506,7 +6506,7 @@ static int l2cap_rx_state_srej_sent(struct l2cap_chan *chan,
 
 static int l2cap_finish_move(struct l2cap_chan *chan)
 {
-	BT_DBG("chan %p", chan);
+	BT_INFO("chan %p", chan);
 
 	chan->rx_state = L2CAP_RX_STATE_RECV;
 
@@ -6524,7 +6524,7 @@ static int l2cap_rx_state_wait_p(struct l2cap_chan *chan,
 {
 	int err;
 
-	BT_DBG("chan %p, control %p, skb %p, event %d", chan, control, skb,
+	BT_INFO("chan %p, control %p, skb %p, event %d", chan, control, skb,
 	       event);
 
 	if (!control->poll)
@@ -6608,7 +6608,7 @@ static int l2cap_rx(struct l2cap_chan *chan, struct l2cap_ctrl *control,
 {
 	int err = 0;
 
-	BT_DBG("chan %p, control %p, skb %p, event %d, state %d", chan,
+	BT_INFO("chan %p, control %p, skb %p, event %d, state %d", chan,
 	       control, skb, event, chan->rx_state);
 
 	if (__valid_reqseq(chan, control->reqseq)) {
@@ -6631,7 +6631,7 @@ static int l2cap_rx(struct l2cap_chan *chan, struct l2cap_ctrl *control,
 			break;
 		}
 	} else {
-		BT_DBG("Invalid reqseq %d (next_tx_seq %d, expected_ack_seq %d",
+		BT_INFO("Invalid reqseq %d (next_tx_seq %d, expected_ack_seq %d",
 		       control->reqseq, chan->next_tx_seq,
 		       chan->expected_ack_seq);
 		l2cap_send_disconn_req(chan, ECONNRESET);
@@ -6643,14 +6643,14 @@ static int l2cap_rx(struct l2cap_chan *chan, struct l2cap_ctrl *control,
 static int l2cap_stream_rx(struct l2cap_chan *chan, struct l2cap_ctrl *control,
 			   struct sk_buff *skb)
 {
-	BT_DBG("chan %p, control %p, skb %p, state %d", chan, control, skb,
+	BT_INFO("chan %p, control %p, skb %p, state %d", chan, control, skb,
 	       chan->rx_state);
 
 	if (l2cap_classify_txseq(chan, control->txseq) ==
 	    L2CAP_TXSEQ_EXPECTED) {
 		l2cap_pass_to_tx(chan, control);
 
-		BT_DBG("buffer_seq %d->%d", chan->buffer_seq,
+		BT_INFO("buffer_seq %d->%d", chan->buffer_seq,
 		       __next_seq(chan, chan->buffer_seq));
 
 		chan->buffer_seq = __next_seq(chan, chan->buffer_seq);
@@ -6665,7 +6665,7 @@ static int l2cap_stream_rx(struct l2cap_chan *chan, struct l2cap_ctrl *control,
 		chan->sdu_len = 0;
 
 		if (skb) {
-			BT_DBG("Freeing %p", skb);
+			BT_INFO("Freeing %p", skb);
 			kfree_skb(skb);
 		}
 	}
@@ -6713,7 +6713,7 @@ static int l2cap_data_rcv(struct l2cap_chan *chan, struct sk_buff *skb)
 	if (!control->sframe) {
 		int err;
 
-		BT_DBG("iframe sar %d, reqseq %d, final %d, txseq %d",
+		BT_INFO("iframe sar %d, reqseq %d, final %d, txseq %d",
 		       control->sar, control->reqseq, control->final,
 		       control->txseq);
 
@@ -6742,7 +6742,7 @@ static int l2cap_data_rcv(struct l2cap_chan *chan, struct sk_buff *skb)
 		if (chan->mode == L2CAP_MODE_STREAMING)
 			goto drop;
 
-		BT_DBG("sframe reqseq %d, final %d, poll %d, super %d",
+		BT_INFO("sframe reqseq %d, final %d, poll %d, super %d",
 		       control->reqseq, control->final, control->poll,
 		       control->super);
 
@@ -6780,7 +6780,7 @@ static void l2cap_chan_le_send_credits(struct l2cap_chan *chan)
 	if (!return_credits)
 		return;
 
-	BT_DBG("chan %p returning %u credits to sender", chan, return_credits);
+	BT_INFO("chan %p returning %u credits to sender", chan, return_credits);
 
 	chan->rx_credits += return_credits;
 
@@ -6796,7 +6796,7 @@ static int l2cap_le_recv(struct l2cap_chan *chan, struct sk_buff *skb)
 {
 	int err;
 
-	BT_DBG("SDU reassemble complete: chan %p skb->len %u", chan, skb->len);
+	BT_INFO("SDU reassemble complete: chan %p skb->len %u", chan, skb->len);
 
 	/* Wait recv to confirm reception before updating the credits */
 	err = chan->ops->recv(chan, skb);
@@ -6823,7 +6823,7 @@ static int l2cap_le_data_rcv(struct l2cap_chan *chan, struct sk_buff *skb)
 	}
 
 	chan->rx_credits--;
-	BT_DBG("rx_credits %u -> %u", chan->rx_credits + 1, chan->rx_credits);
+	BT_INFO("rx_credits %u -> %u", chan->rx_credits + 1, chan->rx_credits);
 
 	/* Update if remote had run out of credits, this should only happens
 	 * if the remote is not using the entire MPS.
@@ -6839,7 +6839,7 @@ static int l2cap_le_data_rcv(struct l2cap_chan *chan, struct sk_buff *skb)
 		sdu_len = get_unaligned_le16(skb->data);
 		skb_pull(skb, L2CAP_SDULEN_SIZE);
 
-		BT_DBG("Start of new SDU. sdu_len %u skb->len %u imtu %u",
+		BT_INFO("Start of new SDU. sdu_len %u skb->len %u imtu %u",
 		       sdu_len, skb->len, chan->imtu);
 
 		if (sdu_len > chan->imtu) {
@@ -6866,7 +6866,7 @@ static int l2cap_le_data_rcv(struct l2cap_chan *chan, struct sk_buff *skb)
 			u16 mps_len = skb->len + L2CAP_SDULEN_SIZE;
 
 			/* Adjust the number of credits */
-			BT_DBG("chan->mps %u -> %u", chan->mps, mps_len);
+			BT_INFO("chan->mps %u -> %u", chan->mps, mps_len);
 			chan->mps = mps_len;
 			l2cap_chan_le_send_credits(chan);
 		}
@@ -6874,7 +6874,7 @@ static int l2cap_le_data_rcv(struct l2cap_chan *chan, struct sk_buff *skb)
 		return 0;
 	}
 
-	BT_DBG("SDU fragment. chan->sdu->len %u skb->len %u chan->sdu_len %u",
+	BT_INFO("SDU fragment. chan->sdu->len %u skb->len %u chan->sdu_len %u",
 	       chan->sdu->len, skb->len, chan->sdu_len);
 
 	if (chan->sdu->len + skb->len > chan->sdu_len) {
@@ -6927,14 +6927,14 @@ static void l2cap_data_channel(struct l2cap_conn *conn, u16 cid,
 
 			l2cap_chan_lock(chan);
 		} else {
-			BT_DBG("unknown cid 0x%4.4x", cid);
+			BT_INFO("unknown cid 0x%4.4x", cid);
 			/* Drop packet and return */
 			kfree_skb(skb);
 			return;
 		}
 	}
 
-	BT_DBG("chan %p, len %d", chan, skb->len);
+	BT_INFO("chan %p, len %d", chan, skb->len);
 
 	/* If we receive data on a fixed channel before the info req/rsp
 	 * procdure is done simply assume that the channel is supported
@@ -6974,7 +6974,7 @@ static void l2cap_data_channel(struct l2cap_conn *conn, u16 cid,
 		goto done;
 
 	default:
-		BT_DBG("chan %p: bad mode 0x%2.2x", chan, chan->mode);
+		BT_INFO("chan %p: bad mode 0x%2.2x", chan, chan->mode);
 		break;
 	}
 
@@ -6999,7 +6999,7 @@ static void l2cap_conless_channel(struct l2cap_conn *conn, __le16 psm,
 	if (!chan)
 		goto free_skb;
 
-	BT_DBG("chan %p, len %d", chan, skb->len);
+	BT_INFO("chan %p, len %d", chan, skb->len);
 
 	if (chan->state != BT_BOUND && chan->state != BT_CONNECTED)
 		goto drop;
@@ -7030,7 +7030,7 @@ static void l2cap_recv_frame(struct l2cap_conn *conn, struct sk_buff *skb)
 	__le16 psm;
 
 	if (hcon->state != BT_CONNECTED) {
-		BT_DBG("queueing pending rx skb");
+		BT_INFO("queueing pending rx skb");
 		skb_queue_tail(&conn->pending_rx, skb);
 		return;
 	}
@@ -7054,7 +7054,7 @@ static void l2cap_recv_frame(struct l2cap_conn *conn, struct sk_buff *skb)
 		return;
 	}
 
-	BT_DBG("len %d, cid 0x%4.4x", len, cid);
+	BT_INFO("len %d, cid 0x%4.4x", len, cid);
 
 	switch (cid) {
 	case L2CAP_CID_SIGNALING:
@@ -7083,7 +7083,7 @@ static void process_pending_rx(struct work_struct *work)
 					       pending_rx_work);
 	struct sk_buff *skb;
 
-	BT_DBG("");
+	BT_INFO("");
 
 	while ((skb = skb_dequeue(&conn->pending_rx)))
 		l2cap_recv_frame(conn, skb);
@@ -7112,7 +7112,7 @@ static struct l2cap_conn *l2cap_conn_add(struct hci_conn *hcon)
 	conn->hcon = hci_conn_get(hcon);
 	conn->hchan = hchan;
 
-	BT_DBG("hcon %p conn %p hchan %p", hcon, conn, hchan);
+	BT_INFO("hcon %p conn %p hchan %p", hcon, conn, hchan);
 
 	switch (hcon->type) {
 	case LE_LINK:
@@ -7175,7 +7175,7 @@ int l2cap_chan_connect(struct l2cap_chan *chan, __le16 psm, u16 cid,
 	struct hci_dev *hdev;
 	int err;
 
-	BT_DBG("%pMR -> %pMR (type %u) psm 0x%2.2x", &chan->src, dst,
+	BT_INFO("%pMR -> %pMR (type %u) psm 0x%2.2x", &chan->src, dst,
 	       dst_type, __le16_to_cpu(psm));
 
 	hdev = hci_get_route(dst, &chan->src, chan->src_type);
@@ -7336,7 +7336,7 @@ int l2cap_connect_ind(struct hci_dev *hdev, bdaddr_t *bdaddr)
 	int exact = 0, lm1 = 0, lm2 = 0;
 	struct l2cap_chan *c;
 
-	BT_DBG("hdev %s, bdaddr %pMR", hdev->name, bdaddr);
+	BT_INFO("hdev %s, bdaddr %pMR", hdev->name, bdaddr);
 
 	/* Find listening sockets and check their link_mode */
 	read_lock(&chan_list_lock);
@@ -7406,7 +7406,7 @@ static void l2cap_connect_cfm(struct hci_conn *hcon, u8 status)
 	if (hcon->type != ACL_LINK && hcon->type != LE_LINK)
 		return;
 
-	BT_DBG("hcon %p bdaddr %pMR status %d", hcon, &hcon->dst, status);
+	BT_INFO("hcon %p bdaddr %pMR status %d", hcon, &hcon->dst, status);
 
 	if (status) {
 		l2cap_conn_del(hcon, bt_to_errno(status));
@@ -7461,7 +7461,7 @@ int l2cap_disconn_ind(struct hci_conn *hcon)
 {
 	struct l2cap_conn *conn = hcon->l2cap_data;
 
-	BT_DBG("hcon %p", hcon);
+	BT_INFO("hcon %p", hcon);
 
 	if (!conn)
 		return HCI_ERROR_REMOTE_USER_TERM;
@@ -7473,7 +7473,7 @@ static void l2cap_disconn_cfm(struct hci_conn *hcon, u8 reason)
 	if (hcon->type != ACL_LINK && hcon->type != LE_LINK)
 		return;
 
-	BT_DBG("hcon %p reason %d", hcon, reason);
+	BT_INFO("hcon %p reason %d", hcon, reason);
 
 	l2cap_conn_del(hcon, bt_to_errno(reason));
 }
@@ -7503,14 +7503,14 @@ static void l2cap_security_cfm(struct hci_conn *hcon, u8 status, u8 encrypt)
 	if (!conn)
 		return;
 
-	BT_DBG("conn %p status 0x%2.2x encrypt %u", conn, status, encrypt);
+	BT_INFO("conn %p status 0x%2.2x encrypt %u", conn, status, encrypt);
 
 	mutex_lock(&conn->chan_lock);
 
 	list_for_each_entry(chan, &conn->chan_l, list) {
 		l2cap_chan_lock(chan);
 
-		BT_DBG("chan %p scid 0x%4.4x state %s", chan, chan->scid,
+		BT_INFO("chan %p scid 0x%4.4x state %s", chan, chan->scid,
 		       state_to_string(chan->state));
 
 		if (chan->scid == L2CAP_CID_A2MP) {
@@ -7602,7 +7602,7 @@ void l2cap_recv_acldata(struct hci_conn *hcon, struct sk_buff *skb, u16 flags)
 	if (!conn)
 		goto drop;
 
-	BT_DBG("conn %p len %d flags 0x%x", conn, skb->len, flags);
+	BT_INFO("conn %p len %d flags 0x%x", conn, skb->len, flags);
 
 	switch (flags) {
 	case ACL_START:
@@ -7632,7 +7632,7 @@ void l2cap_recv_acldata(struct hci_conn *hcon, struct sk_buff *skb, u16 flags)
 			return;
 		}
 
-		BT_DBG("Start: total len %d, frag len %d", len, skb->len);
+		BT_INFO("Start: total len %d, frag len %d", len, skb->len);
 
 		if (skb->len > len) {
 			BT_ERR("Frame is too long (len %d, expected len %d)",
@@ -7652,7 +7652,7 @@ void l2cap_recv_acldata(struct hci_conn *hcon, struct sk_buff *skb, u16 flags)
 		break;
 
 	case ACL_CONT:
-		BT_DBG("Cont: frag len %d (expecting %d)", skb->len, conn->rx_len);
+		BT_INFO("Cont: frag len %d (expecting %d)", skb->len, conn->rx_len);
 
 		if (!conn->rx_len) {
 			BT_ERR("Unexpected continuation frame (len %d)", skb->len);
diff --git a/net/bluetooth/l2cap_sock.c b/net/bluetooth/l2cap_sock.c
index 08e9f332adad..1ae566201a41 100644
--- a/net/bluetooth/l2cap_sock.c
+++ b/net/bluetooth/l2cap_sock.c
@@ -85,7 +85,7 @@ static int l2cap_sock_bind(struct socket *sock, struct sockaddr *addr, int alen)
 	struct sockaddr_l2 la;
 	int len, err = 0;
 
-	BT_DBG("sk %p", sk);
+	BT_INFO("sk %p", sk);
 
 	if (!addr || alen < offsetofend(struct sockaddr, sa_family) ||
 	    addr->sa_family != AF_BLUETOOTH)
@@ -181,7 +181,7 @@ static int l2cap_sock_connect(struct socket *sock, struct sockaddr *addr,
 	int len, err = 0;
 	bool zapped;
 
-	BT_DBG("sk %p", sk);
+	BT_INFO("sk %p", sk);
 
 	lock_sock(sk);
 	zapped = sock_flag(sk, SOCK_ZAPPED);
@@ -264,7 +264,7 @@ static int l2cap_sock_listen(struct socket *sock, int backlog)
 	struct l2cap_chan *chan = l2cap_pi(sk)->chan;
 	int err = 0;
 
-	BT_DBG("sk %p backlog %d", sk, backlog);
+	BT_INFO("sk %p backlog %d", sk, backlog);
 
 	lock_sock(sk);
 
@@ -321,7 +321,7 @@ static int l2cap_sock_accept(struct socket *sock, struct socket *newsock,
 
 	timeo = sock_rcvtimeo(sk, flags & O_NONBLOCK);
 
-	BT_DBG("sk %p timeo %ld", sk, timeo);
+	BT_INFO("sk %p timeo %ld", sk, timeo);
 
 	/* Wait for an incoming connection. (wake-one). */
 	add_wait_queue_exclusive(sk_sleep(sk), &wait);
@@ -358,7 +358,7 @@ static int l2cap_sock_accept(struct socket *sock, struct socket *newsock,
 
 	newsock->state = SS_CONNECTED;
 
-	BT_DBG("new socket %p", nsk);
+	BT_INFO("new socket %p", nsk);
 
 done:
 	release_sock(sk);
@@ -372,7 +372,7 @@ static int l2cap_sock_getname(struct socket *sock, struct sockaddr *addr,
 	struct sock *sk = sock->sk;
 	struct l2cap_chan *chan = l2cap_pi(sk)->chan;
 
-	BT_DBG("sock %p, sk %p", sock, sk);
+	BT_INFO("sock %p, sk %p", sock, sk);
 
 	if (peer && sk->sk_state != BT_CONNECTED &&
 	    sk->sk_state != BT_CONNECT && sk->sk_state != BT_CONNECT2 &&
@@ -407,7 +407,7 @@ static int l2cap_sock_getsockopt_old(struct socket *sock, int optname,
 	int len, err = 0;
 	u32 opt;
 
-	BT_DBG("sk %p", sk);
+	BT_INFO("sk %p", sk);
 
 	if (get_user(len, optlen))
 		return -EFAULT;
@@ -523,7 +523,7 @@ static int l2cap_sock_getsockopt(struct socket *sock, int level, int optname,
 	struct bt_power pwr;
 	int len, err = 0;
 
-	BT_DBG("sk %p", sk);
+	BT_INFO("sk %p", sk);
 
 	if (level == SOL_L2CAP)
 		return l2cap_sock_getsockopt_old(sock, optname, optval, optlen);
@@ -659,7 +659,7 @@ static int l2cap_sock_setsockopt_old(struct socket *sock, int optname,
 	int len, err = 0;
 	u32 opt;
 
-	BT_DBG("sk %p", sk);
+	BT_INFO("sk %p", sk);
 
 	lock_sock(sk);
 
@@ -775,7 +775,7 @@ static int l2cap_sock_setsockopt(struct socket *sock, int level, int optname,
 	int len, err = 0;
 	u32 opt;
 
-	BT_DBG("sk %p", sk);
+	BT_INFO("sk %p", sk);
 
 	if (level == SOL_L2CAP)
 		return l2cap_sock_setsockopt_old(sock, optname, optval, optlen);
@@ -979,7 +979,7 @@ static int l2cap_sock_sendmsg(struct socket *sock, struct msghdr *msg,
 	struct l2cap_chan *chan = l2cap_pi(sk)->chan;
 	int err;
 
-	BT_DBG("sock %p, sk %p", sock, sk);
+	BT_INFO("sock %p, sk %p", sock, sk);
 
 	err = sock_error(sk);
 	if (err)
@@ -1073,7 +1073,7 @@ static void l2cap_sock_kill(struct sock *sk)
 	if (!sock_flag(sk, SOCK_ZAPPED) || sk->sk_socket)
 		return;
 
-	BT_DBG("sk %p state %s", sk, state_to_string(sk->sk_state));
+	BT_INFO("sk %p state %s", sk, state_to_string(sk->sk_state));
 
 	/* Kill poor orphan */
 
@@ -1093,7 +1093,7 @@ static int __l2cap_wait_ack(struct sock *sk, struct l2cap_chan *chan)
 	add_wait_queue(sk_sleep(sk), &wait);
 	set_current_state(TASK_INTERRUPTIBLE);
 	do {
-		BT_DBG("Waiting for %d ACKs, timeout %04d ms",
+		BT_INFO("Waiting for %d ACKs, timeout %04d ms",
 		       chan->unacked_frames, time_after(jiffies, timeout) ? 0 :
 		       jiffies_to_msecs(timeout - jiffies));
 
@@ -1134,7 +1134,7 @@ static int l2cap_sock_shutdown(struct socket *sock, int how)
 	struct l2cap_conn *conn;
 	int err = 0;
 
-	BT_DBG("sock %p, sk %p", sock, sk);
+	BT_INFO("sock %p, sk %p", sock, sk);
 
 	if (!sk)
 		return 0;
@@ -1144,7 +1144,7 @@ static int l2cap_sock_shutdown(struct socket *sock, int how)
 	if (sk->sk_shutdown)
 		goto shutdown_already;
 
-	BT_DBG("Handling sock shutdown");
+	BT_INFO("Handling sock shutdown");
 
 	/* prevent sk structure from being freed whilst unlocked */
 	sock_hold(sk);
@@ -1153,7 +1153,7 @@ static int l2cap_sock_shutdown(struct socket *sock, int how)
 	/* prevent chan structure from being freed whilst unlocked */
 	l2cap_chan_hold(chan);
 
-	BT_DBG("chan %p state %s", chan, state_to_string(chan->state));
+	BT_INFO("chan %p state %s", chan, state_to_string(chan->state));
 
 	if (chan->mode == L2CAP_MODE_ERTM &&
 	    chan->unacked_frames > 0 &&
@@ -1208,7 +1208,7 @@ static int l2cap_sock_shutdown(struct socket *sock, int how)
 
 	release_sock(sk);
 
-	BT_DBG("Sock shutdown complete err: %d", err);
+	BT_INFO("Sock shutdown complete err: %d", err);
 
 	return err;
 }
@@ -1219,7 +1219,7 @@ static int l2cap_sock_release(struct socket *sock)
 	int err;
 	struct l2cap_chan *chan;
 
-	BT_DBG("sock %p, sk %p", sock, sk);
+	BT_INFO("sock %p, sk %p", sock, sk);
 
 	if (!sk)
 		return 0;
@@ -1245,14 +1245,14 @@ static void l2cap_sock_cleanup_listen(struct sock *parent)
 {
 	struct sock *sk;
 
-	BT_DBG("parent %p state %s", parent,
+	BT_INFO("parent %p state %s", parent,
 	       state_to_string(parent->sk_state));
 
 	/* Close not yet accepted channels */
 	while ((sk = bt_accept_dequeue(parent, NULL))) {
 		struct l2cap_chan *chan = l2cap_pi(sk)->chan;
 
-		BT_DBG("child chan %p state %s", chan,
+		BT_INFO("child chan %p state %s", chan,
 		       state_to_string(chan->state));
 
 		l2cap_chan_hold(chan);
@@ -1275,7 +1275,7 @@ static struct l2cap_chan *l2cap_sock_new_connection_cb(struct l2cap_chan *chan)
 
 	/* Check for backlog size */
 	if (sk_acceptq_is_full(parent)) {
-		BT_DBG("backlog full %d", parent->sk_ack_backlog);
+		BT_INFO("backlog full %d", parent->sk_ack_backlog);
 		release_sock(parent);
 		return NULL;
 	}
@@ -1361,7 +1361,7 @@ static void l2cap_sock_teardown_cb(struct l2cap_chan *chan, int err)
 	if (!sk)
 		return;
 
-	BT_DBG("chan %p state %s", chan, state_to_string(chan->state));
+	BT_INFO("chan %p state %s", chan, state_to_string(chan->state));
 
 	/* This callback can be called both for server (BT_LISTEN)
 	 * sockets as well as "normal" ones. To avoid lockdep warnings
@@ -1449,7 +1449,7 @@ static void l2cap_sock_ready_cb(struct l2cap_chan *chan)
 
 	parent = bt_sk(sk)->parent;
 
-	BT_DBG("sk %p, parent %p", sk, parent);
+	BT_INFO("sk %p, parent %p", sk, parent);
 
 	sk->sk_state = BT_CONNECTED;
 	sk->sk_state_change(sk);
@@ -1542,7 +1542,7 @@ static const struct l2cap_ops l2cap_chan_ops = {
 
 static void l2cap_sock_destruct(struct sock *sk)
 {
-	BT_DBG("sk %p", sk);
+	BT_INFO("sk %p", sk);
 
 	if (l2cap_pi(sk)->chan) {
 		l2cap_pi(sk)->chan->data = NULL;
@@ -1575,7 +1575,7 @@ static void l2cap_sock_init(struct sock *sk, struct sock *parent)
 {
 	struct l2cap_chan *chan = l2cap_pi(sk)->chan;
 
-	BT_DBG("sk %p", sk);
+	BT_INFO("sk %p", sk);
 
 	if (parent) {
 		struct l2cap_chan *pchan = l2cap_pi(parent)->chan;
@@ -1682,7 +1682,7 @@ static int l2cap_sock_create(struct net *net, struct socket *sock, int protocol,
 {
 	struct sock *sk;
 
-	BT_DBG("sock %p", sock);
+	BT_INFO("sock %p", sock);
 
 	sock->state = SS_UNCONNECTED;
 
diff --git a/net/bluetooth/mgmt.c b/net/bluetooth/mgmt.c
index 0ae5d3cab4dc..83e5c46784ea 100644
--- a/net/bluetooth/mgmt.c
+++ b/net/bluetooth/mgmt.c
@@ -106,6 +106,27 @@ static const u16 mgmt_commands[] = {
 	MGMT_OP_START_LIMITED_DISCOVERY,
 	MGMT_OP_READ_EXT_INFO,
 	MGMT_OP_SET_APPEARANCE,
+	MGMT_OP_GET_PHY_CONFIGURATION,
+	MGMT_OP_SET_PHY_CONFIGURATION,
+	MGMT_OP_SET_BLOCKED_KEYS,
+	MGMT_OP_SET_WIDEBAND_SPEECH,
+	MGMT_OP_READ_CONTROLLER_CAP,
+	MGMT_OP_READ_EXP_FEATURES_INFO,
+	MGMT_OP_SET_EXP_FEATURE,
+	MGMT_OP_READ_DEF_SYSTEM_CONFIG,
+	MGMT_OP_SET_DEF_SYSTEM_CONFIG,
+	MGMT_OP_READ_DEF_RUNTIME_CONFIG,
+	MGMT_OP_SET_DEF_RUNTIME_CONFIG,
+	MGMT_OP_GET_DEVICE_FLAGS,
+	MGMT_OP_SET_DEVICE_FLAGS,
+	MGMT_OP_READ_ADV_MONITOR_FEATURES,
+	MGMT_OP_ADD_ADV_PATTERNS_MONITOR,
+	MGMT_OP_REMOVE_ADV_MONITOR,
+	MGMT_OP_ADD_EXT_ADV_PARAMS,
+	MGMT_OP_ADD_EXT_ADV_DATA,
+	MGMT_OP_ADD_ADV_PATTERNS_MONITOR_RSSI,
+    MGMT_OP_SET_OPP_TRANSFER,
+    MGMT_OP_SET_VND_PLAY,
 };
 
 static const u16 mgmt_events[] = {
@@ -292,7 +313,7 @@ static int read_version(struct sock *sk, struct hci_dev *hdev, void *data,
 {
 	struct mgmt_rp_read_version rp;
 
-	BT_DBG("sock %p", sk);
+	BT_INFO("sock %p", sk);
 
 	mgmt_fill_version_info(&rp);
 
@@ -308,7 +329,7 @@ static int read_commands(struct sock *sk, struct hci_dev *hdev, void *data,
 	size_t rp_size;
 	int i, err;
 
-	BT_DBG("sock %p", sk);
+	BT_INFO("sock %p", sk);
 
 	if (hci_sock_test_flag(sk, HCI_SOCK_TRUSTED)) {
 		num_commands = ARRAY_SIZE(mgmt_commands);
@@ -361,7 +382,7 @@ static int read_index_list(struct sock *sk, struct hci_dev *hdev, void *data,
 	u16 count;
 	int err;
 
-	BT_DBG("sock %p", sk);
+	BT_INFO("sock %p", sk);
 
 	read_lock(&hci_dev_list_lock);
 
@@ -395,7 +416,7 @@ static int read_index_list(struct sock *sk, struct hci_dev *hdev, void *data,
 		if (d->dev_type == HCI_PRIMARY &&
 		    !hci_dev_test_flag(d, HCI_UNCONFIGURED)) {
 			rp->index[count++] = cpu_to_le16(d->id);
-			BT_DBG("Added hci%u", d->id);
+			BT_INFO("Added hci%u", d->id);
 		}
 	}
 
@@ -421,7 +442,7 @@ static int read_unconf_index_list(struct sock *sk, struct hci_dev *hdev,
 	u16 count;
 	int err;
 
-	BT_DBG("sock %p", sk);
+	BT_INFO("sock %p", sk);
 
 	read_lock(&hci_dev_list_lock);
 
@@ -455,7 +476,7 @@ static int read_unconf_index_list(struct sock *sk, struct hci_dev *hdev,
 		if (d->dev_type == HCI_PRIMARY &&
 		    hci_dev_test_flag(d, HCI_UNCONFIGURED)) {
 			rp->index[count++] = cpu_to_le16(d->id);
-			BT_DBG("Added hci%u", d->id);
+			BT_INFO("Added hci%u", d->id);
 		}
 	}
 
@@ -480,7 +501,7 @@ static int read_ext_index_list(struct sock *sk, struct hci_dev *hdev,
 	u16 count;
 	int err;
 
-	BT_DBG("sock %p", sk);
+	BT_INFO("sock %p", sk);
 
 	read_lock(&hci_dev_list_lock);
 
@@ -522,7 +543,7 @@ static int read_ext_index_list(struct sock *sk, struct hci_dev *hdev,
 
 		rp->entry[count].bus = d->bus;
 		rp->entry[count++].index = cpu_to_le16(d->id);
-		BT_DBG("Added hci%u", d->id);
+		BT_INFO("Added hci%u", d->id);
 	}
 
 	rp->num_controllers = cpu_to_le16(count);
@@ -598,7 +619,7 @@ static int read_config_info(struct sock *sk, struct hci_dev *hdev,
 	struct mgmt_rp_read_config_info rp;
 	u32 options = 0;
 
-	BT_DBG("sock %p %s", sk, hdev->name);
+	BT_INFO("sock %p %s", sk, hdev->name);
 
 	hci_dev_lock(hdev);
 
@@ -932,7 +953,7 @@ static void rpa_expired(struct work_struct *work)
 					    rpa_expired.work);
 	struct hci_request req;
 
-	BT_DBG("");
+	BT_INFO("");
 
 	hci_dev_set_flag(hdev, HCI_RPA_EXPIRED);
 
@@ -972,7 +993,7 @@ static int read_controller_info(struct sock *sk, struct hci_dev *hdev,
 {
 	struct mgmt_rp_read_info rp;
 
-	BT_DBG("sock %p %s", sk, hdev->name);
+	BT_INFO("sock %p %s", sk, hdev->name);
 
 	hci_dev_lock(hdev);
 
@@ -1028,7 +1049,7 @@ static int read_ext_controller_info(struct sock *sk, struct hci_dev *hdev,
 	struct mgmt_rp_read_ext_info *rp = (void *)buf;
 	u16 eir_len;
 
-	BT_DBG("sock %p %s", sk, hdev->name);
+	BT_INFO("sock %p %s", sk, hdev->name);
 
 	memset(&buf, 0, sizeof(buf));
 
@@ -1087,7 +1108,7 @@ static int send_settings_rsp(struct sock *sk, u16 opcode, struct hci_dev *hdev)
 
 static void clean_up_hci_complete(struct hci_dev *hdev, u8 status, u16 opcode)
 {
-	BT_DBG("%s status 0x%02x", hdev->name, status);
+	BT_INFO("%s status 0x%02x", hdev->name, status);
 
 	if (hci_conn_count(hdev) == 0) {
 		cancel_delayed_work(&hdev->power_off);
@@ -1163,7 +1184,7 @@ static int set_powered(struct sock *sk, struct hci_dev *hdev, void *data,
 	struct mgmt_pending_cmd *cmd;
 	int err;
 
-	BT_DBG("request for %s", hdev->name);
+	BT_INFO("request for %s", hdev->name);
 
 	if (cp->val != 0x00 && cp->val != 0x01)
 		return mgmt_cmd_status(sk, hdev->id, MGMT_OP_SET_POWERED,
@@ -1304,7 +1325,7 @@ void mgmt_set_discoverable_complete(struct hci_dev *hdev, u8 status)
 {
 	struct mgmt_pending_cmd *cmd;
 
-	BT_DBG("status 0x%02x", status);
+	BT_INFO("status 0x%02x", status);
 
 	hci_dev_lock(hdev);
 
@@ -1343,7 +1364,7 @@ static int set_discoverable(struct sock *sk, struct hci_dev *hdev, void *data,
 	u16 timeout;
 	int err;
 
-	BT_DBG("request for %s", hdev->name);
+	BT_INFO("request for %s", hdev->name);
 
 	if (!hci_dev_test_flag(hdev, HCI_LE_ENABLED) &&
 	    !hci_dev_test_flag(hdev, HCI_BREDR_ENABLED))
@@ -1463,7 +1484,7 @@ void mgmt_set_connectable_complete(struct hci_dev *hdev, u8 status)
 {
 	struct mgmt_pending_cmd *cmd;
 
-	BT_DBG("status 0x%02x", status);
+	BT_INFO("status 0x%02x", status);
 
 	hci_dev_lock(hdev);
 
@@ -1523,7 +1544,7 @@ static int set_connectable(struct sock *sk, struct hci_dev *hdev, void *data,
 	struct mgmt_pending_cmd *cmd;
 	int err;
 
-	BT_DBG("request for %s", hdev->name);
+	BT_INFO("request for %s", hdev->name);
 
 	if (!hci_dev_test_flag(hdev, HCI_LE_ENABLED) &&
 	    !hci_dev_test_flag(hdev, HCI_BREDR_ENABLED))
@@ -1580,7 +1601,7 @@ static int set_bondable(struct sock *sk, struct hci_dev *hdev, void *data,
 	bool changed;
 	int err;
 
-	BT_DBG("request for %s", hdev->name);
+	BT_INFO("request for %s", hdev->name);
 
 	if (cp->val != 0x00 && cp->val != 0x01)
 		return mgmt_cmd_status(sk, hdev->id, MGMT_OP_SET_BONDABLE,
@@ -1624,7 +1645,7 @@ static int set_link_security(struct sock *sk, struct hci_dev *hdev, void *data,
 	u8 val, status;
 	int err;
 
-	BT_DBG("request for %s", hdev->name);
+	BT_INFO("request for %s", hdev->name);
 
 	status = mgmt_bredr_support(hdev);
 	if (status)
@@ -1692,7 +1713,7 @@ static int set_ssp(struct sock *sk, struct hci_dev *hdev, void *data, u16 len)
 	u8 status;
 	int err;
 
-	BT_DBG("request for %s", hdev->name);
+	BT_INFO("request for %s", hdev->name);
 
 	status = mgmt_bredr_support(hdev);
 	if (status)
@@ -1773,7 +1794,7 @@ static int set_hs(struct sock *sk, struct hci_dev *hdev, void *data, u16 len)
 	u8 status;
 	int err;
 
-	BT_DBG("request for %s", hdev->name);
+	BT_INFO("request for %s", hdev->name);
 
 	if (!IS_ENABLED(CONFIG_BT_HS))
 		return mgmt_cmd_status(sk, hdev->id, MGMT_OP_SET_HS,
@@ -1883,7 +1904,7 @@ static int set_le(struct sock *sk, struct hci_dev *hdev, void *data, u16 len)
 	int err;
 	u8 val, enabled;
 
-	BT_DBG("request for %s", hdev->name);
+	BT_INFO("request for %s", hdev->name);
 
 	if (!lmp_le_capable(hdev))
 		return mgmt_cmd_status(sk, hdev->id, MGMT_OP_SET_LE,
@@ -2044,7 +2065,7 @@ static void mgmt_class_complete(struct hci_dev *hdev, u16 mgmt_op, u8 status)
 
 static void add_uuid_complete(struct hci_dev *hdev, u8 status, u16 opcode)
 {
-	BT_DBG("status 0x%02x", status);
+	BT_INFO("status 0x%02x", status);
 
 	mgmt_class_complete(hdev, MGMT_OP_ADD_UUID, status);
 }
@@ -2057,7 +2078,7 @@ static int add_uuid(struct sock *sk, struct hci_dev *hdev, void *data, u16 len)
 	struct bt_uuid *uuid;
 	int err;
 
-	BT_DBG("request for %s", hdev->name);
+	BT_INFO("request for %s", hdev->name);
 
 	hci_dev_lock(hdev);
 
@@ -2123,7 +2144,7 @@ static bool enable_service_cache(struct hci_dev *hdev)
 
 static void remove_uuid_complete(struct hci_dev *hdev, u8 status, u16 opcode)
 {
-	BT_DBG("status 0x%02x", status);
+	BT_INFO("status 0x%02x", status);
 
 	mgmt_class_complete(hdev, MGMT_OP_REMOVE_UUID, status);
 }
@@ -2138,7 +2159,7 @@ static int remove_uuid(struct sock *sk, struct hci_dev *hdev, void *data,
 	struct hci_request req;
 	int err, found;
 
-	BT_DBG("request for %s", hdev->name);
+	BT_INFO("request for %s", hdev->name);
 
 	hci_dev_lock(hdev);
 
@@ -2209,7 +2230,7 @@ static int remove_uuid(struct sock *sk, struct hci_dev *hdev, void *data,
 
 static void set_class_complete(struct hci_dev *hdev, u8 status, u16 opcode)
 {
-	BT_DBG("status 0x%02x", status);
+	BT_INFO("status 0x%02x", status);
 
 	mgmt_class_complete(hdev, MGMT_OP_SET_DEV_CLASS, status);
 }
@@ -2222,7 +2243,7 @@ static int set_dev_class(struct sock *sk, struct hci_dev *hdev, void *data,
 	struct hci_request req;
 	int err;
 
-	BT_DBG("request for %s", hdev->name);
+	BT_INFO("request for %s", hdev->name);
 
 	if (!lmp_bredr_capable(hdev))
 		return mgmt_cmd_status(sk, hdev->id, MGMT_OP_SET_DEV_CLASS,
@@ -2295,7 +2316,7 @@ static int load_link_keys(struct sock *sk, struct hci_dev *hdev, void *data,
 	bool changed;
 	int i;
 
-	BT_DBG("request for %s", hdev->name);
+	BT_INFO("request for %s", hdev->name);
 
 	if (!lmp_bredr_capable(hdev))
 		return mgmt_cmd_status(sk, hdev->id, MGMT_OP_LOAD_LINK_KEYS,
@@ -2321,7 +2342,7 @@ static int load_link_keys(struct sock *sk, struct hci_dev *hdev, void *data,
 		return mgmt_cmd_status(sk, hdev->id, MGMT_OP_LOAD_LINK_KEYS,
 				       MGMT_STATUS_INVALID_PARAMS);
 
-	BT_DBG("%s debug_keys %u key_count %u", hdev->name, cp->debug_keys,
+	BT_INFO("%s debug_keys %u key_count %u", hdev->name, cp->debug_keys,
 	       key_count);
 
 	for (i = 0; i < key_count; i++) {
@@ -2515,7 +2536,7 @@ static int disconnect(struct sock *sk, struct hci_dev *hdev, void *data,
 	struct hci_conn *conn;
 	int err;
 
-	BT_DBG("");
+	BT_INFO("");
 
 	memset(&rp, 0, sizeof(rp));
 	bacpy(&rp.addr.bdaddr, &cp->addr.bdaddr);
@@ -2599,7 +2620,7 @@ static int get_connections(struct sock *sk, struct hci_dev *hdev, void *data,
 	int err;
 	u16 i;
 
-	BT_DBG("");
+	BT_INFO("");
 
 	hci_dev_lock(hdev);
 
@@ -2675,7 +2696,7 @@ static int pin_code_reply(struct sock *sk, struct hci_dev *hdev, void *data,
 	struct mgmt_pending_cmd *cmd;
 	int err;
 
-	BT_DBG("");
+	BT_INFO("");
 
 	hci_dev_lock(hdev);
 
@@ -2733,7 +2754,7 @@ static int set_io_capability(struct sock *sk, struct hci_dev *hdev, void *data,
 {
 	struct mgmt_cp_set_io_capability *cp = data;
 
-	BT_DBG("");
+	BT_INFO("");
 
 	if (cp->io_capability > SMP_IO_KEYBOARD_DISPLAY)
 		return mgmt_cmd_status(sk, hdev->id, MGMT_OP_SET_IO_CAPABILITY,
@@ -2743,7 +2764,7 @@ static int set_io_capability(struct sock *sk, struct hci_dev *hdev, void *data,
 
 	hdev->io_capability = cp->io_capability;
 
-	BT_DBG("%s IO capability set to 0x%02x", hdev->name,
+	BT_INFO("%s IO capability set to 0x%02x", hdev->name,
 	       hdev->io_capability);
 
 	hci_dev_unlock(hdev);
@@ -2815,11 +2836,11 @@ static void pairing_complete_cb(struct hci_conn *conn, u8 status)
 {
 	struct mgmt_pending_cmd *cmd;
 
-	BT_DBG("status %u", status);
+	BT_INFO("status %u", status);
 
 	cmd = find_pairing(conn);
 	if (!cmd) {
-		BT_DBG("Unable to find a pending command");
+		BT_INFO("Unable to find a pending command");
 		return;
 	}
 
@@ -2831,14 +2852,14 @@ static void le_pairing_complete_cb(struct hci_conn *conn, u8 status)
 {
 	struct mgmt_pending_cmd *cmd;
 
-	BT_DBG("status %u", status);
+	BT_INFO("status %u", status);
 
 	if (!status)
 		return;
 
 	cmd = find_pairing(conn);
 	if (!cmd) {
-		BT_DBG("Unable to find a pending command");
+		BT_INFO("Unable to find a pending command");
 		return;
 	}
 
@@ -2856,7 +2877,7 @@ static int pair_device(struct sock *sk, struct hci_dev *hdev, void *data,
 	struct hci_conn *conn;
 	int err;
 
-	BT_DBG("");
+	BT_INFO("");
 
 	memset(&rp, 0, sizeof(rp));
 	bacpy(&rp.addr.bdaddr, &cp->addr.bdaddr);
@@ -2985,7 +3006,7 @@ static int cancel_pair_device(struct sock *sk, struct hci_dev *hdev, void *data,
 	struct hci_conn *conn;
 	int err;
 
-	BT_DBG("");
+	BT_INFO("");
 
 	hci_dev_lock(hdev);
 
@@ -3096,7 +3117,7 @@ static int pin_code_neg_reply(struct sock *sk, struct hci_dev *hdev,
 {
 	struct mgmt_cp_pin_code_neg_reply *cp = data;
 
-	BT_DBG("");
+	BT_INFO("");
 
 	return user_pairing_resp(sk, hdev, &cp->addr,
 				MGMT_OP_PIN_CODE_NEG_REPLY,
@@ -3108,7 +3129,7 @@ static int user_confirm_reply(struct sock *sk, struct hci_dev *hdev, void *data,
 {
 	struct mgmt_cp_user_confirm_reply *cp = data;
 
-	BT_DBG("");
+	BT_INFO("");
 
 	if (len != sizeof(*cp))
 		return mgmt_cmd_status(sk, hdev->id, MGMT_OP_USER_CONFIRM_REPLY,
@@ -3124,7 +3145,7 @@ static int user_confirm_neg_reply(struct sock *sk, struct hci_dev *hdev,
 {
 	struct mgmt_cp_user_confirm_neg_reply *cp = data;
 
-	BT_DBG("");
+	BT_INFO("");
 
 	return user_pairing_resp(sk, hdev, &cp->addr,
 				 MGMT_OP_USER_CONFIRM_NEG_REPLY,
@@ -3136,7 +3157,7 @@ static int user_passkey_reply(struct sock *sk, struct hci_dev *hdev, void *data,
 {
 	struct mgmt_cp_user_passkey_reply *cp = data;
 
-	BT_DBG("");
+	BT_INFO("");
 
 	return user_pairing_resp(sk, hdev, &cp->addr,
 				 MGMT_OP_USER_PASSKEY_REPLY,
@@ -3148,7 +3169,7 @@ static int user_passkey_neg_reply(struct sock *sk, struct hci_dev *hdev,
 {
 	struct mgmt_cp_user_passkey_neg_reply *cp = data;
 
-	BT_DBG("");
+	BT_INFO("");
 
 	return user_pairing_resp(sk, hdev, &cp->addr,
 				 MGMT_OP_USER_PASSKEY_NEG_REPLY,
@@ -3189,7 +3210,7 @@ static void set_name_complete(struct hci_dev *hdev, u8 status, u16 opcode)
 	struct mgmt_cp_set_local_name *cp;
 	struct mgmt_pending_cmd *cmd;
 
-	BT_DBG("status 0x%02x", status);
+	BT_INFO("status 0x%02x", status);
 
 	hci_dev_lock(hdev);
 
@@ -3224,7 +3245,7 @@ static int set_local_name(struct sock *sk, struct hci_dev *hdev, void *data,
 	struct hci_request req;
 	int err;
 
-	BT_DBG("");
+	BT_INFO("");
 
 	hci_dev_lock(hdev);
 
@@ -3293,7 +3314,7 @@ static int set_appearance(struct sock *sk, struct hci_dev *hdev, void *data,
 	u16 apperance;
 	int err;
 
-	BT_DBG("");
+	BT_INFO("");
 
 	if (!lmp_le_capable(hdev))
 		return mgmt_cmd_status(sk, hdev->id, MGMT_OP_SET_APPEARANCE,
@@ -3325,7 +3346,7 @@ static int get_phy_configuration(struct sock *sk, struct hci_dev *hdev,
 {
 	struct mgmt_rp_get_phy_confguration rp;
 
-	BT_DBG("sock %p %s", sk, hdev->name);
+	BT_INFO("sock %p %s", sk, hdev->name);
 
 	hci_dev_lock(hdev);
 
@@ -3358,7 +3379,7 @@ static void set_default_phy_complete(struct hci_dev *hdev, u8 status,
 {
 	struct mgmt_pending_cmd *cmd;
 
-	BT_DBG("status 0x%02x", status);
+	BT_INFO("status 0x%02x", status);
 
 	hci_dev_lock(hdev);
 
@@ -3396,7 +3417,7 @@ static int set_phy_configuration(struct sock *sk, struct hci_dev *hdev,
 	bool changed = false;
 	int err;
 
-	BT_DBG("sock %p %s", sk, hdev->name);
+	BT_INFO("sock %p %s", sk, hdev->name);
 
 	configurable_phys = get_configurable_phys(hdev);
 	supported_phys = get_supported_phys(hdev);
@@ -3546,7 +3567,7 @@ static void read_local_oob_data_complete(struct hci_dev *hdev, u8 status,
 	size_t rp_size = sizeof(mgmt_rp);
 	struct mgmt_pending_cmd *cmd;
 
-	BT_DBG("%s status %u", hdev->name, status);
+	BT_INFO("%s status %u", hdev->name, status);
 
 	cmd = pending_find(MGMT_OP_READ_LOCAL_OOB_DATA, hdev);
 	if (!cmd)
@@ -3605,7 +3626,7 @@ static int read_local_oob_data(struct sock *sk, struct hci_dev *hdev,
 	struct hci_request req;
 	int err;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	hci_dev_lock(hdev);
 
@@ -3655,7 +3676,7 @@ static int add_remote_oob_data(struct sock *sk, struct hci_dev *hdev,
 	struct mgmt_addr_info *addr = data;
 	int err;
 
-	BT_DBG("%s ", hdev->name);
+	BT_INFO("%s ", hdev->name);
 
 	if (!bdaddr_type_is_valid(addr->type))
 		return mgmt_cmd_complete(sk, hdev->id,
@@ -3764,7 +3785,7 @@ static int remove_remote_oob_data(struct sock *sk, struct hci_dev *hdev,
 	u8 status;
 	int err;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	if (cp->addr.type != BDADDR_BREDR)
 		return mgmt_cmd_complete(sk, hdev->id,
@@ -3798,7 +3819,7 @@ void mgmt_start_discovery_complete(struct hci_dev *hdev, u8 status)
 {
 	struct mgmt_pending_cmd *cmd;
 
-	BT_DBG("status %d", status);
+	BT_INFO("status %d", status);
 
 	hci_dev_lock(hdev);
 
@@ -3852,7 +3873,7 @@ static int start_discovery_internal(struct sock *sk, struct hci_dev *hdev,
 	u8 status;
 	int err;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	hci_dev_lock(hdev);
 
@@ -3937,7 +3958,7 @@ static int start_service_discovery(struct sock *sk, struct hci_dev *hdev,
 	u8 status;
 	int err;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	hci_dev_lock(hdev);
 
@@ -4032,7 +4053,7 @@ void mgmt_stop_discovery_complete(struct hci_dev *hdev, u8 status)
 {
 	struct mgmt_pending_cmd *cmd;
 
-	BT_DBG("status %d", status);
+	BT_INFO("status %d", status);
 
 	hci_dev_lock(hdev);
 
@@ -4052,7 +4073,7 @@ static int stop_discovery(struct sock *sk, struct hci_dev *hdev, void *data,
 	struct mgmt_pending_cmd *cmd;
 	int err;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	hci_dev_lock(hdev);
 
@@ -4094,7 +4115,7 @@ static int confirm_name(struct sock *sk, struct hci_dev *hdev, void *data,
 	struct inquiry_entry *e;
 	int err;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	hci_dev_lock(hdev);
 
@@ -4136,7 +4157,7 @@ static int block_device(struct sock *sk, struct hci_dev *hdev, void *data,
 	u8 status;
 	int err;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	if (!bdaddr_type_is_valid(cp->addr.type))
 		return mgmt_cmd_complete(sk, hdev->id, MGMT_OP_BLOCK_DEVICE,
@@ -4172,7 +4193,7 @@ static int unblock_device(struct sock *sk, struct hci_dev *hdev, void *data,
 	u8 status;
 	int err;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	if (!bdaddr_type_is_valid(cp->addr.type))
 		return mgmt_cmd_complete(sk, hdev->id, MGMT_OP_UNBLOCK_DEVICE,
@@ -4209,7 +4230,7 @@ static int set_device_id(struct sock *sk, struct hci_dev *hdev, void *data,
 	int err;
 	__u16 source;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	source = __le16_to_cpu(cp->source);
 
@@ -4239,7 +4260,7 @@ static int set_device_id(struct sock *sk, struct hci_dev *hdev, void *data,
 static void enable_advertising_instance(struct hci_dev *hdev, u8 status,
 					u16 opcode)
 {
-	BT_DBG("status %d", status);
+	BT_INFO("status %d", status);
 }
 
 static void set_advertising_complete(struct hci_dev *hdev, u8 status,
@@ -4314,7 +4335,7 @@ static int set_advertising(struct sock *sk, struct hci_dev *hdev, void *data,
 	u8 val, status;
 	int err;
 
-	BT_DBG("request for %s", hdev->name);
+	BT_INFO("request for %s", hdev->name);
 
 	status = mgmt_le_support(hdev);
 	if (status)
@@ -4419,7 +4440,7 @@ static int set_static_address(struct sock *sk, struct hci_dev *hdev,
 	struct mgmt_cp_set_static_address *cp = data;
 	int err;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	if (!lmp_le_capable(hdev))
 		return mgmt_cmd_status(sk, hdev->id, MGMT_OP_SET_STATIC_ADDRESS,
@@ -4464,7 +4485,7 @@ static int set_scan_params(struct sock *sk, struct hci_dev *hdev,
 	__u16 interval, window;
 	int err;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	if (!lmp_le_capable(hdev))
 		return mgmt_cmd_status(sk, hdev->id, MGMT_OP_SET_SCAN_PARAMS,
@@ -4519,7 +4540,7 @@ static void fast_connectable_complete(struct hci_dev *hdev, u8 status,
 {
 	struct mgmt_pending_cmd *cmd;
 
-	BT_DBG("status 0x%02x", status);
+	BT_INFO("status 0x%02x", status);
 
 	hci_dev_lock(hdev);
 
@@ -4556,7 +4577,7 @@ static int set_fast_connectable(struct sock *sk, struct hci_dev *hdev,
 	struct hci_request req;
 	int err;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	if (!hci_dev_test_flag(hdev, HCI_BREDR_ENABLED) ||
 	    hdev->hci_ver < BLUETOOTH_VER_1_2)
@@ -4617,7 +4638,7 @@ static void set_bredr_complete(struct hci_dev *hdev, u8 status, u16 opcode)
 {
 	struct mgmt_pending_cmd *cmd;
 
-	BT_DBG("status 0x%02x", status);
+	BT_INFO("status 0x%02x", status);
 
 	hci_dev_lock(hdev);
 
@@ -4652,7 +4673,7 @@ static int set_bredr(struct sock *sk, struct hci_dev *hdev, void *data, u16 len)
 	struct hci_request req;
 	int err;
 
-	BT_DBG("request for %s", hdev->name);
+	BT_INFO("request for %s", hdev->name);
 
 	if (!lmp_bredr_capable(hdev) || !lmp_le_capable(hdev))
 		return mgmt_cmd_status(sk, hdev->id, MGMT_OP_SET_BREDR,
@@ -4762,7 +4783,7 @@ static void sc_enable_complete(struct hci_dev *hdev, u8 status, u16 opcode)
 	struct mgmt_pending_cmd *cmd;
 	struct mgmt_mode *cp;
 
-	BT_DBG("%s status %u", hdev->name, status);
+	BT_INFO("%s status %u", hdev->name, status);
 
 	hci_dev_lock(hdev);
 
@@ -4811,7 +4832,7 @@ static int set_secure_conn(struct sock *sk, struct hci_dev *hdev,
 	u8 val;
 	int err;
 
-	BT_DBG("request for %s", hdev->name);
+	BT_INFO("request for %s", hdev->name);
 
 	if (!lmp_sc_capable(hdev) &&
 	    !hci_dev_test_flag(hdev, HCI_LE_ENABLED))
@@ -4897,7 +4918,7 @@ static int set_debug_keys(struct sock *sk, struct hci_dev *hdev,
 	bool changed, use_changed;
 	int err;
 
-	BT_DBG("request for %s", hdev->name);
+	BT_INFO("request for %s", hdev->name);
 
 	if (cp->val != 0x00 && cp->val != 0x01 && cp->val != 0x02)
 		return mgmt_cmd_status(sk, hdev->id, MGMT_OP_SET_DEBUG_KEYS,
@@ -4944,7 +4965,7 @@ static int set_privacy(struct sock *sk, struct hci_dev *hdev, void *cp_data,
 	bool changed;
 	int err;
 
-	BT_DBG("request for %s", hdev->name);
+	BT_INFO("request for %s", hdev->name);
 
 	if (!lmp_le_capable(hdev))
 		return mgmt_cmd_status(sk, hdev->id, MGMT_OP_SET_PRIVACY,
@@ -5019,7 +5040,7 @@ static int load_irks(struct sock *sk, struct hci_dev *hdev, void *cp_data,
 	u16 irk_count, expected_len;
 	int i, err;
 
-	BT_DBG("request for %s", hdev->name);
+	BT_INFO("request for %s", hdev->name);
 
 	if (!lmp_le_capable(hdev))
 		return mgmt_cmd_status(sk, hdev->id, MGMT_OP_LOAD_IRKS,
@@ -5041,7 +5062,7 @@ static int load_irks(struct sock *sk, struct hci_dev *hdev, void *cp_data,
 				       MGMT_STATUS_INVALID_PARAMS);
 	}
 
-	BT_DBG("%s irk_count %u", hdev->name, irk_count);
+	BT_INFO("%s irk_count %u", hdev->name, irk_count);
 
 	for (i = 0; i < irk_count; i++) {
 		struct mgmt_irk_info *key = &cp->irks[i];
@@ -5101,7 +5122,7 @@ static int load_long_term_keys(struct sock *sk, struct hci_dev *hdev,
 	u16 key_count, expected_len;
 	int i, err;
 
-	BT_DBG("request for %s", hdev->name);
+	BT_INFO("request for %s", hdev->name);
 
 	if (!lmp_le_capable(hdev))
 		return mgmt_cmd_status(sk, hdev->id, MGMT_OP_LOAD_LONG_TERM_KEYS,
@@ -5123,7 +5144,7 @@ static int load_long_term_keys(struct sock *sk, struct hci_dev *hdev,
 				       MGMT_STATUS_INVALID_PARAMS);
 	}
 
-	BT_DBG("%s key_count %u", hdev->name, key_count);
+	BT_INFO("%s key_count %u", hdev->name, key_count);
 
 	for (i = 0; i < key_count; i++) {
 		struct mgmt_ltk_info *key = &cp->keys[i];
@@ -5216,7 +5237,7 @@ static void conn_info_refresh_complete(struct hci_dev *hdev, u8 hci_status,
 	u16 handle;
 	u8 status;
 
-	BT_DBG("status 0x%02x", hci_status);
+	BT_INFO("status 0x%02x", hci_status);
 
 	hci_dev_lock(hdev);
 
@@ -5270,7 +5291,7 @@ static int get_conn_info(struct sock *sk, struct hci_dev *hdev, void *data,
 	unsigned long conn_info_age;
 	int err = 0;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	memset(&rp, 0, sizeof(rp));
 	bacpy(&rp.addr.bdaddr, &cp->addr.bdaddr);
@@ -5424,7 +5445,7 @@ static void get_clock_info_complete(struct hci_dev *hdev, u8 status, u16 opcode)
 	struct mgmt_pending_cmd *cmd;
 	struct hci_conn *conn;
 
-	BT_DBG("%s status %u", hdev->name, status);
+	BT_INFO("%s status %u", hdev->name, status);
 
 	hci_dev_lock(hdev);
 
@@ -5461,7 +5482,7 @@ static int get_clock_info(struct sock *sk, struct hci_dev *hdev, void *data,
 	struct hci_conn *conn;
 	int err;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	memset(&rp, 0, sizeof(rp));
 	bacpy(&rp.addr.bdaddr, &cp->addr.bdaddr);
@@ -5582,7 +5603,7 @@ static int hci_conn_params_set(struct hci_dev *hdev, bdaddr_t *addr,
 
 	params->auto_connect = auto_connect;
 
-	BT_DBG("addr %pMR (type %u) auto_connect %u", addr, addr_type,
+	BT_INFO("addr %pMR (type %u) auto_connect %u", addr, addr_type,
 	       auto_connect);
 
 	return 0;
@@ -5607,7 +5628,7 @@ static int add_device(struct sock *sk, struct hci_dev *hdev,
 	u8 auto_conn, addr_type;
 	int err;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	if (!bdaddr_type_is_valid(cp->addr.type) ||
 	    !bacmp(&cp->addr.bdaddr, BDADDR_ANY))
@@ -5705,7 +5726,7 @@ static int remove_device(struct sock *sk, struct hci_dev *hdev,
 	struct mgmt_cp_remove_device *cp = data;
 	int err;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	hci_dev_lock(hdev);
 
@@ -5814,7 +5835,7 @@ static int remove_device(struct sock *sk, struct hci_dev *hdev,
 			kfree(p);
 		}
 
-		BT_DBG("All LE connection parameters were removed");
+		BT_INFO("All LE connection parameters were removed");
 
 		hci_update_background_scan(hdev);
 	}
@@ -5857,7 +5878,7 @@ static int load_conn_param(struct sock *sk, struct hci_dev *hdev, void *data,
 				       MGMT_STATUS_INVALID_PARAMS);
 	}
 
-	BT_DBG("%s param_count %u", hdev->name, param_count);
+	BT_INFO("%s param_count %u", hdev->name, param_count);
 
 	hci_dev_lock(hdev);
 
@@ -5869,7 +5890,7 @@ static int load_conn_param(struct sock *sk, struct hci_dev *hdev, void *data,
 		u16 min, max, latency, timeout;
 		u8 addr_type;
 
-		BT_DBG("Adding %pMR (type %u)", &param->addr.bdaddr,
+		BT_INFO("Adding %pMR (type %u)", &param->addr.bdaddr,
 		       param->addr.type);
 
 		if (param->addr.type == BDADDR_LE_PUBLIC) {
@@ -5886,7 +5907,7 @@ static int load_conn_param(struct sock *sk, struct hci_dev *hdev, void *data,
 		latency = le16_to_cpu(param->latency);
 		timeout = le16_to_cpu(param->timeout);
 
-		BT_DBG("min 0x%04x max 0x%04x latency 0x%04x timeout 0x%04x",
+		BT_INFO("min 0x%04x max 0x%04x latency 0x%04x timeout 0x%04x",
 		       min, max, latency, timeout);
 
 		if (hci_check_conn_params(min, max, latency, timeout) < 0) {
@@ -5920,7 +5941,7 @@ static int set_external_config(struct sock *sk, struct hci_dev *hdev,
 	bool changed;
 	int err;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	if (hdev_is_powered(hdev))
 		return mgmt_cmd_status(sk, hdev->id, MGMT_OP_SET_EXTERNAL_CONFIG,
@@ -5976,7 +5997,7 @@ static int set_public_address(struct sock *sk, struct hci_dev *hdev,
 	bool changed;
 	int err;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	if (hdev_is_powered(hdev))
 		return mgmt_cmd_status(sk, hdev->id, MGMT_OP_SET_PUBLIC_ADDRESS,
@@ -6031,7 +6052,7 @@ static void read_local_oob_ext_data_complete(struct hci_dev *hdev, u8 status,
 	u16 eir_len;
 	int err;
 
-	BT_DBG("%s status %u", hdev->name, status);
+	BT_INFO("%s status %u", hdev->name, status);
 
 	cmd = pending_find(MGMT_OP_READ_LOCAL_OOB_EXT_DATA, hdev);
 	if (!cmd)
@@ -6170,7 +6191,7 @@ static int read_local_oob_ext_data(struct sock *sk, struct hci_dev *hdev,
 	u8 status, flags, role, addr[7], hash[16], rand[16];
 	int err;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	if (hdev_is_powered(hdev)) {
 		switch (cp->type) {
@@ -6357,7 +6378,7 @@ static int read_adv_features(struct sock *sk, struct hci_dev *hdev,
 	u32 supported_flags;
 	u8 *instance;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	if (!lmp_le_capable(hdev))
 		return mgmt_cmd_status(sk, hdev->id, MGMT_OP_READ_ADV_FEATURES,
@@ -6503,7 +6524,7 @@ static void add_advertising_complete(struct hci_dev *hdev, u8 status,
 	struct adv_info *adv_instance, *n;
 	u8 instance;
 
-	BT_DBG("status %d", status);
+	BT_INFO("status %d", status);
 
 	hci_dev_lock(hdev);
 
@@ -6562,7 +6583,7 @@ static int add_advertising(struct sock *sk, struct hci_dev *hdev,
 	struct mgmt_pending_cmd *cmd;
 	struct hci_request req;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	status = mgmt_le_support(hdev);
 	if (status)
@@ -6696,7 +6717,7 @@ static void remove_advertising_complete(struct hci_dev *hdev, u8 status,
 	struct mgmt_cp_remove_advertising *cp;
 	struct mgmt_rp_remove_advertising rp;
 
-	BT_DBG("status %d", status);
+	BT_INFO("status %d", status);
 
 	hci_dev_lock(hdev);
 
@@ -6728,7 +6749,7 @@ static int remove_advertising(struct sock *sk, struct hci_dev *hdev,
 	struct hci_request req;
 	int err;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	hci_dev_lock(hdev);
 
@@ -6800,7 +6821,7 @@ static int get_adv_size_info(struct sock *sk, struct hci_dev *hdev,
 	u32 flags, supported_flags;
 	int err;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	if (!lmp_le_capable(hdev))
 		return mgmt_cmd_status(sk, hdev->id, MGMT_OP_GET_ADV_SIZE_INFO,
@@ -6831,6 +6852,70 @@ static int get_adv_size_info(struct sock *sk, struct hci_dev *hdev,
 	return err;
 }
 
+static int set_vnd_play(struct sock *sk, struct hci_dev *hdev,
+			     void *data, u16 data_len)
+{
+	struct mgmt_cp_set_vnd_play *cp = data;
+	struct mgmt_rp_set_vnd_play rp;
+	u32 flags;
+	int err;
+  u8 cmd_para[3] = {0x32, 0x00, 0x0};
+
+  BT_INFO("set_vnd_play %s", hdev->name);
+
+  flags = cp->flags;
+  if (flags)
+  {
+    cmd_para[2] = 0xFF;
+  }
+  err = hci_send_cmd(hdev, 0xFC57, 3, cmd_para);
+
+  rp.instance = cp->instance;
+  err = mgmt_cmd_complete(sk, hdev->id, MGMT_OP_SET_VND_PLAY,
+      MGMT_STATUS_SUCCESS, &rp, sizeof(rp));
+
+  return err;
+}
+
+static int set_vnd_opp_trans(struct sock *sk, struct hci_dev *hdev,
+			     void *data, u16 data_len)
+{
+	struct mgmt_cp_set_opp_transfer *cp = data;
+	struct mgmt_rp_set_opp_transfer rp;
+	u32 flags;
+	int err;
+  u8 cmd_para[9] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1, 0x0, 0x0};
+
+  BT_INFO("set_vnd_opp_trans %s %x:%x:%x:%x:%x:%x, %d, %d", hdev->name, cp->bdaddr.b[0], cp->bdaddr.b[1], cp->bdaddr.b[2], cp->bdaddr.b[3], cp->bdaddr.b[4], cp->bdaddr.b[5], cp->op, cp->flags);
+
+  cmd_para[0] = cp->bdaddr.b[5];
+  cmd_para[1] = cp->bdaddr.b[4];
+  cmd_para[2] = cp->bdaddr.b[3];
+  cmd_para[3] = cp->bdaddr.b[2];
+  cmd_para[4] = cp->bdaddr.b[1];
+  cmd_para[5] = cp->bdaddr.b[0];
+
+  flags = cp->op;
+  //if ((1 == flags) || (2 == flags))
+  {
+    cmd_para[6] = flags;//0x1 Opp send; 0x2 Opp recv;
+  }
+
+  flags = cp->flags;
+  if (flags)
+  {
+    cmd_para[8] = 0x1;//0x00 Profile disable; 0x01 Profile enable
+  }
+  err = hci_send_cmd(hdev, 0xFC59, 9, cmd_para);
+
+  rp.instance = cp->instance;
+  err = mgmt_cmd_complete(sk, hdev->id, MGMT_OP_SET_OPP_TRANSFER,
+      MGMT_STATUS_SUCCESS, &rp, sizeof(rp));
+
+  return err;
+}
+
+
 static const struct hci_mgmt_handler mgmt_handlers[] = {
 	{ NULL }, /* 0x0000 (no command) */
 	{ read_version,            MGMT_READ_VERSION_SIZE,
@@ -6925,6 +7010,40 @@ static const struct hci_mgmt_handler mgmt_handlers[] = {
 	{ set_appearance,	   MGMT_SET_APPEARANCE_SIZE },
 	{ get_phy_configuration,   MGMT_GET_PHY_CONFIGURATION_SIZE },
 	{ set_phy_configuration,   MGMT_SET_PHY_CONFIGURATION_SIZE },
+	{ NULL,	   MGMT_OP_SET_BLOCKED_KEYS_SIZE,
+						HCI_MGMT_VAR_LEN },
+	{ NULL,	   MGMT_SETTING_SIZE },
+	{ NULL,     MGMT_READ_CONTROLLER_CAP_SIZE,
+						HCI_MGMT_UNTRUSTED },
+	{ NULL,  MGMT_READ_EXP_FEATURES_INFO_SIZE,
+						HCI_MGMT_UNTRUSTED |
+						HCI_MGMT_HDEV_OPTIONAL },
+	{ NULL,         MGMT_SET_EXP_FEATURE_SIZE,
+						HCI_MGMT_VAR_LEN |
+						HCI_MGMT_HDEV_OPTIONAL },
+	{ NULL,  MGMT_READ_DEF_SYSTEM_CONFIG_SIZE,
+						HCI_MGMT_UNTRUSTED },
+	{ NULL,   MGMT_SET_DEF_SYSTEM_CONFIG_SIZE,
+						HCI_MGMT_VAR_LEN },
+	{ NULL, MGMT_READ_DEF_RUNTIME_CONFIG_SIZE,
+						HCI_MGMT_UNTRUSTED },
+	{ NULL,  MGMT_SET_DEF_RUNTIME_CONFIG_SIZE,
+						HCI_MGMT_VAR_LEN },
+	{ NULL,        MGMT_GET_DEVICE_FLAGS_SIZE },
+	{ NULL,        MGMT_SET_DEVICE_FLAGS_SIZE },
+	{ NULL,   MGMT_READ_ADV_MONITOR_FEATURES_SIZE },
+	{ NULL,MGMT_ADD_ADV_PATTERNS_MONITOR_SIZE,
+						HCI_MGMT_VAR_LEN },
+	{ NULL,      MGMT_REMOVE_ADV_MONITOR_SIZE },
+	{ NULL,      MGMT_ADD_EXT_ADV_PARAMS_MIN_SIZE,
+						HCI_MGMT_VAR_LEN },
+	{ NULL,        MGMT_ADD_EXT_ADV_DATA_SIZE,
+						HCI_MGMT_VAR_LEN },
+	{ NULL,
+				   MGMT_ADD_ADV_PATTERNS_MONITOR_RSSI_SIZE,
+						HCI_MGMT_VAR_LEN },
+  { set_vnd_opp_trans,       MGMT_OP_SET_OPP_TRANSFER_SIZE },
+  { set_vnd_play,            MGMT_OP_SET_VND_PLAY_SIZE },
 };
 
 void mgmt_index_added(struct hci_dev *hdev)
@@ -7023,7 +7142,7 @@ void mgmt_power_on(struct hci_dev *hdev, int err)
 {
 	struct cmd_lookup match = { NULL, hdev };
 
-	BT_DBG("err %d", err);
+	BT_INFO("err %d", err);
 
 	hci_dev_lock(hdev);
 
@@ -7442,7 +7561,7 @@ int mgmt_user_confirm_request(struct hci_dev *hdev, bdaddr_t *bdaddr,
 {
 	struct mgmt_ev_user_confirm_request ev;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	bacpy(&ev.addr.bdaddr, bdaddr);
 	ev.addr.type = link_to_bdaddr(link_type, addr_type);
@@ -7458,7 +7577,7 @@ int mgmt_user_passkey_request(struct hci_dev *hdev, bdaddr_t *bdaddr,
 {
 	struct mgmt_ev_user_passkey_request ev;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	bacpy(&ev.addr.bdaddr, bdaddr);
 	ev.addr.type = link_to_bdaddr(link_type, addr_type);
@@ -7519,7 +7638,7 @@ int mgmt_user_passkey_notify(struct hci_dev *hdev, bdaddr_t *bdaddr,
 {
 	struct mgmt_ev_passkey_notify ev;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	bacpy(&ev.addr.bdaddr, bdaddr);
 	ev.addr.type = link_to_bdaddr(link_type, addr_type);
@@ -7938,7 +8057,7 @@ void mgmt_discovering(struct hci_dev *hdev, u8 discovering)
 {
 	struct mgmt_ev_discovering ev;
 
-	BT_DBG("%s discovering %u", hdev->name, discovering);
+	BT_INFO("%s discovering %u", hdev->name, discovering);
 
 	memset(&ev, 0, sizeof(ev));
 	ev.type = hdev->discovery.type;
diff --git a/net/bluetooth/mgmt_util.c b/net/bluetooth/mgmt_util.c
index 0d0a6d77b9e8..60931a5f9c66 100644
--- a/net/bluetooth/mgmt_util.c
+++ b/net/bluetooth/mgmt_util.c
@@ -97,7 +97,7 @@ int mgmt_cmd_status(struct sock *sk, u16 index, u16 cmd, u8 status)
 	struct mgmt_ev_cmd_status *ev;
 	int err;
 
-	BT_DBG("sock %p, index %u, cmd %u, status %u", sk, index, cmd, status);
+	BT_INFO("sock %p, index %u, cmd %u, status %u", sk, index, cmd, status);
 
 	skb = alloc_skb(sizeof(*hdr) + sizeof(*ev), GFP_KERNEL);
 	if (!skb)
@@ -141,7 +141,7 @@ int mgmt_cmd_complete(struct sock *sk, u16 index, u16 cmd, u8 status,
 	struct mgmt_ev_cmd_complete *ev;
 	int err;
 
-	BT_DBG("sock %p", sk);
+	BT_INFO("sock %p", sk);
 
 	skb = alloc_skb(sizeof(*hdr) + sizeof(*ev) + rp_len, GFP_KERNEL);
 	if (!skb)
diff --git a/net/bluetooth/sco.c b/net/bluetooth/sco.c
index 2c616c1c6295..0d9dddbfbecd 100644
--- a/net/bluetooth/sco.c
+++ b/net/bluetooth/sco.c
@@ -90,7 +90,7 @@ static void sco_sock_timeout(struct work_struct *work)
 	if (!sk)
 		return;
 
-	BT_DBG("sock %p state %d", sk, sk->sk_state);
+	BT_INFO("sock %p state %d", sk, sk->sk_state);
 
 	bh_lock_sock(sk);
 	sk->sk_err = ETIMEDOUT;
@@ -105,7 +105,7 @@ static void sco_sock_set_timer(struct sock *sk, long timeout)
 	if (!sco_pi(sk)->conn)
 		return;
 
-	BT_DBG("sock %p state %d timeout %ld", sk, sk->sk_state, timeout);
+	BT_INFO("sock %p state %d timeout %ld", sk, sk->sk_state, timeout);
 	cancel_delayed_work(&sco_pi(sk)->conn->timeout_work);
 	schedule_delayed_work(&sco_pi(sk)->conn->timeout_work, timeout);
 }
@@ -115,7 +115,7 @@ static void sco_sock_clear_timer(struct sock *sk)
 	if (!sco_pi(sk)->conn)
 		return;
 
-	BT_DBG("sock %p state %d", sk, sk->sk_state);
+	BT_INFO("sock %p state %d", sk, sk->sk_state);
 	cancel_delayed_work(&sco_pi(sk)->conn->timeout_work);
 }
 
@@ -143,7 +143,7 @@ static struct sco_conn *sco_conn_add(struct hci_conn *hcon)
 	else
 		conn->mtu = 60;
 
-	BT_DBG("hcon %p conn %p", hcon, conn);
+	BT_INFO("hcon %p conn %p", hcon, conn);
 
 	return conn;
 }
@@ -156,7 +156,7 @@ static void sco_chan_del(struct sock *sk, int err)
 
 	conn = sco_pi(sk)->conn;
 
-	BT_DBG("sk %p, conn %p, err %d", sk, conn, err);
+	BT_INFO("sk %p, conn %p, err %d", sk, conn, err);
 
 	if (conn) {
 		sco_conn_lock(conn);
@@ -183,7 +183,7 @@ static void sco_conn_del(struct hci_conn *hcon, int err)
 	if (!conn)
 		return;
 
-	BT_DBG("hcon %p conn %p, err %d", hcon, conn, err);
+	BT_INFO("hcon %p conn %p, err %d", hcon, conn, err);
 
 	/* Kill socket */
 	sco_conn_lock(conn);
@@ -209,7 +209,7 @@ static void sco_conn_del(struct hci_conn *hcon, int err)
 static void __sco_chan_add(struct sco_conn *conn, struct sock *sk,
 			   struct sock *parent)
 {
-	BT_DBG("conn %p", conn);
+	BT_INFO("conn %p", conn);
 
 	sco_pi(sk)->conn = conn;
 	conn->sk = sk;
@@ -239,7 +239,7 @@ static int sco_connect(struct hci_dev *hdev, struct sock *sk)
 	struct hci_conn *hcon;
 	int err, type;
 
-	BT_DBG("%pMR -> %pMR", &sco_pi(sk)->src, &sco_pi(sk)->dst);
+	BT_INFO("%pMR -> %pMR", &sco_pi(sk)->src, &sco_pi(sk)->dst);
 
 	if (lmp_esco_capable(hdev) && !disable_esco)
 		type = ESCO_LINK;
@@ -290,7 +290,7 @@ static int sco_send_frame(struct sock *sk, void *buf, int len,
 	if (len > conn->mtu)
 		return -EINVAL;
 
-	BT_DBG("sk %p len %d", sk, len);
+	BT_INFO("sk %p len %d", sk, len);
 
 	skb = bt_skb_send_alloc(sk, len, msg_flags & MSG_DONTWAIT, &err);
 	if (!skb)
@@ -313,7 +313,7 @@ static void sco_recv_frame(struct sco_conn *conn, struct sk_buff *skb)
 	if (!sk)
 		goto drop;
 
-	BT_DBG("sk %p len %d", sk, skb->len);
+	BT_INFO("sk %p len %d", sk, skb->len);
 
 	if (sk->sk_state != BT_CONNECTED)
 		goto drop;
@@ -370,7 +370,7 @@ static struct sock *sco_get_sock_listen(bdaddr_t *src)
 
 static void sco_sock_destruct(struct sock *sk)
 {
-	BT_DBG("sk %p", sk);
+	BT_INFO("sk %p", sk);
 
 	skb_queue_purge(&sk->sk_receive_queue);
 	skb_queue_purge(&sk->sk_write_queue);
@@ -380,7 +380,7 @@ static void sco_sock_cleanup_listen(struct sock *parent)
 {
 	struct sock *sk;
 
-	BT_DBG("parent %p", parent);
+	BT_INFO("parent %p", parent);
 
 	/* Close not yet accepted channels */
 	while ((sk = bt_accept_dequeue(parent, NULL))) {
@@ -400,7 +400,7 @@ static void sco_sock_kill(struct sock *sk)
 	if (!sock_flag(sk, SOCK_ZAPPED) || sk->sk_socket)
 		return;
 
-	BT_DBG("sk %p state %d", sk, sk->sk_state);
+	BT_INFO("sk %p state %d", sk, sk->sk_state);
 
 	/* Kill poor orphan */
 	bt_sock_unlink(&sco_sk_list, sk);
@@ -410,7 +410,7 @@ static void sco_sock_kill(struct sock *sk)
 
 static void __sco_sock_close(struct sock *sk)
 {
-	BT_DBG("sk %p state %d socket %p", sk, sk->sk_state, sk->sk_socket);
+	BT_INFO("sk %p state %d socket %p", sk, sk->sk_state, sk->sk_socket);
 
 	switch (sk->sk_state) {
 	case BT_LISTEN:
@@ -453,7 +453,7 @@ static void sco_sock_close(struct sock *sk)
 
 static void sco_sock_init(struct sock *sk, struct sock *parent)
 {
-	BT_DBG("sk %p", sk);
+	BT_INFO("sk %p", sk);
 
 	if (parent) {
 		sk->sk_type = parent->sk_type;
@@ -499,7 +499,7 @@ static int sco_sock_create(struct net *net, struct socket *sock, int protocol,
 {
 	struct sock *sk;
 
-	BT_DBG("sock %p", sock);
+	BT_INFO("sock %p", sock);
 
 	sock->state = SS_UNCONNECTED;
 
@@ -527,7 +527,7 @@ static int sco_sock_bind(struct socket *sock, struct sockaddr *addr,
 	    addr->sa_family != AF_BLUETOOTH)
 		return -EINVAL;
 
-	BT_DBG("sk %p %pMR", sk, &sa->sco_bdaddr);
+	BT_INFO("sk %p %pMR", sk, &sa->sco_bdaddr);
 
 	lock_sock(sk);
 
@@ -557,7 +557,7 @@ static int sco_sock_connect(struct socket *sock, struct sockaddr *addr, int alen
 	struct hci_dev  *hdev;
 	int err;
 
-	BT_DBG("sk %p", sk);
+	BT_INFO("sk %p", sk);
 
 	if (alen < sizeof(struct sockaddr_sco) ||
 	    addr->sa_family != AF_BLUETOOTH)
@@ -599,7 +599,7 @@ static int sco_sock_listen(struct socket *sock, int backlog)
 	bdaddr_t *src = &sco_pi(sk)->src;
 	int err = 0;
 
-	BT_DBG("sk %p backlog %d", sk, backlog);
+	BT_INFO("sk %p backlog %d", sk, backlog);
 
 	lock_sock(sk);
 
@@ -645,7 +645,7 @@ static int sco_sock_accept(struct socket *sock, struct socket *newsock,
 
 	timeo = sock_rcvtimeo(sk, flags & O_NONBLOCK);
 
-	BT_DBG("sk %p timeo %ld", sk, timeo);
+	BT_INFO("sk %p timeo %ld", sk, timeo);
 
 	/* Wait for an incoming connection. (wake-one). */
 	add_wait_queue_exclusive(sk_sleep(sk), &wait);
@@ -681,7 +681,7 @@ static int sco_sock_accept(struct socket *sock, struct socket *newsock,
 
 	newsock->state = SS_CONNECTED;
 
-	BT_DBG("new socket %p", ch);
+	BT_INFO("new socket %p", ch);
 
 done:
 	release_sock(sk);
@@ -694,7 +694,7 @@ static int sco_sock_getname(struct socket *sock, struct sockaddr *addr,
 	struct sockaddr_sco *sa = (struct sockaddr_sco *) addr;
 	struct sock *sk = sock->sk;
 
-	BT_DBG("sock %p, sk %p", sock, sk);
+	BT_INFO("sock %p, sk %p", sock, sk);
 
 	addr->sa_family = AF_BLUETOOTH;
 
@@ -713,7 +713,7 @@ static int sco_sock_sendmsg(struct socket *sock, struct msghdr *msg,
 	void *buf;
 	int err;
 
-	BT_DBG("sock %p, sk %p", sock, sk);
+	BT_INFO("sock %p, sk %p", sock, sk);
 
 	err = sock_error(sk);
 	if (err)
@@ -747,7 +747,7 @@ static void sco_conn_defer_accept(struct hci_conn *conn, u16 setting)
 {
 	struct hci_dev *hdev = conn->hdev;
 
-	BT_DBG("conn %p", conn);
+	BT_INFO("conn %p", conn);
 
 	conn->state = BT_CONFIG;
 
@@ -822,7 +822,7 @@ static int sco_sock_setsockopt(struct socket *sock, int level, int optname,
 	struct bt_voice voice;
 	u32 opt;
 
-	BT_DBG("sk %p", sk);
+	BT_INFO("sk %p", sk);
 
 	lock_sock(sk);
 
@@ -887,7 +887,7 @@ static int sco_sock_getsockopt_old(struct socket *sock, int optname,
 	struct sco_conninfo cinfo;
 	int len, err = 0;
 
-	BT_DBG("sk %p", sk);
+	BT_INFO("sk %p", sk);
 
 	if (get_user(len, optlen))
 		return -EFAULT;
@@ -905,7 +905,7 @@ static int sco_sock_getsockopt_old(struct socket *sock, int optname,
 
 		opts.mtu = sco_pi(sk)->conn->mtu;
 
-		BT_DBG("mtu %d", opts.mtu);
+		BT_INFO("mtu %d", opts.mtu);
 
 		len = min_t(unsigned int, len, sizeof(opts));
 		if (copy_to_user(optval, (char *)&opts, len))
@@ -947,7 +947,7 @@ static int sco_sock_getsockopt(struct socket *sock, int level, int optname,
 	int len, err = 0;
 	struct bt_voice voice;
 
-	BT_DBG("sk %p", sk);
+	BT_INFO("sk %p", sk);
 
 	if (level == SOL_SCO)
 		return sco_sock_getsockopt_old(sock, optname, optval, optlen);
@@ -994,7 +994,7 @@ static int sco_sock_shutdown(struct socket *sock, int how)
 	struct sock *sk = sock->sk;
 	int err = 0;
 
-	BT_DBG("sock %p, sk %p", sock, sk);
+	BT_INFO("sock %p, sk %p", sock, sk);
 
 	if (!sk)
 		return 0;
@@ -1024,7 +1024,7 @@ static int sco_sock_release(struct socket *sock)
 	struct sock *sk = sock->sk;
 	int err = 0;
 
-	BT_DBG("sock %p, sk %p", sock, sk);
+	BT_INFO("sock %p, sk %p", sock, sk);
 
 	if (!sk)
 		return 0;
@@ -1048,7 +1048,7 @@ static void sco_conn_ready(struct sco_conn *conn)
 	struct sock *parent;
 	struct sock *sk = conn->sk;
 
-	BT_DBG("conn %p", conn);
+	BT_INFO("conn %p", conn);
 
 	if (sk) {
 		sco_sock_clear_timer(sk);
@@ -1108,7 +1108,7 @@ int sco_connect_ind(struct hci_dev *hdev, bdaddr_t *bdaddr, __u8 *flags)
 	struct sock *sk;
 	int lm = 0;
 
-	BT_DBG("hdev %s, bdaddr %pMR", hdev->name, bdaddr);
+	BT_INFO("hdev %s, bdaddr %pMR", hdev->name, bdaddr);
 
 	/* Find listening sockets */
 	read_lock(&sco_sk_list.lock);
@@ -1135,7 +1135,7 @@ static void sco_connect_cfm(struct hci_conn *hcon, __u8 status)
 	if (hcon->type != SCO_LINK && hcon->type != ESCO_LINK)
 		return;
 
-	BT_DBG("hcon %p bdaddr %pMR status %d", hcon, &hcon->dst, status);
+	BT_INFO("hcon %p bdaddr %pMR status %d", hcon, &hcon->dst, status);
 
 	if (!status) {
 		struct sco_conn *conn;
@@ -1152,7 +1152,7 @@ static void sco_disconn_cfm(struct hci_conn *hcon, __u8 reason)
 	if (hcon->type != SCO_LINK && hcon->type != ESCO_LINK)
 		return;
 
-	BT_DBG("hcon %p reason %d", hcon, reason);
+	BT_INFO("hcon %p reason %d", hcon, reason);
 
 	sco_conn_del(hcon, bt_to_errno(reason));
 }
@@ -1164,7 +1164,7 @@ void sco_recv_scodata(struct hci_conn *hcon, struct sk_buff *skb)
 	if (!conn)
 		goto drop;
 
-	BT_DBG("conn %p len %d", conn, skb->len);
+	BT_INFO("conn %p len %d", conn, skb->len);
 
 	if (skb->len) {
 		sco_recv_frame(conn, skb);
diff --git a/net/bluetooth/smp.c b/net/bluetooth/smp.c
index 4d5ba9778885..b3f6dfb9436b 100644
--- a/net/bluetooth/smp.c
+++ b/net/bluetooth/smp.c
@@ -187,8 +187,8 @@ static int aes_cmac(struct crypto_shash *tfm, const u8 k[16], const u8 *m,
 	swap_buf(k, tmp, 16);
 	swap_buf(m, msg_msb, len);
 
-	SMP_DBG("msg (len %zu) %*phN", len, (int) len, m);
-	SMP_DBG("key %16phN", k);
+	BT_INFO("msg (len %zu) %*phN", len, (int) len, m);
+	BT_INFO("key %16phN", k);
 
 	err = crypto_shash_setkey(tfm, tmp, 16);
 	if (err) {
@@ -205,7 +205,7 @@ static int aes_cmac(struct crypto_shash *tfm, const u8 k[16], const u8 *m,
 
 	swap_buf(mac_msb, mac, 16);
 
-	SMP_DBG("mac %16phN", mac);
+	BT_INFO("mac %16phN", mac);
 
 	return 0;
 }
@@ -216,9 +216,9 @@ static int smp_f4(struct crypto_shash *tfm_cmac, const u8 u[32],
 	u8 m[65];
 	int err;
 
-	SMP_DBG("u %32phN", u);
-	SMP_DBG("v %32phN", v);
-	SMP_DBG("x %16phN z %02x", x, z);
+	BT_INFO("u %32phN", u);
+	BT_INFO("v %32phN", v);
+	BT_INFO("x %16phN z %02x", x, z);
 
 	m[0] = z;
 	memcpy(m + 1, v, 32);
@@ -228,7 +228,7 @@ static int smp_f4(struct crypto_shash *tfm_cmac, const u8 u[32],
 	if (err)
 		return err;
 
-	SMP_DBG("res %16phN", res);
+	BT_INFO("res %16phN", res);
 
 	return err;
 }
@@ -250,15 +250,15 @@ static int smp_f5(struct crypto_shash *tfm_cmac, const u8 w[32],
 	u8 m[53], t[16];
 	int err;
 
-	SMP_DBG("w %32phN", w);
-	SMP_DBG("n1 %16phN n2 %16phN", n1, n2);
-	SMP_DBG("a1 %7phN a2 %7phN", a1, a2);
+	BT_INFO("w %32phN", w);
+	BT_INFO("n1 %16phN n2 %16phN", n1, n2);
+	BT_INFO("a1 %7phN a2 %7phN", a1, a2);
 
 	err = aes_cmac(tfm_cmac, salt, w, 32, t);
 	if (err)
 		return err;
 
-	SMP_DBG("t %16phN", t);
+	BT_INFO("t %16phN", t);
 
 	memcpy(m, length, 2);
 	memcpy(m + 2, a2, 7);
@@ -273,7 +273,7 @@ static int smp_f5(struct crypto_shash *tfm_cmac, const u8 w[32],
 	if (err)
 		return err;
 
-	SMP_DBG("mackey %16phN", mackey);
+	BT_INFO("mackey %16phN", mackey);
 
 	m[52] = 1; /* Counter */
 
@@ -281,7 +281,7 @@ static int smp_f5(struct crypto_shash *tfm_cmac, const u8 w[32],
 	if (err)
 		return err;
 
-	SMP_DBG("ltk %16phN", ltk);
+	BT_INFO("ltk %16phN", ltk);
 
 	return 0;
 }
@@ -294,9 +294,9 @@ static int smp_f6(struct crypto_shash *tfm_cmac, const u8 w[16],
 	u8 m[65];
 	int err;
 
-	SMP_DBG("w %16phN", w);
-	SMP_DBG("n1 %16phN n2 %16phN", n1, n2);
-	SMP_DBG("r %16phN io_cap %3phN a1 %7phN a2 %7phN", r, io_cap, a1, a2);
+	BT_INFO("w %16phN", w);
+	BT_INFO("n1 %16phN n2 %16phN", n1, n2);
+	BT_INFO("r %16phN io_cap %3phN a1 %7phN a2 %7phN", r, io_cap, a1, a2);
 
 	memcpy(m, a2, 7);
 	memcpy(m + 7, a1, 7);
@@ -309,7 +309,7 @@ static int smp_f6(struct crypto_shash *tfm_cmac, const u8 w[16],
 	if (err)
 		return err;
 
-	SMP_DBG("res %16phN", res);
+	BT_INFO("res %16phN", res);
 
 	return err;
 }
@@ -320,9 +320,9 @@ static int smp_g2(struct crypto_shash *tfm_cmac, const u8 u[32], const u8 v[32],
 	u8 m[80], tmp[16];
 	int err;
 
-	SMP_DBG("u %32phN", u);
-	SMP_DBG("v %32phN", v);
-	SMP_DBG("x %16phN y %16phN", x, y);
+	BT_INFO("u %32phN", u);
+	BT_INFO("v %32phN", v);
+	BT_INFO("x %16phN y %16phN", x, y);
 
 	memcpy(m, y, 16);
 	memcpy(m + 16, v, 32);
@@ -335,7 +335,7 @@ static int smp_g2(struct crypto_shash *tfm_cmac, const u8 u[32], const u8 v[32],
 	*val = get_unaligned_le32(tmp);
 	*val %= 1000000;
 
-	SMP_DBG("val %06u", *val);
+	BT_INFO("val %06u", *val);
 
 	return 0;
 }
@@ -345,13 +345,13 @@ static int smp_h6(struct crypto_shash *tfm_cmac, const u8 w[16],
 {
 	int err;
 
-	SMP_DBG("w %16phN key_id %4phN", w, key_id);
+	BT_INFO("w %16phN key_id %4phN", w, key_id);
 
 	err = aes_cmac(tfm_cmac, w, key_id, 4, res);
 	if (err)
 		return err;
 
-	SMP_DBG("res %16phN", res);
+	BT_INFO("res %16phN", res);
 
 	return err;
 }
@@ -361,13 +361,13 @@ static int smp_h7(struct crypto_shash *tfm_cmac, const u8 w[16],
 {
 	int err;
 
-	SMP_DBG("w %16phN salt %16phN", w, salt);
+	BT_INFO("w %16phN salt %16phN", w, salt);
 
 	err = aes_cmac(tfm_cmac, salt, w, 16, res);
 	if (err)
 		return err;
 
-	SMP_DBG("res %16phN", res);
+	BT_INFO("res %16phN", res);
 
 	return err;
 }
@@ -382,7 +382,7 @@ static int smp_e(const u8 *k, u8 *r)
 	uint8_t tmp[16], data[16];
 	int err;
 
-	SMP_DBG("k %16phN r %16phN", k, r);
+	BT_INFO("k %16phN r %16phN", k, r);
 
 	/* The most significant octet of key corresponds to k[0] */
 	swap_buf(k, tmp, 16);
@@ -401,7 +401,7 @@ static int smp_e(const u8 *k, u8 *r)
 	/* Most significant octet of encryptedData corresponds to data[0] */
 	swap_buf(data, r, 16);
 
-	SMP_DBG("r %16phN", r);
+	BT_INFO("r %16phN", r);
 
 	memzero_explicit(&ctx, sizeof (ctx));
 	return err;
@@ -414,9 +414,9 @@ static int smp_c1(const u8 k[16],
 	u8 p1[16], p2[16];
 	int err;
 
-	SMP_DBG("k %16phN r %16phN", k, r);
-	SMP_DBG("iat %u ia %6phN rat %u ra %6phN", _iat, ia, _rat, ra);
-	SMP_DBG("preq %7phN pres %7phN", preq, pres);
+	BT_INFO("k %16phN r %16phN", k, r);
+	BT_INFO("iat %u ia %6phN rat %u ra %6phN", _iat, ia, _rat, ra);
+	BT_INFO("preq %7phN pres %7phN", preq, pres);
 
 	memset(p1, 0, 16);
 
@@ -426,7 +426,7 @@ static int smp_c1(const u8 k[16],
 	memcpy(p1 + 2, preq, 7);
 	memcpy(p1 + 9, pres, 7);
 
-	SMP_DBG("p1 %16phN", p1);
+	BT_INFO("p1 %16phN", p1);
 
 	/* res = r XOR p1 */
 	u128_xor((u128 *) res, (u128 *) r, (u128 *) p1);
@@ -443,7 +443,7 @@ static int smp_c1(const u8 k[16],
 	memcpy(p2 + 6, ia, 6);
 	memset(p2 + 12, 0, 4);
 
-	SMP_DBG("p2 %16phN", p2);
+	BT_INFO("p2 %16phN", p2);
 
 	/* res = res XOR p2 */
 	u128_xor((u128 *) res, (u128 *) res, (u128 *) p2);
@@ -511,7 +511,7 @@ bool smp_irk_matches(struct hci_dev *hdev, const u8 irk[16],
 
 	smp = chan->data;
 
-	BT_DBG("RPA %pMR IRK %*phN", bdaddr, 16, irk);
+	BT_INFO("RPA %pMR IRK %*phN", bdaddr, 16, irk);
 
 	err = smp_ah(irk, &bdaddr->b[3], hash);
 	if (err)
@@ -540,7 +540,7 @@ int smp_generate_rpa(struct hci_dev *hdev, const u8 irk[16], bdaddr_t *rpa)
 	if (err < 0)
 		return err;
 
-	BT_DBG("RPA %pMR", rpa);
+	BT_INFO("RPA %pMR", rpa);
 
 	return 0;
 }
@@ -557,7 +557,7 @@ int smp_generate_oob(struct hci_dev *hdev, u8 hash[16], u8 rand[16])
 	smp = chan->data;
 
 	if (hci_dev_test_flag(hdev, HCI_USE_DEBUG_KEYS)) {
-		BT_DBG("Using debug keys");
+		BT_INFO("Using debug keys");
 		err = set_ecdh_privkey(smp->tfm_ecdh, debug_sk);
 		if (err)
 			return err;
@@ -579,8 +579,8 @@ int smp_generate_oob(struct hci_dev *hdev, u8 hash[16], u8 rand[16])
 		smp->debug_key = false;
 	}
 
-	SMP_DBG("OOB Public Key X: %32phN", smp->local_pk);
-	SMP_DBG("OOB Public Key Y: %32phN", smp->local_pk + 32);
+	BT_INFO("OOB Public Key X: %32phN", smp->local_pk);
+	BT_INFO("OOB Public Key Y: %32phN", smp->local_pk + 32);
 
 	get_random_bytes(smp->local_rand, 16);
 
@@ -606,7 +606,7 @@ static void smp_send_cmd(struct l2cap_conn *conn, u8 code, u16 len, void *data)
 	if (!chan)
 		return;
 
-	BT_DBG("code 0x%2.2x", code);
+	BT_INFO("code 0x%2.2x", code);
 
 	iv[0].iov_base = &code;
 	iv[0].iov_len = 1;
@@ -700,8 +700,8 @@ static void build_pairing_cmd(struct l2cap_conn *conn,
 			oob_flag = SMP_OOB_PRESENT;
 			memcpy(smp->rr, oob_data->rand256, 16);
 			memcpy(smp->pcnf, oob_data->hash256, 16);
-			SMP_DBG("OOB Remote Confirmation: %16phN", smp->pcnf);
-			SMP_DBG("OOB Remote Random: %16phN", smp->rr);
+			BT_INFO("OOB Remote Confirmation: %16phN", smp->pcnf);
+			BT_INFO("OOB Remote Random: %16phN", smp->rr);
 		}
 
 	} else {
@@ -866,7 +866,7 @@ static int tk_request(struct l2cap_conn *conn, u8 remote_oob, u8 auth,
 	memset(smp->tk, 0, sizeof(smp->tk));
 	clear_bit(SMP_FLAG_TK_VALID, &smp->flags);
 
-	BT_DBG("tk_request: auth:%d lcl:%d rem:%d", auth, local_io, remote_io);
+	BT_INFO("tk_request: auth:%d lcl:%d rem:%d", auth, local_io, remote_io);
 
 	/* If neither side wants MITM, either "just" confirm an incoming
 	 * request or use just-works for outgoing ones. The JUST_CFM
@@ -924,7 +924,7 @@ static int tk_request(struct l2cap_conn *conn, u8 remote_oob, u8 auth,
 		get_random_bytes(&passkey, sizeof(passkey));
 		passkey %= 1000000;
 		put_unaligned_le32(passkey, smp->tk);
-		BT_DBG("PassKey: %d", passkey);
+		BT_INFO("PassKey: %d", passkey);
 		set_bit(SMP_FLAG_TK_VALID, &smp->flags);
 	}
 
@@ -949,7 +949,7 @@ static u8 smp_confirm(struct smp_chan *smp)
 	struct smp_cmd_pairing_confirm cp;
 	int ret;
 
-	BT_DBG("conn %p", conn);
+	BT_INFO("conn %p", conn);
 
 	ret = smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
 		     conn->hcon->init_addr_type, &conn->hcon->init_addr,
@@ -977,7 +977,7 @@ static u8 smp_random(struct smp_chan *smp)
 	u8 confirm[16];
 	int ret;
 
-	BT_DBG("conn %p %s", conn, conn->hcon->out ? "master" : "slave");
+	BT_INFO("conn %p %s", conn, conn->hcon->out ? "master" : "slave");
 
 	ret = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
 		     hcon->init_addr_type, &hcon->init_addr,
@@ -1236,7 +1236,7 @@ static void smp_distribute_keys(struct smp_chan *smp)
 	struct hci_dev *hdev = hcon->hdev;
 	__u8 *keydist;
 
-	BT_DBG("conn %p", conn);
+	BT_INFO("conn %p", conn);
 
 	rsp = (void *) &smp->prsp[1];
 
@@ -1266,7 +1266,7 @@ static void smp_distribute_keys(struct smp_chan *smp)
 		*keydist &= ~SMP_SC_NO_DIST;
 	}
 
-	BT_DBG("keydist 0x%x", *keydist);
+	BT_INFO("keydist 0x%x", *keydist);
 
 	if (*keydist & SMP_DIST_ENC_KEY) {
 		struct smp_cmd_encrypt_info enc;
@@ -1366,7 +1366,7 @@ static void smp_timeout(struct work_struct *work)
 					    security_timer.work);
 	struct l2cap_conn *conn = smp->conn;
 
-	BT_DBG("conn %p", conn);
+	BT_INFO("conn %p", conn);
 
 	hci_disconnect(conn->hcon, HCI_ERROR_REMOTE_USER_TERM);
 }
@@ -1564,7 +1564,7 @@ static u8 sc_passkey_round(struct smp_chan *smp, u8 smp_op)
 		if (!hcon->out)
 			return 0;
 
-		BT_DBG("%s Starting passkey round %u", hdev->name,
+		BT_INFO("%s Starting passkey round %u", hdev->name,
 		       smp->passkey_round + 1);
 
 		SMP_ALLOW_CMD(smp, SMP_CMD_PAIRING_CONFIRM);
@@ -1625,7 +1625,7 @@ int smp_user_confirm_reply(struct hci_conn *hcon, u16 mgmt_op, __le32 passkey)
 	u32 value;
 	int err;
 
-	BT_DBG("");
+	BT_INFO("");
 
 	if (!conn)
 		return -ENOTCONN;
@@ -1651,7 +1651,7 @@ int smp_user_confirm_reply(struct hci_conn *hcon, u16 mgmt_op, __le32 passkey)
 	case MGMT_OP_USER_PASSKEY_REPLY:
 		value = le32_to_cpu(passkey);
 		memset(smp->tk, 0, sizeof(smp->tk));
-		BT_DBG("PassKey: %d", value);
+		BT_INFO("PassKey: %d", value);
 		put_unaligned_le32(value, smp->tk);
 		/* Fall Through */
 	case MGMT_OP_USER_CONFIRM_REPLY:
@@ -1733,7 +1733,7 @@ static u8 smp_cmd_pairing_req(struct l2cap_conn *conn, struct sk_buff *skb)
 	u8 key_size, auth, sec_level;
 	int ret;
 
-	BT_DBG("conn %p", conn);
+	BT_INFO("conn %p", conn);
 
 	if (skb->len < sizeof(*req))
 		return SMP_INVALID_PARAMS;
@@ -1866,7 +1866,7 @@ static u8 sc_send_public_key(struct smp_chan *smp)
 {
 	struct hci_dev *hdev = smp->conn->hcon->hdev;
 
-	BT_DBG("");
+	BT_INFO("");
 
 	if (test_bit(SMP_FLAG_LOCAL_OOB, &smp->flags)) {
 		struct l2cap_chan *chan = hdev->smp_data;
@@ -1887,7 +1887,7 @@ static u8 sc_send_public_key(struct smp_chan *smp)
 	}
 
 	if (hci_dev_test_flag(hdev, HCI_USE_DEBUG_KEYS)) {
-		BT_DBG("Using debug keys");
+		BT_INFO("Using debug keys");
 		if (set_ecdh_privkey(smp->tfm_ecdh, debug_sk))
 			return SMP_UNSPECIFIED;
 		memcpy(smp->local_pk, debug_pk, 64);
@@ -1907,8 +1907,8 @@ static u8 sc_send_public_key(struct smp_chan *smp)
 	}
 
 done:
-	SMP_DBG("Local Public Key X: %32phN", smp->local_pk);
-	SMP_DBG("Local Public Key Y: %32phN", smp->local_pk + 32);
+	BT_INFO("Local Public Key X: %32phN", smp->local_pk);
+	BT_INFO("Local Public Key Y: %32phN", smp->local_pk + 32);
 
 	smp_send_cmd(smp->conn, SMP_CMD_PUBLIC_KEY, 64, smp->local_pk);
 
@@ -1924,7 +1924,7 @@ static u8 smp_cmd_pairing_rsp(struct l2cap_conn *conn, struct sk_buff *skb)
 	u8 key_size, auth;
 	int ret;
 
-	BT_DBG("conn %p", conn);
+	BT_INFO("conn %p", conn);
 
 	if (skb->len < sizeof(*rsp))
 		return SMP_INVALID_PARAMS;
@@ -2019,7 +2019,7 @@ static u8 sc_check_confirm(struct smp_chan *smp)
 {
 	struct l2cap_conn *conn = smp->conn;
 
-	BT_DBG("");
+	BT_INFO("");
 
 	if (smp->method == REQ_PASSKEY || smp->method == DSP_PASSKEY)
 		return sc_passkey_round(smp, SMP_CMD_PAIRING_CONFIRM);
@@ -2079,7 +2079,7 @@ static u8 smp_cmd_pairing_confirm(struct l2cap_conn *conn, struct sk_buff *skb)
 	struct l2cap_chan *chan = conn->smp;
 	struct smp_chan *smp = chan->data;
 
-	BT_DBG("conn %p %s", conn, conn->hcon->out ? "master" : "slave");
+	BT_INFO("conn %p %s", conn, conn->hcon->out ? "master" : "slave");
 
 	if (skb->len < sizeof(smp->pcnf))
 		return SMP_INVALID_PARAMS;
@@ -2125,7 +2125,7 @@ static u8 smp_cmd_pairing_random(struct l2cap_conn *conn, struct sk_buff *skb)
 	u32 passkey;
 	int err;
 
-	BT_DBG("conn %p", conn);
+	BT_INFO("conn %p", conn);
 
 	if (skb->len < sizeof(smp->rrnd))
 		return SMP_INVALID_PARAMS;
@@ -2260,7 +2260,7 @@ static u8 smp_cmd_security_req(struct l2cap_conn *conn, struct sk_buff *skb)
 	struct smp_chan *smp;
 	u8 sec_level, auth;
 
-	BT_DBG("conn %p", conn);
+	BT_INFO("conn %p", conn);
 
 	if (skb->len < sizeof(*rp))
 		return SMP_INVALID_PARAMS;
@@ -2323,7 +2323,7 @@ int smp_conn_security(struct hci_conn *hcon, __u8 sec_level)
 	__u8 authreq;
 	int ret;
 
-	BT_DBG("conn %p hcon %p level 0x%2.2x", conn, hcon, sec_level);
+	BT_INFO("conn %p hcon %p level 0x%2.2x", conn, hcon, sec_level);
 
 	/* This may be NULL if there's an unexpected disconnection */
 	if (!conn)
@@ -2454,7 +2454,7 @@ static int smp_cmd_encrypt_info(struct l2cap_conn *conn, struct sk_buff *skb)
 	struct l2cap_chan *chan = conn->smp;
 	struct smp_chan *smp = chan->data;
 
-	BT_DBG("conn %p", conn);
+	BT_INFO("conn %p", conn);
 
 	if (skb->len < sizeof(*rp))
 		return SMP_INVALID_PARAMS;
@@ -2478,7 +2478,7 @@ static int smp_cmd_master_ident(struct l2cap_conn *conn, struct sk_buff *skb)
 	struct smp_ltk *ltk;
 	u8 authenticated;
 
-	BT_DBG("conn %p", conn);
+	BT_INFO("conn %p", conn);
 
 	if (skb->len < sizeof(*rp))
 		return SMP_INVALID_PARAMS;
@@ -2510,7 +2510,7 @@ static int smp_cmd_ident_info(struct l2cap_conn *conn, struct sk_buff *skb)
 	struct l2cap_chan *chan = conn->smp;
 	struct smp_chan *smp = chan->data;
 
-	BT_DBG("");
+	BT_INFO("");
 
 	if (skb->len < sizeof(*info))
 		return SMP_INVALID_PARAMS;
@@ -2533,7 +2533,7 @@ static int smp_cmd_ident_addr_info(struct l2cap_conn *conn,
 	struct hci_conn *hcon = conn->hcon;
 	bdaddr_t rpa;
 
-	BT_DBG("");
+	BT_INFO("");
 
 	if (skb->len < sizeof(*info))
 		return SMP_INVALID_PARAMS;
@@ -2600,7 +2600,7 @@ static int smp_cmd_sign_info(struct l2cap_conn *conn, struct sk_buff *skb)
 	struct smp_chan *smp = chan->data;
 	struct smp_csrk *csrk;
 
-	BT_DBG("conn %p", conn);
+	BT_INFO("conn %p", conn);
 
 	if (skb->len < sizeof(*rp))
 		return SMP_INVALID_PARAMS;
@@ -2680,7 +2680,7 @@ static int smp_cmd_public_key(struct l2cap_conn *conn, struct sk_buff *skb)
 	struct smp_cmd_pairing_confirm cfm;
 	int err;
 
-	BT_DBG("conn %p", conn);
+	BT_INFO("conn %p", conn);
 
 	if (skb->len < sizeof(*key))
 		return SMP_INVALID_PARAMS;
@@ -2715,8 +2715,8 @@ static int smp_cmd_public_key(struct l2cap_conn *conn, struct sk_buff *skb)
 			return err;
 	}
 
-	SMP_DBG("Remote Public Key X: %32phN", smp->remote_pk);
-	SMP_DBG("Remote Public Key Y: %32phN", smp->remote_pk + 32);
+	BT_INFO("Remote Public Key X: %32phN", smp->remote_pk);
+	BT_INFO("Remote Public Key Y: %32phN", smp->remote_pk + 32);
 
 	/* Compute the shared secret on the same crypto tfm on which the private
 	 * key was set/generated.
@@ -2738,13 +2738,13 @@ static int smp_cmd_public_key(struct l2cap_conn *conn, struct sk_buff *skb)
 	if (compute_ecdh_secret(tfm_ecdh, smp->remote_pk, smp->dhkey))
 		return SMP_UNSPECIFIED;
 
-	SMP_DBG("DHKey %32phN", smp->dhkey);
+	BT_INFO("DHKey %32phN", smp->dhkey);
 
 	set_bit(SMP_FLAG_REMOTE_PK, &smp->flags);
 
 	smp->method = sc_select_method(smp);
 
-	BT_DBG("%s selected method 0x%02x", hdev->name, smp->method);
+	BT_INFO("%s selected method 0x%02x", hdev->name, smp->method);
 
 	/* JUST_WORKS and JUST_CFM result in an unauthenticated key */
 	if (smp->method == JUST_WORKS || smp->method == JUST_CFM)
@@ -2819,7 +2819,7 @@ static int smp_cmd_dhkey_check(struct l2cap_conn *conn, struct sk_buff *skb)
 	u8 io_cap[3], r[16], e[16];
 	int err;
 
-	BT_DBG("conn %p", conn);
+	BT_INFO("conn %p", conn);
 
 	if (skb->len < sizeof(*check))
 		return SMP_INVALID_PARAMS;
@@ -2879,7 +2879,7 @@ static int smp_cmd_keypress_notify(struct l2cap_conn *conn,
 {
 	struct smp_cmd_keypress_notify *kp = (void *) skb->data;
 
-	BT_DBG("value 0x%02x", kp->value);
+	BT_INFO("value 0x%02x", kp->value);
 
 	return 0;
 }
@@ -2976,7 +2976,7 @@ static int smp_sig_channel(struct l2cap_chan *chan, struct sk_buff *skb)
 		break;
 
 	default:
-		BT_DBG("Unknown command code 0x%2.2x", code);
+		BT_INFO("Unknown command code 0x%2.2x", code);
 		reason = SMP_CMD_NOTSUPP;
 		goto done;
 	}
@@ -3001,7 +3001,7 @@ static void smp_teardown_cb(struct l2cap_chan *chan, int err)
 {
 	struct l2cap_conn *conn = chan->conn;
 
-	BT_DBG("chan %p", chan);
+	BT_INFO("chan %p", chan);
 
 	if (chan->data)
 		smp_chan_destroy(conn);
@@ -3018,7 +3018,7 @@ static void bredr_pairing(struct l2cap_chan *chan)
 	struct smp_cmd_pairing req;
 	struct smp_chan *smp;
 
-	BT_DBG("chan %p", chan);
+	BT_INFO("chan %p", chan);
 
 	/* Only new pairings are interesting */
 	if (!test_bit(HCI_CONN_NEW_LINK_KEY, &hcon->flags))
@@ -3065,7 +3065,7 @@ static void bredr_pairing(struct l2cap_chan *chan)
 
 	set_bit(SMP_FLAG_SC, &smp->flags);
 
-	BT_DBG("%s starting SMP over BR/EDR", hdev->name);
+	BT_INFO("%s starting SMP over BR/EDR", hdev->name);
 
 	/* Prepare and send the BR/EDR SMP Pairing Request */
 	build_bredr_pairing_cmd(smp, &req, NULL);
@@ -3083,7 +3083,7 @@ static void smp_resume_cb(struct l2cap_chan *chan)
 	struct l2cap_conn *conn = chan->conn;
 	struct hci_conn *hcon = conn->hcon;
 
-	BT_DBG("chan %p", chan);
+	BT_INFO("chan %p", chan);
 
 	if (hcon->type == ACL_LINK) {
 		bredr_pairing(chan);
@@ -3106,7 +3106,7 @@ static void smp_ready_cb(struct l2cap_chan *chan)
 	struct l2cap_conn *conn = chan->conn;
 	struct hci_conn *hcon = conn->hcon;
 
-	BT_DBG("chan %p", chan);
+	BT_INFO("chan %p", chan);
 
 	/* No need to call l2cap_chan_hold() here since we already own
 	 * the reference taken in smp_new_conn_cb(). This is just the
@@ -3124,7 +3124,7 @@ static int smp_recv_cb(struct l2cap_chan *chan, struct sk_buff *skb)
 {
 	int err;
 
-	BT_DBG("chan %p", chan);
+	BT_INFO("chan %p", chan);
 
 	err = smp_sig_channel(chan, skb);
 	if (err) {
@@ -3176,7 +3176,7 @@ static inline struct l2cap_chan *smp_new_conn_cb(struct l2cap_chan *pchan)
 {
 	struct l2cap_chan *chan;
 
-	BT_DBG("pchan %p", pchan);
+	BT_INFO("pchan %p", pchan);
 
 	chan = l2cap_chan_create();
 	if (!chan)
@@ -3197,7 +3197,7 @@ static inline struct l2cap_chan *smp_new_conn_cb(struct l2cap_chan *pchan)
 	 */
 	atomic_set(&chan->nesting, L2CAP_NESTING_SMP);
 
-	BT_DBG("created chan %p", chan);
+	BT_INFO("created chan %p", chan);
 
 	return chan;
 }
@@ -3301,7 +3301,7 @@ static void smp_del_chan(struct l2cap_chan *chan)
 {
 	struct smp_dev *smp;
 
-	BT_DBG("chan %p", chan);
+	BT_INFO("chan %p", chan);
 
 	smp = chan->data;
 	if (smp) {
@@ -3462,7 +3462,7 @@ int smp_register(struct hci_dev *hdev)
 {
 	struct l2cap_chan *chan;
 
-	BT_DBG("%s", hdev->name);
+	BT_INFO("%s", hdev->name);
 
 	/* If the controller does not support Low Energy operation, then
 	 * there is also no need to register any SMP channel.
